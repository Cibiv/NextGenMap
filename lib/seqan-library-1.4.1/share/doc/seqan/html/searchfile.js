var DB = [
['Adaption', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Adaption" title="Functionality that allows to access built-in type or data types from external libraries in the same way as SeqAn classes.">'],
['Affine Gap Costs', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Affine+_Gap+_Costs" title="A scoring scheme that defines the score for a gap of length $n$ as $gap_open + (n-1)* gap_extend$.">'],
['Alignment', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Alignment" title="An arrangement of two or more sequences: Each character is connected to at most one character for each other sequence, and that the characters in each sequence are ordered in the same way as the connected characters in other sequences.">'],
['Blank', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Blank" title="One position within a @glos:gap@ area of an alignment.">'],
['Concept', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Concept" title="A kind of interface used in generic programmic that is not formulated in C++ but only a part of the documentation.">'],
['Gap', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Gap" title="A part of an @glos:alignment@ in which characters of one sequence are not aligned to characters of the other sequence.">'],
['Haystack', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Haystack" title="The sequence that is searched for @glos:needles@.">'],
['Index', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Index" title="A data structure for faster searching in sequences.">'],
['Linear Gap Costs', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Linear+_Gap+_Costs" title="A scoring scheme that defines the score for a gap to be proportional to the length of the gap.">'],
['Metafunction', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Metafunction" title=" A C++ construct that is used to determine types and constants at compile time.">'],
['Needle', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Needle" title="The sequence that is searched in the @glos:haystack@.">'],
['Scoring Scheme', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Scoring+_Scheme" title="A rule for calculating the similarity between two values or between a value and a @glos:blank@.">'],
['SeqAn', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Seq_An" title=" The C++ library for sequence analysis.">'],
['Specialization', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Specialization" title="A refinement of a class that was defined using @glos:Template Subclassing@.">'],
['Tag', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Tag" title="A type that acts as a switch when applied as argument to functions or @glos:Metafunction|metafunctions@.">'],
['Template Subclassing', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Template+_Subclassing" title="An alternative to inheritance for the refinement of classes that is based on class template specialization.">'],
['Trie', '(Glossary)', 'href="PAGE_Glossary.html#GLOSSARY_Trie" title="A tree shaped automaton.">'],
['AbndmAlgo', '(Spec)', 'href="SPEC_Abndm_Algo.html" title=" Approximate Backward Nondeterministic Dawg Matching algorithm. Approximate string matching using bit parallelism.">'],
['absFreqOfLettersInSeq', '(Function)', 'href="FUNCTION.abs_Freq_Of_Letters_In_Seq.html" title="Counts the number of times each residue of a fixed sequence alphabet occurs in a given sequence.">'],
['absFreqOfLettersInSetOfSeqs', '(Function)', 'href="FUNCTION.abs_Freq_Of_Letters_In_Set_Of_Seqs.html" title="Counts the number of times each residue of a fixed sequence alphabet occurs in a given set of sequences.">'],
['Accumulator', '(Class)', 'href="CLASS_Accumulator.html" title="Accumulator base class.">'],
['Adaptions', '', '<a target=_parent href="INDEXPAGE_Adaption.html">'],
['Adaptor Iterator', '(Spec)', 'href="SPEC_Adaptor+_Iterator.html" title="Adapts iterators to Concept.RootedIteratorConcept.">'],
['add (Map)', '(Function)', 'href="FUNCTION_Map_23add.html" title="Insert another value into a multi map.">'],
['addArgument (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23add_Argument.html" title="Adds a Class.ArgParseArgument object to the Class.ArgumentParser.">'],
['addChild', '(Function)', 'href="FUNCTION.add_Child.html" title="Adds a new child vertex to a parent vertex. Optionally a cargo can be attached to the parent-child edge.">'],
['addDefaultValue (ArgParseOption)', '(Function)', 'href="FUNCTION_Arg_Parse_Option_23add_Default_Value.html" title="Adds/appends a new value to the list of default values.">'],
['addDefaultValue (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23add_Default_Value.html" title="Add to the default values of an option of an ArgumentParser.">'],
['addDescription (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23add_Description.html" title="Appends a description paragraph to the Class.ArgumentParser documentation.">'],
['addEdge', '(Function)', 'href="FUNCTION.add_Edge.html" title="Adds a new edge to the graph, either with or without cargo.">'],
['addEdges', '(Function)', 'href="FUNCTION.add_Edges.html" title="Shortcut to add multiple edges at once. Creates vertices implicitly.">'],
['addInterval', '(Function)', 'href="FUNCTION.add_Interval.html" title="Adds an interval to an interval tree.">'],
['addLine (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23add_Line.html" title="Adds a line of text to the help output of the Class.ArgumentParser in the block of Class.ArgParseOptions.">'],
['addListItem (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23add_List_Item.html" title="Appends a list item to the Class.ArgumentParser.">'],
['addListItem (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23add_List_Item.html" title="Add list item to Class.ToolDoc object.">'],
['addOption (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23add_Option.html" title="Adds a Class.ArgParseOption object to the Class.ArgumentParser.">'],
['addSection (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23add_Section.html" title="Begins a new section of Class.ArgParseOption the help output of the Class.ArgumentParser.">'],
['addSection (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23add_Section.html" title="Add section to Class.ToolDoc object.">'],
['addSeed (SeedSet)', '(Function)', 'href="FUNCTION_Seed_Set_23add_Seed.html" title="Adds a seed to an existing Class.SeedSet using different algorithms for local chaining.">'],
['addSequenceName (BedStream)', '(Function)', 'href="FUNCTION_Bed_Stream_23add_Sequence_Name.html" title="Add the name of a sequence to a Class.BedStream.">'],
['addSequenceName (GffStream)', '(Function)', 'href="FUNCTION_Gff_Stream_23add_Sequence_Name.html" title="Add the name of a sequence to a Class.GffStream.">'],
['addSubSection (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23add_Sub_Section.html" title="Add subsection to Class.ToolDoc object.">'],
['addText (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23add_Text.html" title="Appends a text paragraph to the Class.ArgumentParser.">'],
['addText (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23add_Text.html" title="Add text line/paragraph to Class.ToolDoc.">'],
['addTextSection (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23add_Text_Section.html" title="Adds a text section to the Class.ArgumentParser.">'],
['addTextSubSection (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23add_Text_Sub_Section.html" title="Adds a text subsection to the Class.ArgumentParser.">'],
['addUsageLine (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23add_Usage_Line.html" title="Adds a line of text to the usage output of the Class.ArgumentParser.">'],
['addValue', '(Function)', 'href="FUNCTION.add_Value.html" title="Adds a value of a specific type to each element of a given Class.FrequencyDistribution object.">'],
['addVertex', '(Function)', 'href="FUNCTION.add_Vertex.html" title="Adds a new vertex to the graph.">'],
['Adjacency Iterator', '(Spec)', 'href="SPEC_Adjacency+_Iterator.html" title="Adjacency iterator for Class.Graph.">'],
['adjustTop', '(Function)', 'href="FUNCTION.adjust_Top.html" title="Adjusts the priority of the first item.">'],
['adviseFileSegment', '(Function)', 'href="FUNCTION.advise_File_Segment.html" title="Give advice about use of a memory-mapped file segment.">'],
['AFScore', '(Class)', 'href="CLASS_A_F_Score.html" title="Used to specify parameters and methods for alignment-free sequence comparison">'],
['AFScore (D2 AFScore)', '(Memfunc)', 'href="MEMFUNC_D2+_A_F_Score_23_A_F_Score.html" title="Constructor">'],
['AFScore (D2Star AFScore)', '(Memfunc)', 'href="MEMFUNC_D2_Star+_A_F_Score_23_A_F_Score.html" title="Constructor">'],
['AFScore (D2z AFScore)', '(Memfunc)', 'href="MEMFUNC_D2z+_A_F_Score_23_A_F_Score.html" title="Constructor">'],
['AFScore (N2 AFScore)', '(Memfunc)', 'href="MEMFUNC_N2+_A_F_Score_23_A_F_Score.html" title="Constructor">'],
['AggregateConcept', '(Concept)', 'href="CONCEPT_Aggregate_Concept.html" title="Aggregate types contain a fixed number of fixed-size values.">'],
['AhoCorasick', '(Spec)', 'href="SPEC_Aho_Corasick.html" title=" Multiple exact string matching using Aho-Corasick.">'],
['Align', '(Class)', 'href="CLASS_Align.html" title="An alignment of sequences.">'],
['AlignColIterator', '(Spec)', 'href="SPEC_Align_Col_Iterator.html" title="Iterator for Class.AlignCols pseudo container.">'],
['AlignCols', '(Class)', 'href="CLASS_Align_Cols.html" title="Pseudo columns container for row-based alignment classes.">'],
['AlignConfig', '(Class)', 'href="CLASS_Align_Config.html" title="The AlignConfig class encapsulates how DP is carried out. It indicates at what ends gaps are free, the so-called free ends-space alignments.">'],
['AlignedReadLayout', '(Class)', 'href="CLASS_Aligned_Read_Layout.html" title="Stores a 2-dimensional visible layout of a multi-read alignment.">'],
['alignedReadStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23aligned_Read_Store.html" title="Class.String that stores &lt;alignId, readId, contigId, pairMatchId, beginPos, endPos, gaps>.">'],
['AlignedReadStoreElement', '(Class)', 'href="CLASS_Aligned_Read_Store_Element.html" title="Represents an alignment between read and contig.">'],
['AlignedReadStoreElement (AlignedReadStoreElement)', '(Memfunc)', 'href="MEMFUNC_Aligned_Read_Store_Element_23_Aligned_Read_Store_Element.html" title="Constructor">'],
['alignedReadTagStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23aligned_Read_Tag_Store.html" title="Class.StringSet that maps from alignId to alignTag.">'],
['alignment', '(Function)', 'href="FUNCTION.alignment.html" title="Returns an alignment of the occurrences of the Function.representative substring in the index text.">'],
['Alignment Graph', '(Spec)', 'href="SPEC_Alignment+_Graph.html" title="An alignment graph.">'],
['Alignment Graph Combination', '(Tag)', 'href="TAG_Alignment+_Graph+_Combination.html" title="A tag to specify how to combine alignment graphs.">'],
['Alignment Graph Format', '(Tag)', 'href="TAG_Alignment+_Graph+_Format.html" title="A file format to write an alignment graph.">'],
['alignmentEvaluation', '(Function)', 'href="FUNCTION.alignment_Evaluation.html" title="Given a multiple alignment, this function calculates all kinds of alignment statistics.">'],
['alignmentFreeComparison', '(Function)', 'href="FUNCTION.alignment_Free_Comparison.html" title="Computes the pairwise similarity scores for a set of sequences">'],
['alignQualityStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23align_Quality_Store.html" title="Class.String that maps from alignId to &lt;pairScore, score, errors>.">'],
['AlignQualityStoreElement', '(Class)', 'href="CLASS_Align_Quality_Store_Element.html" title="Stores alignment qualities.">'],
['AlignQualityStoreElement (AlignQualityStoreElement)', '(Memfunc)', 'href="MEMFUNC_Align_Quality_Store_Element_23_Align_Quality_Store_Element.html" title="Constructor">'],
['All Pairs Shortest Path', '(Demo)', 'href="DEMO_All+_Pairs+_Shortest+_Path.html" title="Computing all-pairs shortest paths.">'],
['Alloc String', '(Spec)', 'href="SPEC_Alloc+_String.html" title="Expandable string that is stored on heap.">'],
['allocate', '(Function)', 'href="FUNCTION.allocate.html" title="Allocates memory from heap.">'],
['Allocator', '(Class)', 'href="CLASS_Allocator.html" title="Manager for allocated memory.">'],
['Allocator', '(Concept)', 'href="CONCEPT_Allocator.html" title="Object that manages memory allocation.">'],
['Allocator Usage', '(Tag)', 'href="TAG_Allocator+_Usage.html" title="The purpose of an allocated memory block.">'],
['Allocators', '(Demo)', 'href="DEMO_Allocators.html" title="Examples for memory allocation.">'],
['AllowsFastRandomAccess', '(Metafunction)', 'href="METAFUNCTION_Allows_Fast_Random_Access.html" title="Determines whether a sequence efficiently supports random access.">'],
['allPairsShortestPath', '(Function)', 'href="FUNCTION.all_Pairs_Shortest_Path.html" title="Finds shortest paths between all pairs of vertices in a graph.">'],
['alpha (OpenAddressing)', '(Memvar)', 'href="MEMVAR_Open_Addressing_23alpha.html" title="Load factor. Controls space/time-tradeoff and must be greater 1. Default value is 1.6.">'],
['Alphabet', '(Metafunction)', 'href="METAFUNCTION_Alphabet.html" title="Access to the Alphabet type.">'],
['Alphabet Expansion', '(Spec)', 'href="SPEC_Alphabet+_Expansion.html" title="Modifier that adds a character to an alphabet.">'],
['AlphabetConcept', '(Concept)', 'href="CONCEPT_Alphabet_Concept.html" title="Natural container value.">'],
['Alphabets', '(Demo)', 'href="DEMO_Alphabets.html" title="Examples for common alphabets.">'],
['AlphabetWithGapsConcept', '(Concept)', 'href="CONCEPT_Alphabet_With_Gaps_Concept.html" title="An alphabet that includes a specific gap character.">'],
['AlphabetWithQualitiesConcept', '(Concept)', 'href="CONCEPT_Alphabet_With_Qualities_Concept.html" title="An alphabet where qualities can be attached to the characters.">'],
['AlphabetWithUnknownValueConcept', '(Concept)', 'href="CONCEPT_Alphabet_With_Unknown_Value_Concept.html" title="An alphabet which includes a specific &quot;unknown&quot; character.">'],
['alt (VcfRecord)', '(Memvar)', 'href="MEMVAR_Vcf_Record_23alt.html" title="Alternative bases in the variants, comma-separated if multiple (Shortcut.CharString).">'],
['AminoAcid', '(Spec)', 'href="SPEC_Amino_Acid.html" title="Iupac code for amino acids.">'],
['AnchorGaps', '(Spec)', 'href="SPEC_Anchor_Gaps.html" title="Stores gaps anchors of the first characters behind gaps.">'],
['And', '(Metafunction)', 'href="METAFUNCTION_And.html" title="Metaprogramming &quot;and&quot; operator.">'],
['AndC', '(Metafunction)', 'href="METAFUNCTION_And_C.html" title="Metaprogramming boolean &quot;and&quot; operatand, value variant.">'],
['annotationKeyStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23annotation_Key_Store.html" title="Class.StringSet that maps from keyId to the name of a key. The keyId is used to address Memvar.AnnotationStoreElement#values of an annotation.">'],
['annotationNameStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23annotation_Name_Store.html" title="Class.StringSet that maps from annoId to annoName.">'],
['annotationStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23annotation_Store.html" title="Class.String that maps from annoId to &lt;contigId, typeId, beginPos, endPos, parentId, lastChildId, nextSiblingId, values>.">'],
['AnnotationStoreElement', '(Class)', 'href="CLASS_Annotation_Store_Element.html" title="Represents an annotation of a contig feature.">'],
['AnnotationStoreElement (AnnotationStoreElement)', '(Memfunc)', 'href="MEMFUNC_Annotation_Store_Element_23_Annotation_Store_Element.html" title="Constructor">'],
['AnnotationTree Iterator (AnnotationTree Iterator)', '(Memfunc)', 'href="MEMFUNC_Annotation_Tree+_Iterator_23_Annotation_Tree+_Iterator.html" title="Constructor">'],
['AnnotationTree Iterator', '(Spec)', 'href="SPEC_Annotation_Tree+_Iterator.html" title="Iterator of the annotation tree represented by a Class.FragmentStore.">'],
['annotationTypeStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23annotation_Type_Store.html" title="Class.StringSet that maps from typeId to the type name of an annotation, e.g. &quot;gene&quot; or &quot;exon&quot;. typeId is a member of the Class.AnnotationStoreElement.">'],
['append (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23append.html" title="Append two Class.ToolDoc objects.">'],
['append', '(Function)', 'href="FUNCTION.append.html" title="Concatenate two containers.">'],
['appendAlignedRead', '(Function)', 'href="FUNCTION.append_Aligned_Read.html" title="Appends an aligned read entry to a fragment store.">'],
['appendDiagonal', '(Function)', 'href="FUNCTION.append_Diagonal.html" title=" Adds diagonal to the Chained Seed.">'],
['appendLocalMatch', '(Function)', 'href="FUNCTION.append_Local_Match.html" title="Append a new local match to a Class.LocalMatchStore">'],
['appendMatePair', '(Function)', 'href="FUNCTION.append_Mate_Pair.html" title="Appends two paired-end reads to a fragment store.">'],
['appendName', '(Function)', 'href="FUNCTION.append_Name.html" title="Appends a name to a name store.">'],
['appendRead', '(Function)', 'href="FUNCTION.append_Read.html" title="Appends a read to a fragment store.">'],
['appendSeqs', '(Function)', 'href="FUNCTION.append_Seqs.html" title="Appends all sequences stored in files of directory to a StringSet.">'],
['appendValue (RankSupportBitString)', '(Function)', 'href="FUNCTION_Rank_Support_Bit_String_23append_Value.html" title="Appends a value to a container.">'],
['appendValue', '(Function)', 'href="FUNCTION.append_Value.html" title="Appends a value to a container.">'],
['Approximate Searching', '(Demo)', 'href="DEMO_Approximate+_Searching.html" title="Approximate string matching.">'],
['ArgParseArgument', '(Class)', 'href="CLASS_Arg_Parse_Argument.html" title="Stores information for a specific command line argument. It can be either an argument of a ArgParseArgument or directly an Argument on the command line.">'],
['ArgParseArgument (ArgParseArgument)', '(Memfunc)', 'href="MEMFUNC_Arg_Parse_Argument_23_Arg_Parse_Argument.html" title="Constructor">'],
['ArgParseOption', '(Class)', 'href="CLASS_Arg_Parse_Option.html" title="Stores information for a specific command line option.">'],
['ArgParseOption (ArgParseOption)', '(Memfunc)', 'href="MEMFUNC_Arg_Parse_Option_23_Arg_Parse_Option.html" title="Constructor">'],
['ArgumentParser', '(Class)', 'href="CLASS_Argument_Parser.html" title="Stores multiple Class.ArgParseOption objects and parses the command line arguments for these options.">'],
['ArgumentParser (ArgumentParser)', '(Memfunc)', 'href="MEMFUNC_Argument_Parser_23_Argument_Parser.html" title="Constructor">'],
['Array String', '(Spec)', 'href="SPEC_Array+_String.html" title="Fast, static-size string.">'],
['arrayClearSpace', '(Function)', 'href="FUNCTION.array_Clear_Space.html" title="Destroys the begin of an array and keeps the rest.">'],
['arrayConstruct', '(Function)', 'href="FUNCTION.array_Construct.html" title="Construct objects in a given memory buffer.">'],
['arrayConstructCopy', '(Function)', 'href="FUNCTION.array_Construct_Copy.html" title="Copy constructs an array of objects into in a given memory buffer.">'],
['arrayConstructMove', '(Function)', 'href="FUNCTION.array_Construct_Move.html" title="Move constructs an array of objects into in a given memory buffer.">'],
['arrayCopy', '(Function)', 'href="FUNCTION.array_Copy.html" title="Copies a range of objects into another range of objects.">'],
['arrayCopyBackward', '(Function)', 'href="FUNCTION.array_Copy_Backward.html" title="Copies a range of objects into another range of objects starting from the last element.">'],
['arrayCopyForward', '(Function)', 'href="FUNCTION.array_Copy_Forward.html" title="Copies a range of objects into another range of objects starting from the first element.">'],
['arrayDestruct', '(Function)', 'href="FUNCTION.array_Destruct.html" title="Destroys an array of objects.">'],
['arrayFill', '(Function)', 'href="FUNCTION.array_Fill.html" title="Assigns one object to each element of a range.">'],
['ArrayGaps', '(Spec)', 'href="SPEC_Array_Gaps.html" title="Stores length of gap- and non-gapped runs in an array.">'],
['arrayMove', '(Function)', 'href="FUNCTION.array_Move.html" title="Moves a range of objects into another range of objects.">'],
['arrayMoveBackward', '(Function)', 'href="FUNCTION.array_Move_Backward.html" title="Moves a range of objects into another range of objects starting from the last element.">'],
['arrayMoveForward', '(Function)', 'href="FUNCTION.array_Move_Forward.html" title="Moves a range of objects into another range of objects starting from the first element.">'],
['assign', '(Function)', 'href="FUNCTION.assign.html" title="Assigns one object to another object.">'],
['AssignableConcept', '(Concept)', 'href="CONCEPT_Assignable_Concept.html" title="A type with an assignment operator.">'],
['assignBeginState', '(Function)', 'href="FUNCTION.assign_Begin_State.html" title="Assigns a begin state.">'],
['assignCargo', '(Function)', 'href="FUNCTION.assign_Cargo.html" title="Assigns a new cargo to the edge.">'],
['assignCroppedSeqId', '(Function)', 'href="FUNCTION.assign_Cropped_Seq_Id.html" title="Extracts the sequence id up to the first whitespace of a sequence file fragment.">'],
['assignEdgeMap', '(Function)', 'href="FUNCTION.assign_Edge_Map.html" title="Initializes a vertex map with values of an array.">'],
['assignEmissionProbability', '(Function)', 'href="FUNCTION.assign_Emission_Probability.html" title="Assigns a new emission probability.">'],
['assignEndState', '(Function)', 'href="FUNCTION.assign_End_State.html" title="Assigns an end state.">'],
['assignHost', '(Function)', 'href="FUNCTION.assign_Host.html" title="Assign to the host of a given value.">'],
['assignNextS', '(Function)', 'href="FUNCTION.assign_Next_S.html" title="Assigns another EdgeStump to the next source pointer.">'],
['assignNextT', '(Function)', 'href="FUNCTION.assign_Next_T.html" title="Assigns another EdgeStump to the next target pointer.">'],
['assignProperty', '(Function)', 'href="FUNCTION.assign_Property.html" title="Assigns a property to an item in the property map.">'],
['assignQual', '(Function)', 'href="FUNCTION.assign_Qual.html" title="Extracts the quality values of a sequence file fragment.">'],
['assignQualId', '(Function)', 'href="FUNCTION.assign_Qual_Id.html" title="Extracts the quality value id of a sequence file fragment.">'],
['assignQualities', '(Function)', 'href="FUNCTION.assign_Qualities.html" title="Assign quality values between strings.">'],
['assignQualityValue', '(Function)', 'href="FUNCTION.assign_Quality_Value.html" title="Assigns quality to a character from an alphabet with integrated quality, e.g. to a specified element from a sequence.">'],
['assignRoot', '(Function)', 'href="FUNCTION.assign_Root.html" title="Assigns a new root vertex to the graph.">'],
['assignSeq', '(Function)', 'href="FUNCTION.assign_Seq.html" title="Extracts the sequence part of a sequence file fragment.">'],
['assignSeqId', '(Function)', 'href="FUNCTION.assign_Seq_Id.html" title="Extracts the sequence id of a sequence file fragment.">'],
['assignSilentStatus', '(Function)', 'href="FUNCTION.assign_Silent_Status.html" title="Assigns a silent status to a state.">'],
['assignSource (Gaps)', '(Function)', 'href="FUNCTION_Gaps_23assign_Source.html" title="Assign the source of a Gaps object, copying data.">'],
['assignSource (Graph)', '(Function)', 'href="FUNCTION_Graph_23assign_Source.html" title="Assigns a source vertex to an edge.">'],
['assignStringSet', '(Function)', 'href="FUNCTION.assign_String_Set.html" title="Assigns a new string set to an alignment graph.">'],
['assignTagsBamToSam', '(Function)', 'href="FUNCTION.assign_Tags_Bam_To_Sam.html" title="Assign tags in BAM format to tags in SAM format.">'],
['assignTagsSamToBam', '(Function)', 'href="FUNCTION.assign_Tags_Sam_To_Bam.html" title="Assign tags in SAM format to tags in BAM format.">'],
['assignTarget', '(Function)', 'href="FUNCTION.assign_Target.html" title="Assigns a target vertex to an edge.">'],
['assignTransitionProbability', '(Function)', 'href="FUNCTION.assign_Transition_Probability.html" title="Assigns a new transition probability to an existing edge.">'],
['assignValue', '(Function)', 'href="FUNCTION.assign_Value.html" title="Assigns value to item.">'],
['assignValueById', '(Function)', 'href="FUNCTION.assign_Value_By_Id.html" title="Adds a new string to the StringSet and returns an id.">'],
['assignValueByKey', '(Function)', 'href="FUNCTION.assign_Value_By_Key.html" title="Add or update a key-value pair of the current annotation.">'],
['assignVertexMap', '(Function)', 'href="FUNCTION.assign_Vertex_Map.html" title="Initializes a vertex map with values of an array.">'],
['Async', '(Spec)', 'href="SPEC_Async.html" title="File structure supporting synchronous and asynchronous input/output access.">'],
['asyncReadAt', '(Function)', 'href="FUNCTION.async_Read_At.html" title="Asynchronously loads records from a specific position in a file.">'],
['AsyncRequest', '(Class)', 'href="CLASS_Async_Request.html" title="Associated with an asynchronous I/O request.">'],
['asyncWriteAt', '(Function)', 'href="FUNCTION.async_Write_At.html" title="Asynchronously saves records to a specific position in a file.">'],
['atBegin', '(Function)', 'href="FUNCTION.at_Begin.html" title="Determines whether an iterator is at the beginning position.">'],
['atEnd (BamStream)', '(Function)', 'href="FUNCTION_Bam_Stream_23at_End.html" title="Check whether a Class.BamStream object is at end when reading.">'],
['atEnd (BedStream)', '(Function)', 'href="FUNCTION_Bed_Stream_23at_End.html" title="Query a Class.BedStream for being at the end of the file.">'],
['atEnd (GffStream)', '(Function)', 'href="FUNCTION_Gff_Stream_23at_End.html" title="Query a Class.GffStream for being at the end of the file.">'],
['atEnd (RecordReader)', '(Function)', 'href="FUNCTION_Record_Reader_23at_End.html" title="Returns true if there is no more data to be read.">'],
['atEnd (SequenceStream)', '(Function)', 'href="FUNCTION_Sequence_Stream_23at_End.html" title="Check whether a Class.SequenceStream is at the end of the file.">'],
['atEnd (VSTree Iterator)', '(Function)', 'href="FUNCTION_V_S_Tree+_Iterator_23at_End.html" title="Determines whether an virtual string tree iterator is at the end position.">'],
['atEnd (VcfStream)', '(Function)', 'href="FUNCTION_Vcf_Stream_23at_End.html" title="Query a Class.VcfStream for being at the end of the file.">'],
['atEnd', '(Function)', 'href="FUNCTION.at_End.html" title="Determines whether an iterator is at the end position.">'],
['atEndOfSequence', '(Function)', 'href="FUNCTION.at_End_Of_Sequence.html" title="Returns true if the iterator is at the end of a sequence.">'],
['atNil', '(Function)', 'href="FUNCTION.at_Nil.html" title="Tests whether iterator is at nil position.">'],
['atomicAdd', '(Function)', 'href="FUNCTION.atomic_Add.html" title="Atomically add an integer to another integer.">'],
['atomicCas', '(Function)', 'href="FUNCTION.atomic_Cas.html" title="Compare-and-Swap operation.">'],
['atomicDec', '(Function)', 'href="FUNCTION.atomic_Dec.html" title="Atomically decrement an integer.">'],
['atomicInc', '(Function)', 'href="FUNCTION.atomic_Inc.html" title="Atomically increment an integer.">'],
['atomicMax', '(Function)', 'href="FUNCTION.atomic_Max.html" title="Lock-free implementation of x = max(x, y).">'],
['atomicMin', '(Function)', 'href="FUNCTION.atomic_Min.html" title="Lock-free implementation of x = min(x, y).">'],
['atomicOr', '(Function)', 'href="FUNCTION.atomic_Or.html" title="Atomically combine two integers with OR operation.">'],
['atomicXor', '(Function)', 'href="FUNCTION.atomic_Xor.html" title="Atomically combine wto integers with XOR operation.">'],
['attachToFile', '(Function)', 'href="FUNCTION.attach_To_File.html" title="Attach to already open input / output file.">'],
['Automaton', '(Spec)', 'href="SPEC_Automaton.html" title="An Automaton has directed edges, labeled with input symbols, and a distinct start state, called root. The input symbols require the use of a third parameter: The alphabet of the input symbols.">'],
['AutoSeqFormat', '(Class)', 'href="CLASS_Auto_Seq_Format.html" title="Auto-detects and stores a file format.">'],
['AutoSeqStreamFormat', '(Shortcut)', 'href="SHORTCUT_Auto_Seq_Stream_Format.html" title="A TagSelector for Shortcut.SeqStreamFormats, the list of the currently implemented Sequence-Formats (in RecordReader/Stream-IO)">'],
['average (Accumulator)', '(Function)', 'href="FUNCTION_Accumulator_23average.html" title="Return average from an accumulator.">'],
['Average Accumulator', '(Spec)', 'href="SPEC_Average+_Accumulator.html" title="Accumulator for computing averages.">'],
['back (Chained Seed)', '(Function)', 'href="FUNCTION_Chained+_Seed_23back.html" title="Returns a reference to the last seed diagonal.">'],
['back', '(Function)', 'href="FUNCTION.back.html" title="The last item in container.">'],
['backgroundFrequency', '(Function)', 'href="FUNCTION.background_Frequency.html" title="Determines the background letter frequencies in a given dataset">'],
['Backtracking', '(Spec)', 'href="SPEC_Backtracking.html" title="Provides approximate string matching via backtracking on a substring index.">'],
['backwardAlgorithm', '(Function)', 'href="FUNCTION.backward_Algorithm.html" title="Implements the backward algorithm.">'],
['BAI BamIndex', '(Spec)', 'href="SPEC_B_A_I+_Bam_Index.html" title="Access to BAI (samtools-style) Indices.">'],
['Bam', '(Tag)', 'href="TAG_Bam.html" title="Tag for identifying the BAM format.">'],
['BamAlignmentRecord', '(Class)', 'href="CLASS_Bam_Alignment_Record.html" title="Represent a record from a BAM/SAM file.">'],
['BamAlignmentRecord (BamAlignmentRecord)', '(Memfunc)', 'href="MEMFUNC_Bam_Alignment_Record_23_Bam_Alignment_Record.html" title="Constructor.">'],
['BamFlags', '(Enum)', 'href="ENUM_Bam_Flags.html" title="Shortcuts to the bitmask flags for BAM/SAM files.">'],
['BamHeader', '(Class)', 'href="CLASS_Bam_Header.html" title="Stores the information of the BAM header.">'],
['BamHeader (BamHeader)', '(Memfunc)', 'href="MEMFUNC_Bam_Header_23_Bam_Header.html" title="Constructor.">'],
['BamHeaderRecord', '(Class)', 'href="CLASS_Bam_Header_Record.html" title="Represents a header entry in a SAM file or the header section of the BAM header.">'],
['BamHeaderRecord (BamHeaderRecord)', '(Memfunc)', 'href="MEMFUNC_Bam_Header_Record_23_Bam_Header_Record.html" title="Constructor.">'],
['BamHeaderRecordType', '(Enum)', 'href="ENUM_Bam_Header_Record_Type.html" title="Enumeration for the header record type.">'],
['BamIndex', '(Class)', 'href="CLASS_Bam_Index.html" title="Access to BAM Indices.">'],
['BamIndex (BAI BamIndex)', '(Memfunc)', 'href="MEMFUNC_B_A_I+_Bam_Index_23_Bam_Index.html" title="Constructor.">'],
['BamIOContext', '(Class)', 'href="CLASS_Bam_I_O_Context.html" title="The I/O context to use for BAM I/O.">'],
['BamIOContext (BamIOContext)', '(Memfunc)', 'href="MEMFUNC_Bam_I_O_Context_23_Bam_I_O_Context.html" title="Constructor.">'],
['bamIOContext (BamStream)', '(Memvar)', 'href="MEMVAR_Bam_Stream_23bam_I_O_Context.html" title="The Class.BamIOContext object to use for reading and writing Class.BamAlignmentRecords.">'],
['bamRecordToAlignment', '(Function)', 'href="FUNCTION.bam_Record_To_Alignment.html" title="Convert Class.BamAlignmentRecord to an Class.Align object.">'],
['BamSortOrder', '(Enum)', 'href="ENUM_Bam_Sort_Order.html" title="Enumeration for the header record type.">'],
['BamStream', '(Class)', 'href="CLASS_Bam_Stream.html" title="Class that provides an easy to use interface for reading and writing SAM and BAM files.">'],
['BamStream (BamStream)', '(Memfunc)', 'href="MEMFUNC_Bam_Stream_23_Bam_Stream.html" title="Constructor">'],
['BamStream::Format', '(Enum)', 'href="ENUM_Bam_Stream_5ccolon_5ccolon_Format.html" title="Select the format to use for reading/writing.">'],
['BamStream::OperationMode', '(Enum)', 'href="ENUM_Bam_Stream_5ccolon_5ccolon_Operation_Mode.html" title="Select the operation mode of a Class.BamStream.">'],
['BamTagsDict', '(Class)', 'href="CLASS_Bam_Tags_Dict.html" title="Indexes start positions of BAM tags in a Shortcut.CharString and provides a dict-like API.">'],
['BamTagsDict (BamTagsDict)', '(Memfunc)', 'href="MEMFUNC_Bam_Tags_Dict_23_Bam_Tags_Dict.html" title="Constructor.">'],
['Banded LocalAlignmentEnumerator', '(Spec)', 'href="SPEC_Banded+_Local_Alignment_Enumerator.html" title="Banded enumeration of local alignments using the Waterman-Eggert algorithm.">'],
['bandedChainAlignment', '(Function)', 'href="FUNCTION.banded_Chain_Alignment.html" title="Computes the best global pairwise alignment between two sequences given a non-empty seed chain.">'],
['BasicOutputIteratorConcept', '(Concept)', 'href="CONCEPT_Basic_Output_Iterator_Concept.html" title="Iterator that allows dereferenced writing.">'],
['Bed12 BedRecord', '(Spec)', 'href="SPEC_Bed12+_Bed_Record.html" title="BedRecord with 12 fields.">'],
['Bed3 BedRecord', '(Spec)', 'href="SPEC_Bed3+_Bed_Record.html" title="BedRecord with 3 fields.">'],
['Bed4 BedRecord', '(Spec)', 'href="SPEC_Bed4+_Bed_Record.html" title="BedRecord with 4 fields.">'],
['Bed5 BedRecord', '(Spec)', 'href="SPEC_Bed5+_Bed_Record.html" title="BedRecord with 5 fields.">'],
['Bed6 BedRecord', '(Spec)', 'href="SPEC_Bed6+_Bed_Record.html" title="BedRecord with 6 fields.">'],
['BedIOContext', '(Class)', 'href="CLASS_Bed_I_O_Context.html" title="The I/O context to use for BED I/O.">'],
['BedIOContext (BedIOContext)', '(Memfunc)', 'href="MEMFUNC_Bed_I_O_Context_23_Bed_I_O_Context.html" title="Constructor.">'],
['BedRecord', '(Class)', 'href="CLASS_Bed_Record.html" title="Data structure for storing BED records.">'],
['BedRecord (BedRecord)', '(Memfunc)', 'href="MEMFUNC_Bed_Record_23_Bed_Record.html" title="Constructor.">'],
['BedRgb', '(Class)', 'href="CLASS_Bed_Rgb.html" title="RGB color for Spec.Bed12 BedRecord.">'],
['BedRgb (BedRgb)', '(Memfunc)', 'href="MEMFUNC_Bed_Rgb_23_Bed_Rgb.html" title="Default constructor and initialization of integer RGB values.">'],
['BedStream', '(Class)', 'href="CLASS_Bed_Stream.html" title="High-level BED I/O class.">'],
['BedStream (BedStream)', '(Memfunc)', 'href="MEMFUNC_Bed_Stream_23_Bed_Stream.html" title="Constructor.">'],
['BedStream::Mode', '(Enum)', 'href="ENUM_Bed_Stream_5ccolon_5ccolon_Mode.html" title="Open mode for the Class.BedStream class.">'],
['begin (Chained Seed)', '(Function)', 'href="FUNCTION_Chained+_Seed_23begin.html" title="Returns an iterator to the beginning of the seed digonals.">'],
['begin (Index)', '(Function)', 'href="FUNCTION_Index_23begin.html" title="Returns an iterator pointing to the root node of the virtual string tree/trie of an index. The only exception are Tag.DFS Order.Postorder iterators, where begin returns an iterator pointing to the leftmost node in the tree/trie.">'],
['begin', '(Function)', 'href="FUNCTION.begin.html" title="The begin of a container.">'],
['beginDiagonal (Seed)', '(Function)', 'href="FUNCTION_Seed_23begin_Diagonal.html" title="Returns the diagonal of the start point.">'],
['beginPos (AlignedReadStoreElement)', '(Memvar)', 'href="MEMVAR_Aligned_Read_Store_Element_23begin_Pos.html" title="Begin position of the alignment in gap-space.">'],
['beginPos (AnnotationStoreElement)', '(Memvar)', 'href="MEMVAR_Annotation_Store_Element_23begin_Pos.html" title="Begin position of the annotation in gap-space.">'],
['beginPos (BamAlignmentRecord)', '(Memvar)', 'href="MEMVAR_Bam_Alignment_Record_23begin_Pos.html" title="The position of this fragment mapping (0-based, INVALID_POS for \'*\').">'],
['beginPos (GenomicRegion)', '(Memvar)', 'href="MEMVAR_Genomic_Region_23begin_Pos.html" title="Begin position of the range on the chromosome. Default is -1.">'],
['beginPos (GffRecord)', '(Memvar)', 'href="MEMVAR_Gff_Record_23begin_Pos.html" title="The begin position of the record.">'],
['beginPos (VcfRecord)', '(Memvar)', 'href="MEMVAR_Vcf_Record_23begin_Pos.html" title="Position of the VCF record (__int32).">'],
['beginPosition (Gaps)', '(Function)', 'href="FUNCTION_Gaps_23begin_Position.html" title="Return the clipping begin position as a source position.">'],
['beginPosition', '(Function)', 'href="FUNCTION.begin_Position.html" title="Begin position of object in host.">'],
['beginPosition (BedRecord)', '(Memvar)', 'href="MEMVAR_Bed_Record_23begin_Position.html" title="Begin position on the reference.">'],
['beginPosition (Repeat)', '(Memvar)', 'href="MEMVAR_Repeat_23begin_Position.html" title="The begin position of the repeat of type TPos.">'],
['beginPositionH (Seed)', '(Function)', 'href="FUNCTION_Seed_23begin_Position_H.html" title=" Returns the begin position of the seed in the database.">'],
['beginPositionH (SeedDiagonal)', '(Memvar)', 'href="MEMVAR_Seed_Diagonal_23begin_Position_H.html" title="The position in the database sequence (horizontal).">'],
['beginPositionV (Seed)', '(Function)', 'href="FUNCTION_Seed_23begin_Position_V.html" title=" Returns the begin position of the seed in the query.">'],
['beginPositionV (SeedDiagonal)', '(Memvar)', 'href="MEMVAR_Seed_Diagonal_23begin_Position_V.html" title="The position in the query sequence (vertical).">'],
['beginRead', '(Function)', 'href="FUNCTION.begin_Read.html" title="Initiates a read process.">'],
['beginState', '(Function)', 'href="FUNCTION.begin_State.html" title="Returns a reference to the begin state.">'],
['beginWrite', '(Function)', 'href="FUNCTION.begin_Write.html" title="Initiates a write process.">'],
['Bellman-Ford Algorithm', '(Demo)', 'href="DEMO_Bellman-_Ford+_Algorithm.html" title="Computing single source shortest paths using Bellman-Ford algorithm.">'],
['bellmanFordAlgorithm', '(Function)', 'href="FUNCTION.bellman_Ford_Algorithm.html" title="Computes shortest paths from a single source in a directed graph.">'],
['Beta Pdf', '(Spec)', 'href="SPEC_Beta+_Pdf.html" title="Beta probability density function.">'],
['Bfam', '(Spec)', 'href="SPEC_Bfam.html" title="Backward Factor Automaton Matching algorithm.">'],
['Bfam&lt;Oracle&gt;', '(Spec)', 'href="SPEC_Bfam_3c_Oracle_3e.html" title="Backward Oracle Matching algorithm.">'],
['Bfam&lt;Trie&gt;', '(Spec)', 'href="SPEC_Bfam_3c_Trie_3e.html" title="Backward Suffix Trie Matching algorithm.">'],
['Bfs Iterator', '(Spec)', 'href="SPEC_Bfs+_Iterator.html" title="Breath-first search iterator for Class.Graph.">'],
['bgModelOrder (D2Star AFScore)', '(Memvar)', 'href="MEMVAR_D2_Star+_A_F_Score_23bg_Model_Order.html" title="Order of the background model">'],
['bgModelOrder (D2z AFScore)', '(Memvar)', 'href="MEMVAR_D2z+_A_F_Score_23bg_Model_Order.html" title="Order of the background model">'],
['bgModelOrder (N2 AFScore)', '(Memvar)', 'href="MEMVAR_N2+_A_F_Score_23bg_Model_Order.html" title="Order of the background model">'],
['BGZF Stream', '(Spec)', 'href="SPEC_B_G_Z_F+_Stream.html" title="Reading and writing of BGZF data.">'],
['BidirectionalIteratorConcept', '(Concept)', 'href="CONCEPT_Bidirectional_Iterator_Concept.html" title="Iterator that can be both incremented and decremented.">'],
['bin (BamAlignmentRecord)', '(Memvar)', 'href="MEMVAR_Bam_Alignment_Record_23bin.html" title="The bin of the alignment, automatically computed when writing BAM.">'],
['binomialCoefficient', '(Function)', 'href="FUNCTION.binomial_Coefficient.html" title="Calculates the binomial coefficient C(n,k).">'],
['Bit Packed Pair', '(Spec)', 'href="SPEC_Bit+_Packed+_Pair.html" title="Stores two arbitrary objects. Saves memory by packing bits with bit fields.">'],
['Bit Packed Tuple', '(Spec)', 'href="SPEC_Bit+_Packed+_Tuple.html" title="A plain fixed-length string. Saves memory by packing bits.">'],
['BitPacked', '(Tag)', 'href="TAG_Bit_Packed.html" title="Tag to mark a bit-packed specialization that avoids to waste bits.">'],
['BitsPerValue', '(Metafunction)', 'href="METAFUNCTION_Bits_Per_Value.html" title="Number of bits needed to store a value.">'],
['Block String', '(Spec)', 'href="SPEC_Block+_String.html" title="String optimized for push_back, top, and pop (Stack behaviour).">'],
['blockBegins (Bed12 BedRecord)', '(Memvar)', 'href="MEMVAR_Bed12+_Bed_Record_23block_Begins.html" title="The begin positions of the blocks (Spec.Alloc String of __int32).">'],
['blockCount (Bed12 BedRecord)', '(Memvar)', 'href="MEMVAR_Bed12+_Bed_Record_23block_Count.html" title="The number of blocks.">'],
['blockSizes (Bed12 BedRecord)', '(Memvar)', 'href="MEMVAR_Bed12+_Bed_Record_23block_Sizes.html" title="The sizes of the blocks (Spec.Alloc String of __int32).">'],
['Blosum30', '(Shortcut)', 'href="SHORTCUT_Blosum30.html" title="Blosum30 scoring matrix.">'],
['Blosum45', '(Shortcut)', 'href="SHORTCUT_Blosum45.html" title="Blosum45 scoring matrix.">'],
['Blosum62', '(Shortcut)', 'href="SHORTCUT_Blosum62.html" title="Blosum62 scoring matrix.">'],
['Blosum80', '(Shortcut)', 'href="SHORTCUT_Blosum80.html" title="Blosum80 scoring matrix.">'],
['blue (BedRgb)', '(Memvar)', 'href="MEMVAR_Bed_Rgb_23blue.html" title="Blue value of RGB color (default is 0).">'],
['BndmAlgo', '(Spec)', 'href="SPEC_Bndm_Algo.html" title=" Backward Nondeterministic Dawg Matching algorithm. Exact string matching using bit parallelism.">'],
['BottomUp', '(Tag)', 'href="TAG_Bottom_Up.html" title="Tag that specifies a Spec.VSTree Iterator to traverse the virtual string tree from the root towards the leafs.">'],
['BottomUp Iterator', '(Spec)', 'href="SPEC_Bottom_Up+_Iterator.html" title="Iterator for an efficient postorder depth-first search in a suffix tree.">'],
['Breadth-First Search', '(Demo)', 'href="DEMO_Breadth-_First+_Search.html" title="Breadth-first search through a graph.">'],
['breadthFirstSearch', '(Function)', 'href="FUNCTION.breadth_First_Search.html" title="Implements a breadth-first search on a graph.">'],
['BucketRefinement', '(Spec)', 'href="SPEC_Bucket_Refinement.html" title="An index based on a refined array of sorted q-grams.">'],
['build (FaiIndex)', '(Function)', 'href="FUNCTION_Fai_Index_23build.html" title="Create Class.FaiIndex from FASTA file.">'],
['build (MarkovModel)', '(Memfunc)', 'href="MEMFUNC_Markov_Model_23build.html" title="Given a training set, computes the transition matrix, the character stationary distributions and the auxiliary information that give raise to an instance of MarkovModel">'],
['buildAlignmentGraph', '(Function)', 'href="FUNCTION.build_Alignment_Graph.html" title="Builds an Spec.Alignment Graph from a set of input alignments.">'],
['buildIndex (BamTagsDict)', '(Function)', 'href="FUNCTION_Bam_Tags_Dict_23build_Index.html" title="Build index for a Class.BamTagsDict object.">'],
['Bundle2', '(Class)', 'href="CLASS_Bundle2.html" title="Stores references to two arbitrary objects.">'],
['bundle2', '(Function)', 'href="FUNCTION.bundle2.html" title="Returns a bundle of two objects.">'],
['Bundle3', '(Class)', 'href="CLASS_Bundle3.html" title="Stores references to three arbitrary objects.">'],
['bundle3', '(Function)', 'href="FUNCTION.bundle3.html" title="Returns a bundle of three objects.">'],
['Bundle5', '(Class)', 'href="CLASS_Bundle5.html" title="Stores references to five arbitrary objects.">'],
['bundle5', '(Function)', 'href="FUNCTION.bundle5.html" title="Returns a bundle of five objects.">'],
['bwtAt (IndexEsa)', '(Function)', 'href="FUNCTION_Index_Esa_23bwt_At.html" title="Shortcut for value(indexBwt(..), ..).">'],
['BytesPerValue', '(Metafunction)', 'href="METAFUNCTION_Bytes_Per_Value.html" title="Number of bytes needed to store a value.">'],
['BZ2 File Stream', '(Spec)', 'href="SPEC_B_Z2+_File+_Stream.html" title="Wrapper for BZFILE * streams from bzlib.">'],
['calculateCovariance', '(Function)', 'href="FUNCTION.calculate_Covariance.html" title="Calculates the covariance for the number of word occurrences for two words in a sequence of length n, given a background model.">'],
['calculateInsertSizes', '(Function)', 'href="FUNCTION.calculate_Insert_Sizes.html" title="Calculates a string with insert sizes for each pair match.">'],
['calculateMateIndices', '(Function)', 'href="FUNCTION.calculate_Mate_Indices.html" title="Calculates a string that maps the readId of a read to the readId of its mate.">'],
['calculateOverlapIndicator', '(Function)', 'href="FUNCTION.calculate_Overlap_Indicator.html" title="Calculate word overlaps: epsilon(word1,word2)= 1 where word2[j]=word1[j+p] for all j=1...(k-p)">'],
['calculatePeriodicity', '(Function)', 'href="FUNCTION.calculate_Periodicity.html" title="Calculate word periodicity (indicator for overlaps)">'],
['calculateProbability', '(Function)', 'href="FUNCTION.calculate_Probability.html" title="Calculates the probability of a sequence given a Bernoulli model (String of background frequencies)">'],
['calculateVariance', '(Function)', 'href="FUNCTION.calculate_Variance.html" title="Calculates the variance for the number of word occurrences of a word in a sequence of length n given a background model.">'],
['cancel', '(Function)', 'href="FUNCTION.cancel.html" title="Cancels an asynchronous request.">'],
['cancelFileSegment', '(Function)', 'href="FUNCTION.cancel_File_Segment.html" title="Cancel all outstanding transactions of a memory-mapped file segment.">'],
['canParseString', '(Function)', 'href="FUNCTION.can_Parse_String.html" title="Test whether an automaton can parse a string completely.">'],
['capacity', '(Function)', 'href="FUNCTION.capacity.html" title="The maximal length.">'],
['cargo (Map)', '(Function)', 'href="FUNCTION_Map_23cargo.html" title="Returns a cargo given a key.">'],
['cargo', '(Function)', 'href="FUNCTION.cargo.html" title="Access to the cargo.">'],
['cargo (IntervalAndCargo)', '(Memvar)', 'href="MEMVAR_Interval_And_Cargo_23cargo.html" title="The stored cargo of type TCargo.">'],
['cargo (PointAndCargo)', '(Memvar)', 'href="MEMVAR_Point_And_Cargo_23cargo.html" title="The stored cargo of type TCargo.">'],
['Cargo', '(Metafunction)', 'href="METAFUNCTION_Cargo.html" title="Type of additional data stored in an object.">'],
['Case', '(Tag)', 'href="TAG_Case.html" title="Metaprogramming case expression.">'],
['cast operator', '(Function)', 'href="FUNCTION.cast+operator.html" title="C++ built-in cast operator.">'],
['Caster', '(Spec)', 'href="SPEC_Caster.html" title="Casts the input type in a specific output type.">'],
['center (IntervalTreeNode)', '(Memvar)', 'href="MEMVAR_Interval_Tree_Node_23center.html" title="The center of the interval of type TValue.">'],
['Chained Seed', '(Spec)', 'href="SPEC_Chained+_Seed.html" title="Describes a seed with start and end position2 and diagonal upper and lower bounds.">'],
['chainSeedsGlobally', '(Function)', 'href="FUNCTION.chain_Seeds_Globally.html" title="Global chaining of seeds.">'],
['char array', '(Adaption)', 'href="ADAPTION.char+array.html" title="Zero terminated char[] or wchar_t[].">'],
['Char Array Stream', '(Spec)', 'href="SPEC_Char+_Array+_Stream.html" title="Thin wrapper around char * to the Concept.StreamConcept|Stream concept.">'],
['CharIterator', '(Shortcut)', 'href="SHORTCUT_Char_Iterator.html" title="Iterator for Shortcut.CharString.">'],
['CharString', '(Shortcut)', 'href="SHORTCUT_Char_String.html" title="A string of char.">'],
['checkEof', '(Function)', 'href="FUNCTION.check_Eof.html" title="Check that the EOF marker is present in a BGZF(/BAM) file.">'],
['childAt (IndexEsa)', '(Function)', 'href="FUNCTION_Index_Esa_23child_At.html" title="Shortcut for value(indexChildtab(..), ..).">'],
['childrenAreLeaves', '(Function)', 'href="FUNCTION.children_Are_Leaves.html" title="Test whether iterator points to a node with only leaf-children.">'],
['childVertex', '(Function)', 'href="FUNCTION.child_Vertex.html" title="Returns the child vertex of an edge.">'],
['Chunk Pool Allocator', '(Spec)', 'href="SPEC_Chunk+_Pool+_Allocator.html" title="Allocator that pools one or more consecutive memory blocks of a specific size.">'],
['cigar (BamAlignmentRecord)', '(Memvar)', 'href="MEMVAR_Bam_Alignment_Record_23cigar.html" title="The CIGAR string as string of Class.CigarElement objects (empty for \'*\').">'],
['CigarElement', '(Class)', 'href="CLASS_Cigar_Element.html" title="One entry of a CIGAR string.">'],
['CigarElement (CigarElement)', '(Memfunc)', 'href="MEMFUNC_Cigar_Element_23_Cigar_Element.html" title="Constructor">'],
['cigarStore (LocalMatchStore)', '(Memvar)', 'href="MEMVAR_Local_Match_Store_23cigar_Store.html" title="Class.String storing the CIGAR strings.">'],
['Classes', '', '<a target=_parent href="INDEXPAGE_Class.html">'],
['clear (Allocator)', '(Function)', 'href="FUNCTION_Allocator_23clear.html" title="Deallocates all memory blocks.">'],
['clear (BedRecord)', '(Function)', 'href="FUNCTION_Bed_Record_23clear.html" title="Reset BED record to state after default initialization.">'],
['clear (FaiIndex)', '(Function)', 'href="FUNCTION_Fai_Index_23clear.html" title="Reset a Class.FaiIndex object to the state after default construction.">'],
['clear (GenomicRegion)', '(Function)', 'href="FUNCTION_Genomic_Region_23clear.html" title="Reset a Class.GenomicRegion object to the same state after default construction.">'],
['clear (GffRecord)', '(Function)', 'href="FUNCTION_Gff_Record_23clear.html" title="Reset a Class.GffRecord object.">'],
['clear (LfTable)', '(Function)', 'href="FUNCTION_Lf_Table_23clear.html" title="Clears the LF table.">'],
['clear (PrefixSumTable)', '(Function)', 'href="FUNCTION_Prefix_Sum_Table_23clear.html" title="Clears the prefix sum table.">'],
['clear (RankDictionary)', '(Function)', 'href="FUNCTION_Rank_Dictionary_23clear.html" title="Clears the rank dictionary.">'],
['clear (SentinelRankDictionary)', '(Function)', 'href="FUNCTION_Sentinel_Rank_Dictionary_23clear.html" title="Clears the dictionary.">'],
['clear (VcfHeader)', '(Function)', 'href="FUNCTION_Vcf_Header_23clear.html" title="Clear a Class.VcfHeader.">'],
['clear (VcfHeaderRecord)', '(Function)', 'href="FUNCTION_Vcf_Header_Record_23clear.html" title="Clear a Class.VcfHeaderRecord.">'],
['clear (VcfRecord)', '(Function)', 'href="FUNCTION_Vcf_Record_23clear.html" title="Clear a Class.VcfRecord.">'],
['clear', '(Function)', 'href="FUNCTION.clear.html" title="Resets an object.">'],
['clearAllBits', '(Function)', 'href="FUNCTION.clear_All_Bits.html" title="Set all bits to 0.">'],
['clearBit', '(Function)', 'href="FUNCTION.clear_Bit.html" title="Set the bit with the given index to 0.">'],
['clearClipping (Gaps)', '(Function)', 'href="FUNCTION_Gaps_23clear_Clipping.html" title="Clear clipping from Class.Gaps object.">'],
['clearContigs', '(Function)', 'href="FUNCTION.clear_Contigs.html" title="Removes all contigs from a fragment store.">'],
['clearEdges', '(Function)', 'href="FUNCTION.clear_Edges.html" title="Removes all edges in a graph.">'],
['clearEntries (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23clear_Entries.html" title="Clear entries from Class.ToolDoc object.">'],
['clearGaps (Gaps)', '(Function)', 'href="FUNCTION_Gaps_23clear_Gaps.html" title="Clear gaps and clipping from Class.Gaps object.">'],
['clearHost', '(Function)', 'href="FUNCTION.clear_Host.html" title="Clear the host of the given object.">'],
['clearReads', '(Function)', 'href="FUNCTION.clear_Reads.html" title="Removes all reads from a fragment store.">'],
['clearValues', '(Function)', 'href="FUNCTION.clear_Values.html" title="Clear all key-value pairs of the current annotation.">'],
['clearVertices', '(Function)', 'href="FUNCTION.clear_Vertices.html" title="Removes all vertices in a graph.">'],
['clippedBeginPosition (Gaps)', '(Function)', 'href="FUNCTION_Gaps_23clipped_Begin_Position.html" title="Return the begin position of the clipping in the unclipped gapped sequence.">'],
['clippedEndPosition (Gaps)', '(Function)', 'href="FUNCTION_Gaps_23clipped_End_Position.html" title="Return the end position of the clipping in the unclipped gapped sequence.">'],
['close (BamStream)', '(Function)', 'href="FUNCTION_Bam_Stream_23close.html" title="Close BamStream object\'s underlying file.">'],
['close (BedStream)', '(Function)', 'href="FUNCTION_Bed_Stream_23close.html" title="Closes a Class.BedStream">'],
['close (FileMapping)', '(Function)', 'href="FUNCTION_File_Mapping_23close.html" title="Close a file and its memory mapping.">'],
['close (GffStream)', '(Function)', 'href="FUNCTION_Gff_Stream_23close.html" title="Closes a Class.GffStream">'],
['close (SequenceStream)', '(Function)', 'href="FUNCTION_Sequence_Stream_23close.html" title="Close the Class.SequenceStream.">'],
['close (VcfStream)', '(Function)', 'href="FUNCTION_Vcf_Stream_23close.html" title="Closes a Class.VcfStream">'],
['close', '(Function)', 'href="FUNCTION.close.html" title="Closes a file.">'],
['closeAndResize (FileMapping)', '(Function)', 'href="FUNCTION_File_Mapping_23close_And_Resize.html" title="Close a memory mapping and resize and close the underlying file.">'],
['CMode', '(Spec)', 'href="SPEC_C_Mode.html" title=" Represents the C (&quot;constant&quot;) computation scheme for handling &quot;zero&quot; probabilities.">'],
['col', '(Function)', 'href="FUNCTION.col.html" title="A column in an alignment.">'],
['Col', '(Metafunction)', 'href="METAFUNCTION_Col.html" title="Type of a column in an alignment.">'],
['collectLeaves', '(Function)', 'href="FUNCTION.collect_Leaves.html" title="Returns all leaves underneath a given vertex.">'],
['cols', '(Function)', 'href="FUNCTION.cols.html" title="The container of columns in an alignment.">'],
['Cols', '(Metafunction)', 'href="METAFUNCTION_Cols.html" title="Type of column container of an alignment.">'],
['compactAlignedReads', '(Function)', 'href="FUNCTION.compact_Aligned_Reads.html" title="Removes invalid aligned reads and rename alignId sequentially beginning with 0.">'],
['compactPairMatchIds', '(Function)', 'href="FUNCTION.compact_Pair_Match_Ids.html" title="Renames pairMatchId sequentially beginning with 0.">'],
['ComparableConcept', '(Concept)', 'href="CONCEPT_Comparable_Concept.html" title="A type that can be compared.">'],
['Comparator', '(Metafunction)', 'href="METAFUNCTION_Comparator.html" title="Type of comparator object">'],
['compare', '(Function)', 'href="FUNCTION.compare.html" title="Compares two objects.">'],
['CompareType', '(Metafunction)', 'href="METAFUNCTION_Compare_Type.html" title="Type to convert other types for comparisons.">'],
['CompareTypeImpl', '(Metafunction)', 'href="METAFUNCTION_Compare_Type_Impl.html" title="Implementation of Metafunction.CompareType.">'],
['complement', '(Function)', 'href="FUNCTION.complement.html" title="Complement a sequence or a Class.StringSet in-place.">'],
['completeProfile', '(Function)', 'href="FUNCTION.complete_Profile.html" title="Concatenates the background frequency with the profile for the motif component.">'],
['CompressedSA', '(Class)', 'href="CLASS_Compressed_S_A.html" title="A suffix array storing only a few suffix array entries and computing the remaining on demand.">'],
['CompressedSA Fibres', '(Tag)', 'href="TAG_Compressed_S_A+_Fibres.html" title="Tag to select a specific fibre of a Class.CompressedSA.">'],
['CompressText', '(Tag)', 'href="TAG_Compress_Text.html" title="Tag to select a FM index variant that can be used such that it is not necessary to store the text after index construction. This index is very space efficient.">'],
['computeGenerousCapacity', '(Function)', 'href="FUNCTION.compute_Generous_Capacity.html" title="Capacity for generous expansion.">'],
['computeSplitters', '(Function)', 'href="FUNCTION.compute_Splitters.html" title="Compute splitters for a sequence of objects.">'],
['concat', '(Function)', 'href="FUNCTION.concat.html" title="Returns the concatenation sequence of all sequences in a Class.StringSet.">'],
['concat (ConcatDirect)', '(Memvar)', 'href="MEMVAR_Concat_Direct_23concat.html" title="The concatenation string. Concatenates all sequences of the StringSet without gaps.">'],
['ConcatDirect', '(Spec)', 'href="SPEC_Concat_Direct.html" title="A string set storing the concatenation of all strings within one string.">'],
['Concatenator', '(Metafunction)', 'href="METAFUNCTION_Concatenator.html" title="Returns the type of the concatenation sequence of all sequences in a Class.StringSet.">'],
['ConcatenatorManyToOne', '(Class)', 'href="CLASS_Concatenator_Many_To_One.html" title="A sequence class that virtually concatenates all sequences in a Class.StringSet.">'],
['ConcatenatorManyToOne (ConcatenatorManyToOne)', '(Memfunc)', 'href="MEMFUNC_Concatenator_Many_To_One_23_Concatenator_Many_To_One.html" title="Constructor">'],
['ConcatVirtual Iterator', '(Spec)', 'href="SPEC_Concat_Virtual+_Iterator.html" title="Iterator that sequentially iterates through the elements of a Class.StringSet as if they were directly concatenated, cmp. Spec.ConcatDirect.">'],
['Concepts', '', '<a target=_parent href="INDEXPAGE_Concept.html">'],
['connectedComponents', '(Function)', 'href="FUNCTION.connected_Components.html" title="Decomposes an undirected graph into its connected components.">'],
['Consensus Calling', '(Tag)', 'href="TAG_Consensus+_Calling.html" title="A tag that specifies how to call the consensus.">'],
['consensusAligment', '(Function)', 'href="FUNCTION.consensus_Aligment.html" title="Compute consensus alignment.">'],
['ConsensusScoreSequenceEntry', '(Class)', 'href="CLASS_Consensus_Score_Sequence_Entry.html" title="Wrapper for a pointer to a sequence and a position in this sequence.">'],
['Constraint Iterator', '(Demo)', 'href="DEMO_Constraint+_Iterator.html" title="Example for using node predicates on a deferred suffix tree.">'],
['Container', '(Concept)', 'href="CONCEPT_Container.html" title="Object that contains other objects.">'],
['container', '(Function)', 'href="FUNCTION.container.html" title="Container of an iterator.">'],
['Container', '(Metafunction)', 'href="METAFUNCTION_Container.html" title="Type of the container given an iterator.">'],
['ContainerConcept', '(Concept)', 'href="CONCEPT_Container_Concept.html" title="Concept for mutable containers.">'],
['ContigFile', '(Class)', 'href="CLASS_Contig_File.html" title="Represents a file containing contigs.">'],
['contigFileStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23contig_File_Store.html" title="Class.String that maps from contigFileId to &lt;fileName, firstContigId>.">'],
['contigId (AlignedReadStoreElement)', '(Memvar)', 'href="MEMVAR_Aligned_Read_Store_Element_23contig_Id.html" title="Refers to the contig in the Memvar.FragmentStore#contigStore the read is aligned with.">'],
['contigId (AnnotationStoreElement)', '(Memvar)', 'href="MEMVAR_Annotation_Store_Element_23contig_Id.html" title="Refers to the contig in the Memvar.FragmentStore#contigStore the annotation is part of.">'],
['contigNameStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23contig_Name_Store.html" title="Class.StringSet that maps from contigId to contigName.">'],
['contigRows (AlignedReadLayout)', '(Memvar)', 'href="MEMVAR_Aligned_Read_Layout_23contig_Rows.html" title="2-D multi-read layout">'],
['contigStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23contig_Store.html" title="Class.String that maps from contigId to &lt;contigSeq, contigGaps, contigFileId>.">'],
['ContigStoreElement', '(Class)', 'href="CLASS_Contig_Store_Element.html" title="Represents a single contig.">'],
['ContigStoreElement (ContigStoreElement)', '(Memfunc)', 'href="MEMFUNC_Contig_Store_Element_23_Contig_Store_Element.html" title="Constructor">'],
['convert', '(Function)', 'href="FUNCTION.convert.html" title="Converts a value into another value.">'],
['Convert', '(Metafunction)', 'href="METAFUNCTION_Convert.html" title="Return type of a conversion.">'],
['convertAlignment', '(Function)', 'href="FUNCTION.convert_Alignment.html" title="Converts an alignment graph into an alignment matrix.">'],
['convertImpl', '(Function)', 'href="FUNCTION.convert_Impl.html" title="Implements Function.convert.">'],
['convertMatchesToGlobalAlignment', '(Function)', 'href="FUNCTION.convert_Matches_To_Global_Alignment.html" title="Converts all matches to a multiple global alignment in gap-space.">'],
['convertPairWiseToGlobalAlignment', '(Function)', 'href="FUNCTION.convert_Pair_Wise_To_Global_Alignment.html" title="Converts pair-wise alignments to a multiple global alignment.">'],
['convertPatternToProfile', '(Function)', 'href="FUNCTION.convert_Pattern_To_Profile.html" title="Converts a pattern into a profile which consists of a set of frequency distributions.">'],
['convertQuality', '(Function)', 'href="FUNCTION.convert_Quality.html" title="Convert an integer quality value into its ASCII representation for FASTQ (Phred scale).">'],
['convertResidueToFrequencyDist', '(Function)', 'href="FUNCTION.convert_Residue_To_Frequency_Dist.html" title="Coverts a residue to a frequency distribution (profile).">'],
['convertSetOfPatternsToProfile', '(Function)', 'href="FUNCTION.convert_Set_Of_Patterns_To_Profile.html" title="Converts a set of sequence patterns into a profile.">'],
['CopyConstructibleConcept', '(Concept)', 'href="CONCEPT_Copy_Constructible_Concept.html" title="A type with a copy-constructor.">'],
['count (Accumulator)', '(Function)', 'href="FUNCTION_Accumulator_23count.html" title="Return sum from an accumulator.">'],
['count (CigarElement)', '(Memvar)', 'href="MEMVAR_Cigar_Element_23count.html" title="The number of operations.">'],
['count[] (ProfileChar)', '(Memvar)', 'href="MEMVAR_Profile_Char_23count[].html" title="Array of Metafunction.ValueSize elements, giving counts in profile.">'],
['countChildren', '(Function)', 'href="FUNCTION.count_Children.html" title="Count the number of children of a tree node.">'],
['Counter', '(Spec)', 'href="SPEC_Counter.html" title="Extends the input stream by a second field which enumerates the elements.">'],
['countGaps (Gaps)', '(Function)', 'href="FUNCTION_Gaps_23count_Gaps.html" title="Reports number of continues gaps right of current iterator position.">'],
['Counting IdManager', '(Spec)', 'href="SPEC_Counting+_Id_Manager.html" title="Id Manager that just counts the number of ids in use.">'],
['countKmers', '(Function)', 'href="FUNCTION.count_Kmers.html" title="Counts kmers in a sequence. Optionally, a background model is returned.">'],
['countLine', '(Function)', 'href="FUNCTION.count_Line.html" title="count characters in a line not including \\r and \\n">'],
['countOccurrences (RankDictionary)', '(Function)', 'href="FUNCTION_Rank_Dictionary_23count_Occurrences.html" title="Returns the rank (number of occurrences) of a specified character up to a specified position.">'],
['countOccurrences (SentinelRankDictionary)', '(Function)', 'href="FUNCTION_Sentinel_Rank_Dictionary_23count_Occurrences.html" title="Returns the number of occurrences of a specified character from the start to a specified position.">'],
['countOccurrences', '(Function)', 'href="FUNCTION.count_Occurrences.html" title="Returns the number of occurrences of Function.representative substring or a q-gram in the index text.">'],
['countOccurrencesMultiple', '(Function)', 'href="FUNCTION.count_Occurrences_Multiple.html" title="Returns the number of occurrences of a q-gram for every sequence of a Class.StringSet .">'],
['countSequences', '(Function)', 'href="FUNCTION.count_Sequences.html" title="Return the number of sequences in an index\' underlying text.">'],
['cpuTime', '(Function)', 'href="FUNCTION.cpu_Time.html" title="Returns the cpu time in seconds.">'],
['create', '(Function)', 'href="FUNCTION.create.html" title="Makes an object to owner of its content.">'],
['createBWTable', '(Function)', 'href="FUNCTION.create_B_W_Table.html" title="Creates a Burrows-Wheeler table from a given text and suffix array.">'],
['createChildtab', '(Function)', 'href="FUNCTION.create_Childtab.html" title="Creates a child table from a given lcp table.">'],
['createCompressedSa', '(Function)', 'href="FUNCTION.create_Compressed_Sa.html" title="This functions creates a compressed suffix array with a specified compression factor.">'],
['createCountArray', '(Function)', 'href="FUNCTION.create_Count_Array.html" title="Builds an index on a StringSet storing how often a q-gram occurs in each sequence.">'],
['createGlobalReference', '(Function)', 'href="FUNCTION.create_Global_Reference.html" title="Creates the global reference of a Spec.Journaled Set.">'],
['createHost', '(Function)', 'href="FUNCTION.create_Host.html" title="Construct the host of the given object.">'],
['createIntervalTree', '(Function)', 'href="FUNCTION.create_Interval_Tree.html" title="Create an interval tree.">'],
['createLcpTable', '(Function)', 'href="FUNCTION.create_Lcp_Table.html" title="Creates a lcp table from a given text and suffix array.">'],
['createLeftChild', '(Function)', 'href="FUNCTION.create_Left_Child.html" title="Creates a new left-most child of the current node and returns an iterator to it.">'],
['createLfTable', '(Function)', 'href="FUNCTION.create_Lf_Table.html" title="Creates the LF table">'],
['createOracle', '(Function)', 'href="FUNCTION.create_Oracle.html" title="Creates a factor oracle.">'],
['createOracleOnReverse', '(Function)', 'href="FUNCTION.create_Oracle_On_Reverse.html" title="Creates a factor oracle for the reversed string.">'],
['createPrefixSumTable', '(Function)', 'href="FUNCTION.create_Prefix_Sum_Table.html" title="Creates the prefix sum table">'],
['createQGramIndex', '(Function)', 'href="FUNCTION.create_Q_Gram_Index.html" title="Builds a q-gram index on a sequence.">'],
['createQGramIndexDirOnly', '(Function)', 'href="FUNCTION.create_Q_Gram_Index_Dir_Only.html" title="Builds the directory of a q-gram index on a sequence.">'],
['createQGramIndexSAOnly', '(Function)', 'href="FUNCTION.create_Q_Gram_Index_S_A_Only.html" title="Builds the suffix array of a q-gram index on a sequence.">'],
['createRankDictionary', '(Function)', 'href="FUNCTION.create_Rank_Dictionary.html" title="This functions creates the dictionary.">'],
['createRightArrayBinaryTree', '(Function)', 'href="FUNCTION.create_Right_Array_Binary_Tree.html" title="Computes the wavelet tree structure of a text.">'],
['createRightChild', '(Function)', 'href="FUNCTION.create_Right_Child.html" title="Creates a new right-most child of the current node and returns an iterator to it.">'],
['createRoot', '(Function)', 'href="FUNCTION.create_Root.html" title="Creates the root in a tree or an automaton.">'],
['createSentinelRankDictionary (SentinelRankDictionary)', '(Function)', 'href="FUNCTION_Sentinel_Rank_Dictionary_23create_Sentinel_Rank_Dictionary.html" title="This functions creates the dictionary structure.">'],
['createSibling', '(Function)', 'href="FUNCTION.create_Sibling.html" title="Creates a new right sibling of the current node and returns an iterator to it.">'],
['createSuffixArray', '(Function)', 'href="FUNCTION.create_Suffix_Array.html" title="Creates a suffix array from a given text.">'],
['createSuffixTrie', '(Function)', 'href="FUNCTION.create_Suffix_Trie.html" title="Creates a trie of all suffixes of a text.">'],
['createTrie', '(Function)', 'href="FUNCTION.create_Trie.html" title="Creates a trie.">'],
['createTrieOnReverse', '(Function)', 'href="FUNCTION.create_Trie_On_Reverse.html" title="Creates a trie for all reversed keywords.">'],
['createWotdIndex', '(Function)', 'href="FUNCTION.create_Wotd_Index.html" title="Builds a q-gram index on a sequence.">'],
['CStyle String', '(Spec)', 'href="SPEC_C_Style+_String.html" title="Allows adaption of strings to C-style strings.">'],
['cutNs', '(Function)', 'href="FUNCTION.cut_Ns.html" title="Cut out all masked sequences from a Dna5String.">'],
['D2 AFScore', '(Spec)', 'href="SPEC_D2+_A_F_Score.html" title="D2 computes the inner product of the kmer count vectors">'],
['D2Star AFScore', '(Spec)', 'href="SPEC_D2_Star+_A_F_Score.html" title="D2Star computes the inner product of the standardised kmer count vectors">'],
['D2z AFScore', '(Spec)', 'href="SPEC_D2z+_A_F_Score.html" title="D2z computes a z-score of the inner product of kmer count vectors">'],
['dagShortestPath', '(Function)', 'href="FUNCTION.dag_Shortest_Path.html" title="Computes shortest paths from a single source in a directed acyclic graph (DAG).">'],
['data (BedRecord)', '(Memvar)', 'href="MEMVAR_Bed_Record_23data.html" title="Any data after the last position.">'],
['dddoc', '(Page)', 'href="PAGE.dddoc.html" title="The documentation system &quot;dot-dot-doc&quot;.">'],
['deallocate', '(Function)', 'href="FUNCTION.deallocate.html" title="Deallocates memory.">'],
['DeepestSpec', '(Metafunction)', 'href="METAFUNCTION_Deepest_Spec.html" title="The deepest spec of a class with nested template arguments.">'],
['Default', '(Tag)', 'href="TAG_Default.html" title="Tag that specifies default behavior.">'],
['DefaultConstructibleConcept', '(Concept)', 'href="CONCEPT_Default_Constructible_Concept.html" title="A type with a default constructor.">'],
['DefaultFindBeginPatternSpec', '(Metafunction)', 'href="METAFUNCTION_Default_Find_Begin_Pattern_Spec.html" title="Type of the default findBegin pattern specialization, given a score.">'],
['DefaultFinder', '(Metafunction)', 'href="METAFUNCTION_Default_Finder.html" title="Default Class.Finder specialization type.">'],
['DefaultGetIteratorSpec', '(Metafunction)', 'href="METAFUNCTION_Default_Get_Iterator_Spec.html" title="Specifies default kind of iterator returned by functions.">'],
['DefaultIndexCreator', '(Metafunction)', 'href="METAFUNCTION_Default_Index_Creator.html" title="Default algorithm to create a demanded and not yet existing Metafunction.Fibre.">'],
['DefaultIndexSpec', '(Metafunction)', 'href="METAFUNCTION_Default_Index_Spec.html" title="Default Class.Index specialization type.">'],
['DefaultIndexStringSpec', '(Metafunction)', 'href="METAFUNCTION_Default_Index_String_Spec.html" title="Default Class.String specialization type of the Metafunction.Fibre of an Class.Index.">'],
['DefaultIteratorSpec', '(Metafunction)', 'href="METAFUNCTION_Default_Iterator_Spec.html" title="Specifies default kind of iterator.">'],
['DefaultOverflowExplicit', '(Metafunction)', 'href="METAFUNCTION_Default_Overflow_Explicit.html" title="The default overflow strategy for explicit resize.">'],
['DefaultOverflowImplicit', '(Metafunction)', 'href="METAFUNCTION_Default_Overflow_Implicit.html" title="The default overflow strategy for implicit resize.">'],
['DefaultPattern', '(Metafunction)', 'href="METAFUNCTION_Default_Pattern.html" title="Default Class.Pattern specialization type.">'],
['DefaultPrefixOrder', '(Metafunction)', 'href="METAFUNCTION_Default_Prefix_Order.html" title="The default prefix order.">'],
['defaultRng', '(Function)', 'href="FUNCTION.default_Rng.html" title="Default default random number generator object of a given type.">'],
['degree', '(Function)', 'href="FUNCTION.degree.html" title="Number of incident edges for a given vertex.">'],
['dependent', '(Function)', 'href="FUNCTION.dependent.html" title="Test whether object depends on other objects.">'],
['Dependent', '(Spec)', 'href="SPEC_Dependent.html" title="A string set storing references of the strings.">'],
['dependentHost', '(Function)', 'href="FUNCTION.dependent_Host.html" title="Query dependent state of a hosted object.">'],
['Depth-First Search', '(Demo)', 'href="DEMO_Depth-_First+_Search.html" title=" Depth-first search through a graph.">'],
['depthFirstSearch', '(Function)', 'href="FUNCTION.depth_First_Search.html" title="Implements a depth-first search on a graph.">'],
['Dequeue', '(Class)', 'href="CLASS_Dequeue.html" title="A double-ended queue implementation on top of a Class.String.">'],
['DestructibleConcept', '(Concept)', 'href="CONCEPT_Destructible_Concept.html" title="A type with a destructor.">'],
['detach', '(Function)', 'href="FUNCTION.detach.html" title="Makes an object independent from other objects.">'],
['determineConsensusSeq', '(Function)', 'href="FUNCTION.determine_Consensus_Seq.html" title="Determines the consensus pattern of a given profile.">'],
['DFS Order', '(Tag)', 'href="TAG_D_F_S+_Order.html" title="Pre/postorder selection for depth-first search.">'],
['Dfs Preorder Iterator', '(Spec)', 'href="SPEC_Dfs+_Preorder+_Iterator.html" title="Depth-first search iterator for Class.Graph.">'],
['Diagonal (Seed)', '(Metafunction)', 'href="METAFUNCTION_Seed_23_Diagonal.html" title="Returns type of the value for the diagonal of a seed.">'],
['difference', '(Function)', 'href="FUNCTION.difference.html" title="The difference between two iterators.">'],
['Difference', '(Metafunction)', 'href="METAFUNCTION_Difference.html" title="Type of an object that stores the difference between two iterators.">'],
['dijkstra', '(Function)', 'href="FUNCTION.dijkstra.html" title="Computes shortest paths from a single source in a graph.">'],
['Dijkstras Algorithm', '(Demo)', 'href="DEMO_Dijkstras+_Algorithm.html" title="Computing single source shortest paths using Dijkstra algorithm.">'],
['dirAt', '(Function)', 'href="FUNCTION.dir_At.html" title="Shortcut for value(indexDir(..), ..).">'],
['Directed Graph', '(Spec)', 'href="SPEC_Directed+_Graph.html" title="A directed graph that stores the edges in an adjacency list.">'],
['display', '(Function)', 'href="FUNCTION.display.html" title="Displays a given set of strings.">'],
['displayResult', '(Function)', 'href="FUNCTION.display_Result.html" title="Displays all found motif candidates. In the case of the Projection Motif Finder           the function displays the consensus pattern of the found motif candidate.">'],
['Distance Calculation', '(Tag)', 'href="TAG_Distance+_Calculation.html" title="A tag to specify how to calculate distance matrices.">'],
['Dna', '(Spec)', 'href="SPEC_Dna.html" title="Alphabet for DNA.">'],
['Dna5', '(Spec)', 'href="SPEC_Dna5.html" title="Alphabet for DNA including \'N\' character.">'],
['Dna5Iterator', '(Shortcut)', 'href="SHORTCUT_Dna5_Iterator.html" title="Iterator for Shortcut.Dna5String.">'],
['Dna5Q', '(Spec)', 'href="SPEC_Dna5_Q.html" title="Alphabet for DNA plus PHRED quality including \'N\' character.">'],
['Dna5String', '(Shortcut)', 'href="SHORTCUT_Dna5_String.html" title="A string of Spec.Dna5.">'],
['Dna5StringComplement', '(Shortcut)', 'href="SHORTCUT_Dna5_String_Complement.html" title="Modifier for the complement of a Shortcut.Dna5String.">'],
['Dna5StringReverse', '(Shortcut)', 'href="SHORTCUT_Dna5_String_Reverse.html" title="Modifier for the reverse of a Shortcut.Dna5String.">'],
['Dna5StringReverseComplement', '(Shortcut)', 'href="SHORTCUT_Dna5_String_Reverse_Complement.html" title="Modifier for the reverse complement of a Shortcut.Dna5String.">'],
['DnaIterator', '(Shortcut)', 'href="SHORTCUT_Dna_Iterator.html" title="Iterator for Shortcut.DnaString.">'],
['DnaQ', '(Spec)', 'href="SPEC_Dna_Q.html" title="Alphabet for DNA plus PHRED quality.">'],
['DnaString', '(Shortcut)', 'href="SHORTCUT_Dna_String.html" title="A string of Spec.Dna.">'],
['DnaStringComplement', '(Shortcut)', 'href="SHORTCUT_Dna_String_Complement.html" title="Modifier for the complement of a Shortcut.DnaString.">'],
['DnaStringReverse', '(Shortcut)', 'href="SHORTCUT_Dna_String_Reverse.html" title="Modifier for the reverse of a Shortcut.DnaString.">'],
['DnaStringReverseComplement', '(Shortcut)', 'href="SHORTCUT_Dna_String_Reverse_Complement.html" title="Modifier for the reverse complement of a Shortcut.DnaString.">'],
['DotDrawing', '(Tag)', 'href="TAG_Dot_Drawing.html" title="Switch to trigger drawing in dot format.">'],
['Double-Pass RecordReader', '(Spec)', 'href="SPEC_Double-_Pass+_Record_Reader.html" title="Record reader specialization for double-pass reading.">'],
['Double-Pass String RecordReader', '(Spec)', 'href="SPEC_Double-_Pass+_String+_Record_Reader.html" title="Record reader specialization for double-pass reading">'],
['DPSearch', '(Spec)', 'href="SPEC_D_P_Search.html" title="A dynamic programming algorithm for approximate string-matching with a user-definable scoring function.">'],
['Echoer', '(Spec)', 'href="SPEC_Echoer.html" title="Outputs tuples of the echoRepeats last elements of the input stream.">'],
['Edge Iterator', '(Spec)', 'href="SPEC_Edge+_Iterator.html" title="Edge iterator for Class.Graph.">'],
['EdgeDescriptor', '(Metafunction)', 'href="METAFUNCTION_Edge_Descriptor.html" title="Type of an object that represents an edge descriptor.">'],
['EdgeIdHandler', '(Metafunction)', 'href="METAFUNCTION_Edge_Id_Handler.html" title="Type of an object that represents an Id Manager.">'],
['EdgeStump', '(Class)', 'href="CLASS_Edge_Stump.html" title="The EdgeStump class encapsulates a single edge. It represents either a list node in the adjacency list of a graph or an array field if edges are stored in an array.">'],
['EdgeType', '(Metafunction)', 'href="METAFUNCTION_Edge_Type.html" title="Edge type of a graph object.">'],
['EditDistance', '(Spec)', 'href="SPEC_Edit_Distance.html" title="Edit distance scoring scheme.">'],
['EditDistanceScore', '(Shortcut)', 'href="SHORTCUT_Edit_Distance_Score.html" title="Edit distance scoring scheme.">'],
['EditEnvironment', '(Spec)', 'href="SPEC_Edit_Environment.html" title="Outputs tuples of the tupleLen consecutive elements of the input stream.">'],
['em', '(Function)', 'href="FUNCTION.em.html" title="Represents the EM algorithm as used by MEME.">'],
['emissionProbability', '(Function)', 'href="FUNCTION.emission_Probability.html" title="Returns a reference to the emission probability.">'],
['emittedProbability (MarkovModel)', '(Memfunc)', 'href="MEMFUNC_Markov_Model_23emitted_Probability.html" title="Computes the probability that a string (or a set of strings) is emitted by the MarkovModel.">'],
['empty (LfTable)', '(Function)', 'href="FUNCTION_Lf_Table_23empty.html" title="Clears the LF table.">'],
['empty (RankDictionary)', '(Function)', 'href="FUNCTION_Rank_Dictionary_23empty.html" title="Returns whether or not the rank dictionary is empty.">'],
['empty (SentinelRankDictionary)', '(Function)', 'href="FUNCTION_Sentinel_Rank_Dictionary_23empty.html" title="Returns whether or not the dictionary is empty.">'],
['empty', '(Function)', 'href="FUNCTION.empty.html" title="Test a container for being empty.">'],
['emptyHost', '(Function)', 'href="FUNCTION.empty_Host.html" title="Query emptiness state of a hosted object.">'],
['emptyParentEdge', '(Function)', 'href="FUNCTION.empty_Parent_Edge.html" title="Returns true iff the edge label from the iterator node to its parent is empty.">'],
['end (Chained Seed)', '(Function)', 'href="FUNCTION_Chained+_Seed_23end.html" title="Returns an iterator to the end of the seed diagonals.">'],
['end', '(Function)', 'href="FUNCTION.end.html" title="The end of a container.">'],
['endDiagonal (Seed)', '(Function)', 'href="FUNCTION_Seed_23end_Diagonal.html" title="Returns the diagonal of the end point.">'],
['endPos (AlignedReadStoreElement)', '(Memvar)', 'href="MEMVAR_Aligned_Read_Store_Element_23end_Pos.html" title="End position of the alignment in gap-space. If Memvar.AlignedReadStoreElement#endPos &lt; Memvar.AlignedReadStoreElement#beginPos, the read is aligned to the reverse strand, where Memvar.AlignedReadStoreElement#beginPos and Memvar.AlignedReadStoreElement#endPos are the corresponding positions on the forward strand.">'],
['endPos (AnnotationStoreElement)', '(Memvar)', 'href="MEMVAR_Annotation_Store_Element_23end_Pos.html" title="End position of the annotation in gap-space. If Memvar.AnnotationStoreElement#endPos &lt; Memvar.AnnotationStoreElement#beginPos, the annotated feature is located on the reverse strand, where Memvar.AnnotationStoreElement#beginPos and Memvar.AnnotationStoreElement#endPos are the corresponding positions on the forward strand.">'],
['endPos (GenomicRegion)', '(Memvar)', 'href="MEMVAR_Genomic_Region_23end_Pos.html" title="End position of the range on the chromosome. Default is -1.">'],
['endPos (GffRecord)', '(Memvar)', 'href="MEMVAR_Gff_Record_23end_Pos.html" title="The end position of the record.">'],
['endPosition (Gaps)', '(Function)', 'href="FUNCTION_Gaps_23end_Position.html" title="Return the clipping end position as a source position.">'],
['endPosition', '(Function)', 'href="FUNCTION.end_Position.html" title="End position of object in host.">'],
['endPosition (BedRecord)', '(Memvar)', 'href="MEMVAR_Bed_Record_23end_Position.html" title="End position on the reference.">'],
['endPosition (Repeat)', '(Memvar)', 'href="MEMVAR_Repeat_23end_Position.html" title="The end position of the repeat of type TPos.">'],
['endPositionH (Seed)', '(Function)', 'href="FUNCTION_Seed_23end_Position_H.html" title=" Returns the end position of the seed in the database.">'],
['endPositionV (Seed)', '(Function)', 'href="FUNCTION_Seed_23end_Position_V.html" title=" Returns the end position of the seed in the query.">'],
['endRead', '(Function)', 'href="FUNCTION.end_Read.html" title="Terminates a read process.">'],
['endState', '(Function)', 'href="FUNCTION.end_State.html" title="Returns a reference to the end state.">'],
['endsWith', '(Function)', 'href="FUNCTION.ends_With.html" title="Check whether a sequence ends with a given suffix.">'],
['endWrite', '(Function)', 'href="FUNCTION.end_Write.html" title="Terminates a write process.">'],
['Enums', '', '<a target=_parent href="INDEXPAGE_Enum.html">'],
['EPatternBranching', '(Spec)', 'href="SPEC_E_Pattern_Branching.html" title=" Represents the ePatternBranching algorithm of Davila and Rajasekaran.">'],
['EqualityComparableConcept', '(Concept)', 'href="CONCEPT_Equality_Comparable_Concept.html" title="A type that can be equality compared.">'],
['Equidistant Splitter', '(Spec)', 'href="SPEC_Equidistant+_Splitter.html" title="Splits an interval into equal-sized subintervals.">'],
['erase (Map)', '(Function)', 'href="FUNCTION_Map_23erase.html" title="Removes a value from a map.">'],
['erase', '(Function)', 'href="FUNCTION.erase.html" title="Erases a part of a container">'],
['eraseAll (Map)', '(Function)', 'href="FUNCTION_Map_23erase_All.html" title="Removes a value from a map.">'],
['eraseBack', '(Function)', 'href="FUNCTION.erase_Back.html" title="Deletes the last item of a container and reduces its size by 1.  The container must have a size greater than or equal to 1.">'],
['eraseTag (BamTagsDict)', '(Function)', 'href="FUNCTION_Bam_Tags_Dict_23erase_Tag.html" title="Erase tag from Class.BamTagsDict.">'],
['errors (AlignQualityStoreElement)', '(Memvar)', 'href="MEMVAR_Align_Quality_Store_Element_23errors.html" title="Absolute number of errors in the alignment.">'],
['ESA Index Fibres', '(Tag)', 'href="TAG_E_S_A+_Index+_Fibres.html" title="Tag to select a specific fibre (e.g. table, object, ...) of an Spec.IndexEsa.ESA index.">'],
['Eval', '(Metafunction)', 'href="METAFUNCTION_Eval.html" title="Convert from bool values to types (True and False).">'],
['Exact Searching', '(Demo)', 'href="DEMO_Exact+_Searching.html" title="Exact string matching.">'],
['ExactFragment', '(Spec)', 'href="SPEC_Exact_Fragment.html" title="A type for ungapped, pairwise segment matches.">'],
['ExactReversableFragment', '(Spec)', 'href="SPEC_Exact_Reversable_Fragment.html" title="A type for ungapped, pairwise segment matches that may be in reverse orientation.">'],
['Examples', '', '<a target=_parent href="INDEXPAGE_Demo.html">'],
['expectation', '(Function)', 'href="FUNCTION.expectation.html" title="Computes the expectation for a set of patterns w.r.t. a set of text strings and a MarkovModel">'],
['extendSeed', '(Function)', 'href="FUNCTION.extend_Seed.html" title="Extends a seed.">'],
['Extension Direction', '(Enum)', 'href="ENUM_Extension+_Direction.html" title="The direction in which a seed should be extended.">'],
['External Property Map', '(Class)', 'href="CLASS_External+_Property+_Map.html" title="An external property map.">'],
['External String', '(Spec)', 'href="SPEC_External+_String.html" title="String that is stored in external memory.">'],
['ExternalConfig', '(Tag)', 'href="TAG_External_Config.html" title="Standard configuration for the Spec.External String.">'],
['ExternalConfigLarge', '(Tag)', 'href="TAG_External_Config_Large.html" title="Large size type configuration for the Spec.External String.">'],
['ExternalConfigSize', '(Tag)', 'href="TAG_External_Config_Size.html" title="Arbitrary size type configuration for the Spec.External String.">'],
['extractTagValue (BamTagsDict)', '(Function)', 'href="FUNCTION_Bam_Tags_Dict_23extract_Tag_Value.html" title="Extract and cast &quot;atomic&quot; value from tags string with index idx.">'],
['factorial', '(Function)', 'href="FUNCTION.factorial.html" title="Calculates the factorial value of any integer number.">'],
['FaiIndex', '(Class)', 'href="CLASS_Fai_Index.html" title="Data type for storing FAI indices.">'],
['FaiIndex (FaiIndex)', '(Memvar)', 'href="MEMVAR_Fai_Index_23_Fai_Index.html" title="The Class.FaiIndex class only provides the default constructor.">'],
['Fibre', '(Metafunction)', 'href="METAFUNCTION_Fibre.html" title="Type of a specific container member (fibre).">'],
['File', '(Class)', 'href="CLASS_File.html" title="Represents a file.">'],
['FILE *', '(Adaption)', 'href="ADAPTION_F_I_L_E+_2a.html" title="Adaption from FILE * of &lt;cstdio> to streams.">'],
['File Format', '(Tag)', 'href="TAG_File+_Format.html" title="A file format.">'],
['File Format I/O', '(Demo)', 'href="DEMO_File+_Format+_I_2f_O.html" title="Accessing sequence data in files.">'],
['File Reader String', '(Spec)', 'href="SPEC_File+_Reader+_String.html" title="Read sequence data from file.">'],
['File stream', '(Adaption)', 'href="ADAPTION_File+stream.html" title="Adaption from fstream, ifstream and ofstream to the Concept.StreamConcept concept.">'],
['fileBeginPos (ContigStoreElement)', '(Memvar)', 'href="MEMVAR_Contig_Store_Element_23file_Begin_Pos.html" title="Begin position of the contig sequence fragment in the file.">'],
['fileEndPos (ContigStoreElement)', '(Memvar)', 'href="MEMVAR_Contig_Store_Element_23file_End_Pos.html" title="End position of the contig sequence fragment in the file.">'],
['FileFormat', '(Class)', 'href="CLASS_File_Format.html" title="Object that stores a file format.">'],
['fileFormat (GffStream)', '(Memvar)', 'href="MEMVAR_Gff_Stream_23file_Format.html" title="File format to use for writing.">'],
['fileId (ContigStoreElement)', '(Memvar)', 'href="MEMVAR_Contig_Store_Element_23file_Id.html" title="Refers to a file in the Memvar.FragmentStore#contigFileStore or is INVALID_ID if the contig has no file association.">'],
['FileMapping', '(Class)', 'href="CLASS_File_Mapping.html" title="A structure to memory-map a file.">'],
['FileMappingAdvise', '(Enum)', 'href="ENUM_File_Mapping_Advise.html" title="Enum with mmap advise values.">'],
['FileMappingMode', '(Enum)', 'href="ENUM_File_Mapping_Mode.html" title="Flags to define the mapping mode of Function.mapFileSegment.">'],
['fileName (ContigFile)', '(Memvar)', 'href="MEMVAR_Contig_File_23file_Name.html" title="Contig file name.">'],
['FileOpenMode', '(Enum)', 'href="ENUM_File_Open_Mode.html" title="Flags to select the open mode of a Class.File or external string.">'],
['filter (VcfRecord)', '(Memvar)', 'href="MEMVAR_Vcf_Record_23filter.html" title="Value of FILTER field, empty if &quot;.&quot; in VCF file (Shortcut.CharString).">'],
['Filter', '(Spec)', 'href="SPEC_Filter.html" title="Applies a specific function to the input stream.">'],
['find (Map)', '(Function)', 'href="FUNCTION_Map_23find.html" title="Find a value in a map.">'],
['find', '(Function)', 'href="FUNCTION.find.html" title="Search for a Class.Pattern in a Class.Finder object.">'],
['Find', '(Metafunction)', 'href="METAFUNCTION_Find.html" title="A metafunction to retrieve the index of a tag in the Tag.TagList.">'],
['findBegin', '(Function)', 'href="FUNCTION.find_Begin.html" title="Search the begin of an approximate match.">'],
['findEdge', '(Function)', 'href="FUNCTION.find_Edge.html" title="Finds an edge.">'],
['Finder', '(Class)', 'href="CLASS_Finder.html" title="Holds the haystack and a current search context.">'],
['Finder', '(Concept)', 'href="CONCEPT_Finder.html" title="Object that stores information about the glos:haystack of a search and the current search position.">'],
['Finder (Finder)', '(Memfunc)', 'href="MEMFUNC_Finder_23_Finder.html" title="Constructor">'],
['FindInfix', '(Tag)', 'href="TAG_Find_Infix.html" title="Find needle as a substring of haystack (infix search).">'],
['findIntervals', '(Function)', 'href="FUNCTION.find_Intervals.html" title="Find all intervals that contain the query point or overlap with the query interval.">'],
['findIntervalsExcludeTouching', '(Function)', 'href="FUNCTION.find_Intervals_Exclude_Touching.html" title="Find all intervals that contain the query point, exclude intervals that touch the query, i.e. where the query point equals the start or end point.">'],
['findMotif', '(Function)', 'href="FUNCTION.find_Motif.html" title="Represents the main function which is used to start the search for noticeable motif patterns.">'],
['FindPrefix', '(Tag)', 'href="TAG_Find_Prefix.html" title="Find needle as a prefix of the haystack (prefix serach)">'],
['findRepeats', '(Function)', 'href="FUNCTION.find_Repeats.html" title="Search for repeats in a text.">'],
['findSet', '(Function)', 'href="FUNCTION.find_Set.html" title="Return set identifier, given an element identifier.">'],
['findTagKey (BamHeaderRecord)', '(Function)', 'href="FUNCTION_Bam_Header_Record_23find_Tag_Key.html" title="Find a tag\'s key of a Class.BamHeaderRecord.">'],
['findTagKey (BamTagsDict)', '(Function)', 'href="FUNCTION_Bam_Tags_Dict_23find_Tag_Key.html" title="Find a tag by its key for a Class.BamTagsDict object.">'],
['findVertex', '(Function)', 'href="FUNCTION.find_Vertex.html" title="Finds a vertex given a sequence id and a position.">'],
['Finite', '(Spec)', 'href="SPEC_Finite.html" title="A finite alphabet of a fixed size.">'],
['FiniteOrderedAlphabetConcept', '(Concept)', 'href="CONCEPT_Finite_Ordered_Alphabet_Concept.html" title="An type that is of finite domain and totally ordered and thus has a minimum and maximum value.">'],
['firstContigId (ContigFile)', '(Memvar)', 'href="MEMVAR_Contig_File_23first_Contig_Id.html" title="The contigId of the first sequence in the file. Subsequent contig sequences have an increasing contigId.">'],
['flag (BamAlignmentRecord)', '(Memvar)', 'href="MEMVAR_Bam_Alignment_Record_23flag.html" title="The flag of this mapping, see Enum.BamFlags for flag constants and the hasFlag* functions.">'],
['flatten', '(Function)', 'href="FUNCTION.flatten.html" title="Apply the journal to the underlying string, destructively on the underlying string.">'],
['Floyd-Warshall Algorithm', '(Demo)', 'href="DEMO_Floyd-_Warshall+_Algorithm.html" title="Computing all-pairs shortest paths using Floyd-Warshall algorithm.">'],
['floydWarshallAlgorithm', '(Function)', 'href="FUNCTION.floyd_Warshall_Algorithm.html" title="Finds shortest paths between all pairs of vertices in a graph.">'],
['flush (BamStream)', '(Function)', 'href="FUNCTION_Bam_Stream_23flush.html" title="Flush output when writing.">'],
['flush (BedStream)', '(Function)', 'href="FUNCTION_Bed_Stream_23flush.html" title="Flush to a Class.BedStream">'],
['flush (GffStream)', '(Function)', 'href="FUNCTION_Gff_Stream_23flush.html" title="Flush to a Class.GffStream">'],
['flush (SequenceStream)', '(Function)', 'href="FUNCTION_Sequence_Stream_23flush.html" title="Write all data from SequenceStream to disk.">'],
['flush (VcfStream)', '(Function)', 'href="FUNCTION_Vcf_Stream_23flush.html" title="Flush to a Class.VcfStream">'],
['flush', '(Function)', 'href="FUNCTION.flush.html" title="Waits for all open requests to complete.">'],
['flushFileSegment', '(Function)', 'href="FUNCTION.flush_File_Segment.html" title="Wait for all outstanding transactions of a memory-mapped file segment.">'],
['FM Index Fibres', '(Tag)', 'href="TAG_F_M+_Index+_Fibres.html" title="Tag to select a specific fibre of a Spec.FMIndex.">'],
['FMIndex', '(Spec)', 'href="SPEC_F_M_Index.html" title="An index based on the Burrows-Wheeler transform.">'],
['fordFulkersonAlgorithm', '(Function)', 'href="FUNCTION.ford_Fulkerson_Algorithm.html" title="Computes a maximum flow in a directed graph.">'],
['format (ContigFile)', '(Memvar)', 'href="MEMVAR_Contig_File_23format.html" title="Stores the contig file format, auto-detected in Function.loadContigs.">'],
['format (VcfRecord)', '(Memvar)', 'href="MEMVAR_Vcf_Record_23format.html" title="Value of the VCF FORMAT field, empty if &quot;.&quot; in VCF file (Shortcut.CharString).">'],
['forwardAlgorithm', '(Function)', 'href="FUNCTION.forward_Algorithm.html" title="Implements the forward algorithm.">'],
['ForwardIteratorConcept', '(Concept)', 'href="CONCEPT_Forward_Iterator_Concept.html" title="Iterator that allows passing over a linear sequence multiple times.">'],
['Fragment', '(Class)', 'href="CLASS_Fragment.html" title="A type for ungapped, pairwise segment matches.">'],
['Fragment (ExactFragment)', '(Memfunc)', 'href="MEMFUNC_Exact_Fragment_23_Fragment.html" title="Constructor.">'],
['Fragment (ExactReversableFragment)', '(Memfunc)', 'href="MEMFUNC_Exact_Reversable_Fragment_23_Fragment.html" title="Constructor.">'],
['fragmentBegin', '(Function)', 'href="FUNCTION.fragment_Begin.html" title="Gets the begin position for this fragment or this vertex descriptor in the sequence.">'],
['fragmentLength', '(Function)', 'href="FUNCTION.fragment_Length.html" title="Gets the length of the label of a given vertex descriptor in the sequence.">'],
['FragmentStore', '(Class)', 'href="CLASS_Fragment_Store.html" title="Multi container to store contigs, reads, multiple read alignments and genome annotations.">'],
['FrequencyDistribution', '(Class)', 'href="CLASS_Frequency_Distribution.html" title="Holds a collection of objects of a specific type, where each object represents           the frequency (absolute or relative probability) of a particular residue which is a member     of a fixed sequence alphabet.">'],
['front (Chained Seed)', '(Function)', 'href="FUNCTION_Chained+_Seed_23front.html" title="Returns a reference to the first seed diagonal.">'],
['front (Pipe)', '(Function)', 'href="FUNCTION_Pipe_23front.html" title="Gets the first element of the remaining stream.">'],
['front', '(Function)', 'href="FUNCTION.front.html" title="The first item in container.">'],
['Functions', '', '<a target=_parent href="INDEXPAGE_Function.html">'],
['FunctorComplement', '(Class)', 'href="CLASS_Functor_Complement.html" title="Functor that returns the complement nucleotide to a given nucleotide.">'],
['FunctorConvert', '(Class)', 'href="CLASS_Functor_Convert.html" title="Functor that converts a TInValue type to a TOutValue type character.">'],
['FunctorLowcase', '(Class)', 'href="CLASS_Functor_Lowcase.html" title="Functor that returns the lower case character to a given character.">'],
['FunctorUpcase', '(Class)', 'href="CLASS_Functor_Upcase.html" title="Functor that returns the upper case character to a given character.">'],
['GapAnchor', '(Class)', 'href="CLASS_Gap_Anchor.html" title="Stores the position of an alignment character in sequence-space and in gap-space.">'],
['GapAnchor (GapAnchor)', '(Memfunc)', 'href="MEMFUNC_Gap_Anchor_23_Gap_Anchor.html" title="Constructor">'],
['GappedShape', '(Spec)', 'href="SPEC_Gapped_Shape.html" title="A fixed gapped shape.">'],
['GappedValueType', '(Metafunction)', 'href="METAFUNCTION_Gapped_Value_Type.html" title="Returns a value type that contains a blank value \'-\'.">'],
['gapPos (GapAnchor)', '(Memvar)', 'href="MEMVAR_Gap_Anchor_23gap_Pos.html" title="Sequence character position in the gapped sequence.">'],
['Gaps', '(Class)', 'href="CLASS_Gaps.html" title="Efficient storage of gaps for a sequence.">'],
['Gaps (Gaps)', '(Memfunc)', 'href="MEMFUNC_Gaps_23_Gaps.html" title="Constructor">'],
['gaps (AlignedReadStoreElement)', '(Memvar)', 'href="MEMVAR_Aligned_Read_Store_Element_23gaps.html" title="String of read gap anchors. Can be used to create a Spec.AnchorGaps alignment row.">'],
['gaps (ContigStoreElement)', '(Memvar)', 'href="MEMVAR_Contig_Store_Element_23gaps.html" title="String of contig gap anchors. Can be used to create a Spec.AnchorGaps alignment row.">'],
['gapValue', '(Function)', 'href="FUNCTION.gap_Value.html" title="Return the &quot;gap&quot; value from an alphabet.">'],
['gapValueImpl', '(Function)', 'href="FUNCTION.gap_Value_Impl.html" title="Implements Function.gapValue.">'],
['generateSequence', '(Function)', 'href="FUNCTION.generate_Sequence.html" title="Generates random state and alphabet sequences of a given HMM.">'],
['GenericShape', '(Spec)', 'href="SPEC_Generic_Shape.html" title="A variable gapped shape.">'],
['GenomicRegion', '(Class)', 'href="CLASS_Genomic_Region.html" title="Store information about a genomic region.">'],
['GenomicRegion (GenomicRegion)', '(Memfunc)', 'href="MEMFUNC_Genomic_Region_23_Genomic_Region.html" title="Constructor.">'],
['genotypeInfos (VcfRecord)', '(Memvar)', 'href="MEMVAR_Vcf_Record_23genotype_Infos.html" title="Genotype information, as in VCF file (Class.StringSet&lt;Shortcut.CharString>).">'],
['Geometric Pdf', '(Spec)', 'href="SPEC_Geometric+_Pdf.html" title="Geometric probability density function with p=0.5.   This can be implemented efficiently not using any floating point arithmetics. Just bit operations are needed.">'],
['getAdjacencyMatrix', '(Function)', 'href="FUNCTION.get_Adjacency_Matrix.html" title="Returns an adjacency matrix representation of the graph.">'],
['getAlignmentLengthInRef', '(Function)', 'href="FUNCTION.get_Alignment_Length_In_Ref.html" title="Returns length of Class.BamAlignmentRecord\'s projection in reference.">'],
['getAlphabetSize (PrefixSumTable)', '(Function)', 'href="FUNCTION_Prefix_Sum_Table_23get_Alphabet_Size.html" title="Returns the number of different characters in the prefix sum table.">'],
['getAnnotation', '(Function)', 'href="FUNCTION.get_Annotation.html" title="Returns the current annotation.">'],
['getAppName (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23get_App_Name.html" title="Get tool name of Class.ArgumentParser object.">'],
['getArgument (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23get_Argument.html" title="Returns a reference to the specified argument.">'],
['getArgumentLabel', '(Function)', 'href="FUNCTION.get_Argument_Label.html" title="Returns the label for the given Class.ArgParseArgument. Either the user defined label is returned or a default label (based on the ArgumentType is used).">'],
['getArgumentValue (ArgParseArgument)', '(Function)', 'href="FUNCTION_Arg_Parse_Argument_23get_Argument_Value.html" title="Returns the value of the Class.ArgParseArgument object. If the Class.ArgParseArgument is a list or can hold multiple values (Memfunc.ArgParseArgument#ArgParseArgument.param.numberOfArguments) you can specify which value you want to get. If not set the first value will be returned.">'],
['getArgumentValue (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23get_Argument_Value.html" title="Retrieves the value of an argument given by its position.">'],
['getArgumentValueCount (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23get_Argument_Value_Count.html" title="Returns the number of values stored in the specified option.">'],
['getArgumentValues (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23get_Argument_Values.html" title="Returns all values of an option given on the command line.">'],
['getArgumentValues', '(Function)', 'href="FUNCTION.get_Argument_Values.html" title="Returns all values of the Class.ArgParseArgument object as const std::vector.">'],
['getAutoSeqStreamFormatName', '(Function)', 'href="FUNCTION.get_Auto_Seq_Stream_Format_Name.html" title="Returns">'],
['getBamTypeChar', '(Function)', 'href="FUNCTION.get_Bam_Type_Char.html" title="Return char identifying the type of the atomic argument.">'],
['getBamTypeSize', '(Function)', 'href="FUNCTION.get_Bam_Type_Size.html" title="Return size of the type identified by c.">'],
['getBeginScore', '(Function)', 'href="FUNCTION.get_Begin_Score.html" title="Score of the last match found by Function.findBegin during approximate searching.">'],
['getBeginState', '(Function)', 'href="FUNCTION.get_Begin_State.html" title="Returns the begin state.">'],
['getCargo', '(Function)', 'href="FUNCTION.get_Cargo.html" title="Get method for the edge cargo.">'],
['getCategory (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23get_Category.html" title="Get tool category of Class.ArgumentParser object.">'],
['getCategory (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23get_Category.html" title="Get tool category of Class.ToolDoc object.">'],
['getCharacter (PrefixSumTable)', '(Function)', 'href="FUNCTION_Prefix_Sum_Table_23get_Character.html" title="Returns the character of a given position within the prefix sum table.">'],
['getCharacter', '(Function)', 'href="FUNCTION.get_Character.html" title="This function returns the pivot character of the node the iterator currently points to.">'],
['getCharacterPosition (PrefixSumTable)', '(Function)', 'href="FUNCTION_Prefix_Sum_Table_23get_Character_Position.html" title="Returns the position of a given character within the prefix sum table.">'],
['getClrRange', '(Function)', 'href="FUNCTION.get_Clr_Range.html" title="Get the &quot;clear&quot; range of a read alignment.">'],
['getDate (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23get_Date.html" title="Get date string from Class.ToolDoc object.">'],
['GetDefaultRng', '(Metafunction)', 'href="METAFUNCTION_Get_Default_Rng.html" title="Return the default Class.Rng|Random Number Generator to use in a given class, spezialiation or algorithm.">'],
['getDistanceMatrix', '(Function)', 'href="FUNCTION.get_Distance_Matrix.html" title="Computes a pairwise distance matrix from an alignment graph.">'],
['getEmissionProbability', '(Function)', 'href="FUNCTION.get_Emission_Probability.html" title="Returns the emission probability.">'],
['getEndState', '(Function)', 'href="FUNCTION.get_End_State.html" title="Returns the end state.">'],
['getFibre (CompressedSA)', '(Function)', 'href="FUNCTION_Compressed_S_A_23get_Fibre.html" title="Returns a specific fibre of a container.">'],
['getFibre (FMIndex)', '(Function)', 'href="FUNCTION_F_M_Index_23get_Fibre.html" title="Returns a specific fibre of a fm index.">'],
['getFibre (LfTable)', '(Function)', 'href="FUNCTION_Lf_Table_23get_Fibre.html" title="Returns a specific fibre of a container.">'],
['getFibre (PrefixSumTable)', '(Function)', 'href="FUNCTION_Prefix_Sum_Table_23get_Fibre.html" title="Returns a specific fibre of a prefix-sum table.">'],
['getFibre (RankDictionary)', '(Function)', 'href="FUNCTION_Rank_Dictionary_23get_Fibre.html" title="Returns a specific fibre of a dictionary.">'],
['getFibre (RankSupportBitString)', '(Function)', 'href="FUNCTION_Rank_Support_Bit_String_23get_Fibre.html" title="Returns a specific fibre of a container.">'],
['getFibre (RightArrayBinaryTree)', '(Function)', 'href="FUNCTION_Right_Array_Binary_Tree_23get_Fibre.html" title="Returns a specific fibre of a container.">'],
['getFibre (SentinelRankDictionary)', '(Function)', 'href="FUNCTION_Sentinel_Rank_Dictionary_23get_Fibre.html" title="Returns a specific fibre of a dictionary.">'],
['getFibre (SparseString)', '(Function)', 'href="FUNCTION_Sparse_String_23get_Fibre.html" title="Returns a specific fibre of a container.">'],
['getFibre', '(Function)', 'href="FUNCTION.get_Fibre.html" title="Returns a specific fibre of a container.">'],
['getFileFormatExtensions (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23get_File_Format_Extensions.html" title="Returns file format extensions given a format tag.">'],
['getFirstCoveredPosition', '(Function)', 'href="FUNCTION.get_First_Covered_Position.html" title="Finds the first position in a sequence that is not assigned to a nil vertex.">'],
['getFrequency', '(Function)', 'href="FUNCTION.get_Frequency.html" title="Returns the number of sequences, which contain the Function.representative as a substring.">'],
['getIdByName (FaiIndex)', '(Function)', 'href="FUNCTION_Fai_Index_23get_Id_By_Name.html" title="Return id (numeric index in the file) of a sequence in a FAI file.">'],
['getIdByName', '(Function)', 'href="FUNCTION.get_Id_By_Name.html" title="Get the id/index of a string in a name store with a cache.">'],
['getIdLowerBound', '(Function)', 'href="FUNCTION.get_Id_Lower_Bound.html" title="Returns the smallest distributed id. That is, the return value is guaranteed to be the smallest id obtained so far.">'],
['getIdUpperBound', '(Function)', 'href="FUNCTION.get_Id_Upper_Bound.html" title="Returns the largest distributed id plus 1. That is, the return value is guaranteed to be an upper bound on all distributed ids.">'],
['getKmerSimilarityMatrix', '(Function)', 'href="FUNCTION.get_Kmer_Similarity_Matrix.html" title="Creates a matrix storing the number of common q-grams between all pairs of sequences.">'],
['getLastCoveredPosition', '(Function)', 'href="FUNCTION.get_Last_Covered_Position.html" title="Finds the last position in a sequence that is not assigned to a nil vertex.">'],
['getLeftBoundary', '(Function)', 'href="FUNCTION.get_Left_Boundary.html" title="Get method for the left boundary.">'],
['getLeftChildPos', '(Function)', 'href="FUNCTION.get_Left_Child_Pos.html" title="Returns the position in Class.RightArrayBinaryTree of the left child vertex.">'],
['getManTitle (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23get_Man_Title.html" title="Get man title from Class.ToolDoc object.">'],
['getMateNo', '(Function)', 'href="FUNCTION.get_Mate_No.html" title="Returns the mate number of read for a given readId.">'],
['getMaxDeviationOfOrder', '(Function)', 'href="FUNCTION.get_Max_Deviation_Of_Order.html" title="Returns the maximal out-of-order distance of adjacent hits.">'],
['getMotif', '(Function)', 'href="FUNCTION.get_Motif.html" title="Gets the motif out of a Class.MotifFinder.  If pos is given, the pos-th motif is returned, otherwise the first motif is returned.">'],
['getName (AnnotationTree Iterator)', '(Function)', 'href="FUNCTION_Annotation_Tree+_Iterator_23get_Name.html" title="Returns the identifier of the current annotation.">'],
['getName (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23get_Name.html" title="Get tool name of Class.ToolDoc object.">'],
['getNextS', '(Function)', 'href="FUNCTION.get_Next_S.html" title="Get method for the next source pointer.">'],
['getNextT', '(Function)', 'href="FUNCTION.get_Next_T.html" title="Get method for the next target pointer.">'],
['getNil', '(Function)', 'href="FUNCTION.get_Nil.html" title="Utility function returning a value that represents nil. Useful for various graph algorithms, e.g., missing predecessors, vertices that have not been visited, etc.">'],
['getObjectId', '(Function)', 'href="FUNCTION.get_Object_Id.html" title="A value that identifies the underlying sequence.">'],
['getOccurrence', '(Function)', 'href="FUNCTION.get_Occurrence.html" title="Returns an occurrence of the Function.representative substring or a q-gram in the index text.">'],
['getOccurrences', '(Function)', 'href="FUNCTION.get_Occurrences.html" title="Returns all occurrences of the Function.representative substring or a q-gram in the index text.">'],
['getOccurrencesBwt', '(Function)', 'href="FUNCTION.get_Occurrences_Bwt.html" title="Returns the characters left beside all occurrence of the Function.representative substring in the index text.">'],
['getOption (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23get_Option.html" title="Returns a reference to the specified option.">'],
['getOptionValue (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23get_Option_Value.html" title="Retrieves the value of an option given either the short or long name.">'],
['getOptionValueCount (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23get_Option_Value_Count.html" title="Returns the number of values stored in the specified option.">'],
['getOptionValues (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23get_Option_Values.html" title="Returns all values of an option given on the command line.">'],
['getParentName', '(Function)', 'href="FUNCTION.get_Parent_Name.html" title="Returns the identifier of the parent node in the annotation tree of the current annotation.">'],
['getPosition (RightArrayBinaryTree Iterator)', '(Function)', 'href="FUNCTION_Right_Array_Binary_Tree+_Iterator_23get_Position.html" title="Returns the position of the iterator in the host.">'],
['getProjectedPosition', '(Function)', 'href="FUNCTION.get_Projected_Position.html" title="Projects a position of one sequence taking part in a pairwise match onto the other sequence.">'],
['getProperty', '(Function)', 'href="FUNCTION.get_Property.html" title="Get method for an item\'s property.">'],
['getQualityValue', '(Function)', 'href="FUNCTION.get_Quality_Value.html" title="Returns the quality of a character from an alphabet with integrated quality, e.g. the quality associated with a specified element from a sequence.">'],
['getRank', '(Function)', 'href="FUNCTION.get_Rank.html" title="Returns the rank (the number of bits set from the start of the bit string) of a specified position.">'],
['getRead', '(Function)', 'href="FUNCTION.get_Read.html" title="Returns the read with the given readId.">'],
['getRightBoundary', '(Function)', 'href="FUNCTION.get_Right_Boundary.html" title="Get method for the right boundary.">'],
['getRightChildPos', '(Function)', 'href="FUNCTION.get_Right_Child_Pos.html" title="Returns the position in Class.RightArrayBinaryTree of the right child vertex.">'],
['getRoot', '(Function)', 'href="FUNCTION.get_Root.html" title="Get method for the root of a tree or an automaton.">'],
['getScore (LocalAlignmentEnumerator)', '(Function)', 'href="FUNCTION_Local_Alignment_Enumerator_23get_Score.html" title="Compute next suboptimal local alignment.">'],
['getScore', '(Function)', 'href="FUNCTION.get_Score.html" title="Score of the last found match in approximate searching.">'],
['getSentinelSubstitute (SentinelRankDictionary)', '(Function)', 'href="FUNCTION_Sentinel_Rank_Dictionary_23get_Sentinel_Substitute.html" title="Returns the character used to substitute the sentinel sign.">'],
['getSeqNo', '(Function)', 'href="FUNCTION.get_Seq_No.html" title="Returns the sequence number of a position.">'],
['getSeqOffset', '(Function)', 'href="FUNCTION.get_Seq_Offset.html" title="Returns the local sequence offset of a position.">'],
['getShortDescription (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23get_Short_Description.html" title="Gets short description of Class.ArgumentParser.">'],
['getShortDescription (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23get_Short_Description.html" title="Get short description of Class.ToolDoc object.">'],
['getSource', '(Function)', 'href="FUNCTION.get_Source.html" title="Get method for the source.">'],
['getStepSize', '(Function)', 'href="FUNCTION.get_Step_Size.html" title="Return the q-gram step size used for index creation.">'],
['getStringSet', '(Function)', 'href="FUNCTION.get_String_Set.html" title="Gets the string set of an alignment graph.">'],
['getSubTreeSize', '(Function)', 'href="FUNCTION.get_Sub_Tree_Size.html" title="Returns the number of vertices in the subtree starting at the position an iterator points to.">'],
['getSuccessor', '(Function)', 'href="FUNCTION.get_Successor.html" title="Gets the successor for a given vertex and an edge label. For an automaton a single character is required whereas for a word graph getSuccessor takes a string.">'],
['getTagKey (BamTagsDict)', '(Function)', 'href="FUNCTION_Bam_Tags_Dict_23get_Tag_Key.html" title="Return key of a tag by index.">'],
['getTagType (BamTagsDict)', '(Function)', 'href="FUNCTION_Bam_Tags_Dict_23get_Tag_Type.html" title="Get key of a tag by index.">'],
['getTagValue (BamHeaderRecord)', '(Function)', 'href="FUNCTION_Bam_Header_Record_23get_Tag_Value.html" title="Return tag value from a Class.BamHeaderRecord or Class.BamTagsDict.">'],
['getTagValue (BamTagsDict)', '(Function)', 'href="FUNCTION_Bam_Tags_Dict_23get_Tag_Value.html" title="Return the value of a tag by its index in the Class.BamTagsDict.">'],
['getTarget', '(Function)', 'href="FUNCTION.get_Target.html" title="Get method for the target.">'],
['getTerminalSize', '(Function)', 'href="FUNCTION.get_Terminal_Size.html" title="Retrieve size of terminal.">'],
['getTransitionProbability', '(Function)', 'href="FUNCTION.get_Transition_Probability.html" title="Returns the transition probability.">'],
['getType', '(Function)', 'href="FUNCTION.get_Type.html" title="Returns the type name of the current annotation.">'],
['getUnalignedCount (BamIndex)', '(Function)', 'href="FUNCTION_Bam_Index_23get_Unaligned_Count.html" title="Query index for number of unaligned reads.">'],
['getUniqueName', '(Function)', 'href="FUNCTION.get_Unique_Name.html" title="Returns a unique name of the current annotation.">'],
['getValue (PrefixSumTable)', '(Function)', 'href="FUNCTION_Prefix_Sum_Table_23get_Value.html" title="Returns the prefix sum of a given position.">'],
['getValue (RankDictionary)', '(Function)', 'href="FUNCTION_Rank_Dictionary_23get_Value.html" title="Returns the character of a specified position.">'],
['getValue (SentinelRankDictionary)', '(Function)', 'href="FUNCTION_Sentinel_Rank_Dictionary_23get_Value.html" title="Returns the character of a specified position.">'],
['getValue', '(Function)', 'href="FUNCTION.get_Value.html" title="Access to the value.">'],
['GetValue', '(Metafunction)', 'href="METAFUNCTION_Get_Value.html" title="Type for reading values.">'],
['getValueById', '(Function)', 'href="FUNCTION.get_Value_By_Id.html" title="Retrieves a string from the StringSet given an id.">'],
['getValueByKey', '(Function)', 'href="FUNCTION.get_Value_By_Key.html" title="Given a key, retrieve its value of the current annotation.">'],
['getVersion (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23get_Version.html" title="Get version string from Class.ArgumentParser object.">'],
['getVersion (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23get_Version.html" title="Get version string from Class.ToolDoc object.">'],
['GetVSTreeIteratorTraits', '(Metafunction)', 'href="METAFUNCTION_Get_V_S_Tree_Iterator_Traits.html" title="Default behaviour of Function.goNext when no second parameter is given.">'],
['getWindowFindHits', '(Function)', 'href="FUNCTION.get_Window_Find_Hits.html" title="Returns the string of hits from the finder.">'],
['GffIOContext', '(Class)', 'href="CLASS_Gff_I_O_Context.html" title="The I/O context to use for GFF I/O.">'],
['GffIOContext (GffIOContext)', '(Memfunc)', 'href="MEMFUNC_Gff_I_O_Context_23_Gff_I_O_Context.html" title="Constructor.">'],
['GffRecord', '(Class)', 'href="CLASS_Gff_Record.html" title="Represent a record from a Gff file.">'],
['GffStream', '(Class)', 'href="CLASS_Gff_Stream.html" title="High-level GFF/GTF I/O class.">'],
['GffStream (GffStream)', '(Memfunc)', 'href="MEMFUNC_Gff_Stream_23_Gff_Stream.html" title="Constructor.">'],
['GffStream::FileFormat', '(Enum)', 'href="ENUM_Gff_Stream_5ccolon_5ccolon_File_Format.html" title="File format for writing in the Class.GffStream class.">'],
['GffStream::Mode', '(Enum)', 'href="ENUM_Gff_Stream_5ccolon_5ccolon_Mode.html" title="Open mode for the Class.GffStream class.">'],
['Global Alignments', '(Demo)', 'href="DEMO_Global+_Alignments.html" title="Computing an optimal global alignment between two sequences.">'],
['Global Chaining', '(Tag)', 'href="TAG_Global+_Chaining.html" title="Tags for selecting the global chaining algorithm.">'],
['GlobalAlign', '(Spec)', 'href="SPEC_Global_Align.html" title="Selects a global alignment method to join a Spec.Journaled String to a global reference sequence.">'],
['globalAlignment', '(Function)', 'href="FUNCTION.global_Alignment.html" title="Computes the best global pairwise alignment.">'],
['globalAlignmentScore', '(Function)', 'href="FUNCTION.global_Alignment_Score.html" title="Computes the best global pairwise alignment score.">'],
['GlobalChain', '(Spec)', 'href="SPEC_Global_Chain.html" title="Selects an anchor based method to join a Spec.Journaled String to a global reference sequence.">'],
['globalMsaAlignment', '(Function)', 'href="FUNCTION.global_Msa_Alignment.html" title="Computes a global multiple alignment.">'],
['globalReference', '(Function)', 'href="FUNCTION.global_Reference.html" title="Returns the global reference sequence of a Spec.Journaled Set.">'],
['Glossary', '(Page)', 'href="PAGE_Glossary.html" title="List of terms used in SeqAn">'],
['goBegin', '(Function)', 'href="FUNCTION.go_Begin.html" title="Iterates to the first position of a container.">'],
['goDown (AnnotationTree Iterator)', '(Function)', 'href="FUNCTION_Annotation_Tree+_Iterator_23go_Down.html" title="Move the iterator down to the left-most child in the annotation tree.">'],
['goDown', '(Function)', 'href="FUNCTION.go_Down.html" title="Iterates down one edge or a path in a tree.">'],
['goEnd', '(Function)', 'href="FUNCTION.go_End.html" title="Iterates to the last position of a container.">'],
['goFurther', '(Function)', 'href="FUNCTION.go_Further.html" title="Iterates some steps further.">'],
['goLeftChild', '(Function)', 'href="FUNCTION.go_Left_Child.html" title="Sets the iterator to the left child of the current node if it exists and returns true, otherwise the iterator does not change position and the function returns false.">'],
['goNext (RecordReader)', '(Function)', 'href="FUNCTION_Record_Reader_23go_Next.html" title="Advance record reader to next position.">'],
['goNext', '(Function)', 'href="FUNCTION.go_Next.html" title="Iterates to next position.">'],
['goNextRight (AnnotationTree Iterator)', '(Function)', 'href="FUNCTION_Annotation_Tree+_Iterator_23go_Next_Right.html" title="Go to the next node in preorder DFS skipping the current node\'s subtree.">'],
['goNextUp (AnnotationTree Iterator)', '(Function)', 'href="FUNCTION_Annotation_Tree+_Iterator_23go_Next_Up.html" title="Go to the next node in preorder DFS skipping the subtrees of the current node and of all its siblings.">'],
['goNil', '(Function)', 'href="FUNCTION.go_Nil.html" title="Moves iterator to nil position.">'],
['goPrevious', '(Function)', 'href="FUNCTION.go_Previous.html" title="Iterates to pevious position.">'],
['goRight (AnnotationTree Iterator)', '(Function)', 'href="FUNCTION_Annotation_Tree+_Iterator_23go_Right.html" title="Move the iterator right to the next sibling in the annotation tree.">'],
['goRight (RightArrayBinaryTree Iterator)', '(Function)', 'href="FUNCTION_Right_Array_Binary_Tree+_Iterator_23go_Right.html" title="Iterates to the next sibling in a tree.">'],
['goRight', '(Function)', 'href="FUNCTION.go_Right.html" title="Iterates to the next sibling in a tree.">'],
['goRightChild', '(Function)', 'href="FUNCTION.go_Right_Child.html" title="Sets the iterator to the right child of the current node if it exists and returns true, otherwise the iterator does not change position and the function returns false.">'],
['goRoot (AnnotationTree Iterator)', '(Function)', 'href="FUNCTION_Annotation_Tree+_Iterator_23go_Root.html" title="Go to the root node in the annotation tree.">'],
['goRoot', '(Function)', 'href="FUNCTION.go_Root.html" title="Move iterator to the root node.">'],
['goTo', '(Function)', 'href="FUNCTION.go_To.html" title="Moves the iterator to an arbitrary node given its annotationId.">'],
['goUp (AnnotationTree Iterator)', '(Function)', 'href="FUNCTION_Annotation_Tree+_Iterator_23go_Up.html" title="Move the iterator up in the annotation tree.">'],
['goUp', '(Function)', 'href="FUNCTION.go_Up.html" title="Iterates up one edge to the parent in a tree.">'],
['Graph', '(Class)', 'href="CLASS_Graph.html" title="Generic graph.">'],
['Graph Iterator', '(Tag)', 'href="TAG_Graph+_Iterator.html" title="A specification of the iterator to traverse a graph.">'],
['green (BedRgb)', '(Memvar)', 'href="MEMVAR_Bed_Rgb_23green.html" title="Green value of RGB color (default is 0).">'],
['guessFileFormat', '(Function)', 'href="FUNCTION.guess_File_Format.html" title="Tries to determine the format of a file.">'],
['guessFormat', '(Function)', 'href="FUNCTION.guess_Format.html" title="Guesses a file format from the contents of a sequence file.">'],
['guessFormatFromFilename', '(Function)', 'href="FUNCTION.guess_Format_From_Filename.html" title="Guesses a file format from a sequence file name.">'],
['guessStreamFormat', '(Function)', 'href="FUNCTION.guess_Stream_Format.html" title="check whether the data provided by reader is (one of) the specified format(s).">'],
['GZ File Stream', '(Spec)', 'href="SPEC_G_Z+_File+_Stream.html" title="Adaption from gzFile of &lt;zlib.h> to streams.">'],
['Hamming StringEnumerator', '(Spec)', 'href="SPEC_Hamming+_String_Enumerator.html" title="Enumerate all strings within a given edit distance of a &quot;center string&quot;.">'],
['hammingDistance', '(Function)', 'href="FUNCTION.hamming_Distance.html" title="Determines the Hamming distance between two sequences.">'],
['HammingDistance', '(Tag)', 'href="TAG_Hamming_Distance.html" title="Switch to trigger Hamming distance, which is a measure of character substitutions.">'],
['HammingSimpleFinder', '(Spec)', 'href="SPEC_Hamming_Simple_Finder.html" title="A brute force online searching algorithm for approximate string matching with hamming distance.">'],
['HardwiredShape', '(Class)', 'href="CLASS_Hardwired_Shape.html" title="A structure to define a fixed gapped shape.">'],
['hasDefault (ArgParseArgument)', '(Function)', 'href="FUNCTION_Arg_Parse_Argument_23has_Default.html" title="Returns true if a default value was given for that argument.">'],
['hasDefault (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23has_Default.html" title="Returns whether an option has a default value or not.">'],
['hasFlagAllProper', '(Function)', 'href="FUNCTION.has_Flag_All_Proper.html" title="Return true if a Class.BamAlignmentRecord has the &quot;all properly aligned&quot; flag set.">'],
['hasFlagDuplicate', '(Function)', 'href="FUNCTION.has_Flag_Duplicate.html" title="Return true if a Class.BamAlignmentRecord has the &quot;PCR or optical duplicate&quot; flag set.">'],
['hasFlagFirst', '(Function)', 'href="FUNCTION.has_Flag_First.html" title="Return true if a Class.BamAlignmentRecord has the &quot;first fragment of template&quot; flag set.">'],
['hasFlagLast', '(Function)', 'href="FUNCTION.has_Flag_Last.html" title="Return true if a Class.BamAlignmentRecord has the &quot;last fragment of template&quot; flag set.">'],
['hasFlagMultiple', '(Function)', 'href="FUNCTION.has_Flag_Multiple.html" title="Return true if a Class.BamAlignmentRecord has the &quot;multiple&quot; flag set.">'],
['hasFlagNextRC', '(Function)', 'href="FUNCTION.has_Flag_Next_R_C.html" title="Return true if a Class.BamAlignmentRecord has the &quot;next fragment reverse-complemented&quot; flag set.">'],
['hasFlagNextUnmapped', '(Function)', 'href="FUNCTION.has_Flag_Next_Unmapped.html" title="Return true if a Class.BamAlignmentRecord has the &quot;next fragment unmapped&quot; flag set.">'],
['hasFlagQCNoPass', '(Function)', 'href="FUNCTION.has_Flag_Q_C_No_Pass.html" title="Return true if a Class.BamAlignmentRecord has the &quot;does not pass quality controls&quot; flag set.">'],
['hasFlagRC', '(Function)', 'href="FUNCTION.has_Flag_R_C.html" title="Return true if a Class.BamAlignmentRecord has the &quot;reverse-complemented&quot; flag set.">'],
['hasFlagSecondary', '(Function)', 'href="FUNCTION.has_Flag_Secondary.html" title="Return true if a Class.BamAlignmentRecord has the &quot;secondary alignment&quot; flag set.">'],
['hasFlagUnmapped', '(Function)', 'href="FUNCTION.has_Flag_Unmapped.html" title="Return true if a Class.BamAlignmentRecord has the &quot;fragment unmapped&quot; flag set.">'],
['hash', '(Function)', 'href="FUNCTION.hash.html" title="Computes a (lower) hash value for a shape applied to a sequence.">'],
['hash2', '(Function)', 'href="FUNCTION.hash2.html" title="Computes an unique hash value of a shape applied to a sequence, even if the sequence is shorter than the shape span">'],
['hash2Next', '(Function)', 'href="FUNCTION.hash2_Next.html" title="Computes a unique hash value for the adjacent shape, even if it is shorter than q.">'],
['hash2Upper', '(Function)', 'href="FUNCTION.hash2_Upper.html" title="Computes an upper unique hash value of a shape applied to a sequence, even if the sequence is shorter than the shape span.">'],
['hashInit', '(Function)', 'href="FUNCTION.hash_Init.html" title="Preprocessing step of a pure Function.hashNext loop.">'],
['hashNext', '(Function)', 'href="FUNCTION.hash_Next.html" title="Computes the hash value for the adjacent shape.">'],
['hashUpper', '(Function)', 'href="FUNCTION.hash_Upper.html" title="Computes an upper hash value for a shape applied to a sequence.">'],
['hasIndex (BamTagsDict)', '(Function)', 'href="FUNCTION_Bam_Tags_Dict_23has_Index.html" title="Return true if Class.BamTagsDict has an index.">'],
['hasKey (Map)', '(Function)', 'href="FUNCTION_Map_23has_Key.html" title="Determines whether a map contains a value given key.">'],
['HasMoveConstructor', '(Metafunction)', 'href="METAFUNCTION_Has_Move_Constructor.html" title="Query whether a class has a move constructor.">'],
['hasOption (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23has_Option.html" title="Returns whether a certain option is registered in the parser.">'],
['hasPrefix', '(Function)', 'href="FUNCTION.has_Prefix.html" title="Test whether a sequence is prefix of another sequence.">'],
['HasQualities', '(Metafunction)', 'href="METAFUNCTION_Has_Qualities.html" title="Return whether the given type stores qualities besides the alphabet.">'],
['HasStreamFeature', '(Metafunction)', 'href="METAFUNCTION_Has_Stream_Feature.html" title="Query features of a stream type.">'],
['hasValue (ArgParseArgument)', '(Function)', 'href="FUNCTION_Arg_Parse_Argument_23has_Value.html" title="Returns true if a value for the given position is available.">'],
['haystack', '(Function)', 'href="FUNCTION.haystack.html" title="Returns the haystack of a Class.Finder object.">'],
['Haystack', '(Metafunction)', 'href="METAFUNCTION_Haystack.html" title="Returns the haystack type of a Class.Finder type.">'],
['header (BamStream)', '(Memvar)', 'href="MEMVAR_Bam_Stream_23header.html" title="The Class.BamHeader of the Class.BamStream object.">'],
['headerRecords (VcfHeader)', '(Memvar)', 'href="MEMVAR_Vcf_Header_23header_Records.html" title="The meta information records (Class.String of Class.VcfHeaderRecord).">'],
['Heaviest Increasing Subsequence', '(Demo)', 'href="DEMO_Heaviest+_Increasing+_Subsequence.html" title="Heaviest increasing subsequence code example">'],
['heaviestCommonSubsequence', '(Function)', 'href="FUNCTION.heaviest_Common_Subsequence.html" title="Computes the heaviest common subsequence between two strings using the match information given in an alignment graph.">'],
['heaviestIncreasingSubsequence', '(Function)', 'href="FUNCTION.heaviest_Increasing_Subsequence.html" title="Computes the heaviest increasing subsequence.">'],
['hideOption (ArgParseOption)', '(Function)', 'href="FUNCTION_Arg_Parse_Option_23hide_Option.html" title="Hides the ArgParseOption from the help screen.">'],
['hideOption (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23hide_Option.html" title="Hides the ArgParseOption defined by the parameter name (which can be  either the short or the long name) from the help screen.">'],
['Hierarchical', '(Spec)', 'href="SPEC_Hierarchical.html" title=" By using this Specialization the hierarchical verification is enabled.">'],
['HMM', '(Demo)', 'href="DEMO_H_M_M.html" title="Hidden Markov Model code example">'],
['Hmm', '(Spec)', 'href="SPEC_Hmm.html" title="An Hmm is a directed graph with edges labeled with transition probabilities and emission profiles for each vertex. Vertices correspond to states in an HMM.">'],
['HMM Silent States', '(Demo)', 'href="DEMO_H_M_M+_Silent+_States.html" title="Hidden Markov Model with silent states code example">'],
['Holder', '(Class)', 'href="CLASS_Holder.html" title="Manages relationship to another object.">'],
['Holder', '(Memfunc)', 'href="MEMFUNC_Holder.html" title="Constructor">'],
['Horspool', '(Spec)', 'href="SPEC_Horspool.html" title=" Exact string matching using Horspool\'s algorithm (1980).">'],
['host (ConsensusScoreSequenceEntry)', '(Function)', 'href="FUNCTION_Consensus_Score_Sequence_Entry_23host.html" title="Returns reference to sequence from entry.">'],
['host', '(Function)', 'href="FUNCTION.host.html" title="The object a given object depends on.">'],
['Host', '(Metafunction)', 'href="METAFUNCTION_Host.html" title="Type of the object a given object depends on.">'],
['HostedConcept Type', '(Concept)', 'href="CONCEPT_Hosted_Concept+_Type.html" title="Concept for types that have a host.">'],
['hostGraph', '(Function)', 'href="FUNCTION.host_Graph.html" title="The graph this iterator is working on.">'],
['hostIterator', '(Function)', 'href="FUNCTION.host_Iterator.html" title="Return host iterator.">'],
['hostToVirtualPosition (Journaled String)', '(Function)', 'href="FUNCTION_Journaled+_String_23host_To_Virtual_Position.html" title="Translates position in host to virtual (view) position.">'],
['i1 (IntervalAndCargo)', '(Memvar)', 'href="MEMVAR_Interval_And_Cargo_23i1.html" title="The first element in the interval of type i1.">'],
['i1 (Pair)', '(Memvar)', 'href="MEMVAR_Pair_23i1.html" title="T1 object">'],
['i1 (Triple)', '(Memvar)', 'href="MEMVAR_Triple_23i1.html" title="T1 object">'],
['i2 (IntervalAndCargo)', '(Memvar)', 'href="MEMVAR_Interval_And_Cargo_23i2.html" title="The last element in the interval of type i2.">'],
['i2 (Pair)', '(Memvar)', 'href="MEMVAR_Pair_23i2.html" title="T2 object">'],
['i2 (Triple)', '(Memvar)', 'href="MEMVAR_Triple_23i2.html" title="T2 object">'],
['i3 (Triple)', '(Memvar)', 'href="MEMVAR_Triple_23i3.html" title="T3 object">'],
['id (AlignedReadStoreElement)', '(Memvar)', 'href="MEMVAR_Aligned_Read_Store_Element_23id.html" title="The alignment id refers to associated alignment information in Memvar.FragmentStore#alignQualityStore or Memvar.FragmentStore#alignedReadTagStore.">'],
['id (VcfRecord)', '(Memvar)', 'href="MEMVAR_Vcf_Record_23id.html" title="Textual identifier of the variant (Shortcut.CharString).">'],
['Id', '(Metafunction)', 'href="METAFUNCTION_Id.html" title="Type of an object that represents an id.">'],
['idCount', '(Function)', 'href="FUNCTION.id_Count.html" title="Determines the number of ids that were obtained.">'],
['idInUse', '(Function)', 'href="FUNCTION.id_In_Use.html" title="Checks whether the given id is in use or not.">'],
['IdManager', '(Class)', 'href="CLASS_Id_Manager.html" title="Id manager that provides unique ids for vertices and edges.">'],
['idToPosition', '(Function)', 'href="FUNCTION.id_To_Position.html" title="Retrieves the position of a string in the StringSet given an id.">'],
['If', '(Metafunction)', 'href="METAFUNCTION_If.html" title="Metaprogramming &quot;if&quot;.">'],
['IfC', '(Metafunction)', 'href="METAFUNCTION_If_C.html" title="Metaprogramming &quot;if&quot;, value based version.">'],
['ignoreUnusedVariableWarning', '(Function)', 'href="FUNCTION.ignore_Unused_Variable_Warning.html" title="Removes unused variable warning.">'],
['in1 (Bundle2)', '(Memvar)', 'href="MEMVAR_Bundle2_23in1.html" title="TInput1 reference">'],
['in1 (Bundle3)', '(Memvar)', 'href="MEMVAR_Bundle3_23in1.html" title="TInput1 reference">'],
['in1 (Bundle5)', '(Memvar)', 'href="MEMVAR_Bundle5_23in1.html" title="TInput1 reference">'],
['in2 (Bundle2)', '(Memvar)', 'href="MEMVAR_Bundle2_23in2.html" title="TInput2 reference">'],
['in2 (Bundle3)', '(Memvar)', 'href="MEMVAR_Bundle3_23in2.html" title="TInput2 reference">'],
['in2 (Bundle5)', '(Memvar)', 'href="MEMVAR_Bundle5_23in2.html" title="TInput2 reference">'],
['in3 (Bundle3)', '(Memvar)', 'href="MEMVAR_Bundle3_23in3.html" title="TInput3 reference">'],
['in3 (Bundle5)', '(Memvar)', 'href="MEMVAR_Bundle5_23in3.html" title="TInput3 reference">'],
['in4 (Bundle5)', '(Memvar)', 'href="MEMVAR_Bundle5_23in4.html" title="TInput4 reference">'],
['in5 (Bundle5)', '(Memvar)', 'href="MEMVAR_Bundle5_23in5.html" title="TInput5 reference">'],
['inDegree', '(Function)', 'href="FUNCTION.in_Degree.html" title="Number of incoming edges for a given vertex.">'],
['Index', '(Class)', 'href="CLASS_Index.html" title="Contains preprocessing data of a fixed text. In combination with a Class.Finder or a Spec.VSTree Iterator it allows fast dictionary look-up and advanced computations.">'],
['Index countChildren', '(Demo)', 'href="DEMO_Index+count_Children.html" title="Example for using a Function.countChildren  and Function.countOccurrences for indices.">'],
['Index countOccurrencesMultiple', '(Demo)', 'href="DEMO_Index+count_Occurrences_Multiple.html" title="Example for using the functions Function.countOccurrencesMultiple and Function.countSequences for q-gram indices.">'],
['Index Find Algorithm', '(Tag)', 'href="TAG_Index+_Find+_Algorithm.html" title="Tags to specialise the search strategies.">'],
['Index Finder', '(Demo)', 'href="DEMO_Index+_Finder.html" title="Example for using a Class.Finder of an Class.Index.">'],
['Index Finder StringSet', '(Demo)', 'href="DEMO_Index+_Finder+_String_Set.html" title="Example for using a Class.Finder of an Class.Index of a Class.StringSet.">'],
['Index lcpAt, saAt', '(Demo)', 'href="DEMO_Index+lcp_At_2c+sa_At.html" title="Example for using the functions Function.saAt and Function.IndexEsa#lcpAt for esa indices.">'],
['indexBucketMap', '(Function)', 'href="FUNCTION.index_Bucket_Map.html" title="Shortcut for getFibre(.., QGramBucketMap).">'],
['indexBwt (IndexEsa)', '(Function)', 'href="FUNCTION_Index_Esa_23index_Bwt.html" title="Shortcut for getFibre(.., EsaBwt).">'],
['indexChildtab (IndexEsa)', '(Function)', 'href="FUNCTION_Index_Esa_23index_Childtab.html" title="Shortcut for getFibre(.., EsaChildtab).">'],
['indexCounts', '(Function)', 'href="FUNCTION.index_Counts.html" title="Shortcut for getFibre(.., QGramCounts).">'],
['indexCountsDir', '(Function)', 'href="FUNCTION.index_Counts_Dir.html" title="Shortcut for getFibre(.., QGramCountsDir).">'],
['indexCreate (FMIndex)', '(Function)', 'href="FUNCTION_F_M_Index_23index_Create.html" title="Creates a specific Metafunction.Fibre.">'],
['indexCreate', '(Function)', 'href="FUNCTION.index_Create.html" title="Creates a specific Metafunction.Fibre.">'],
['IndexDfi', '(Spec)', 'href="SPEC_Index_Dfi.html" title="The Deferred Frequency Index (see Weese and Schulz, &quot;Efficient string mining under constraints via the deferred frequency index&quot;).">'],
['indexDir', '(Function)', 'href="FUNCTION.index_Dir.html" title="Shortcut for getFibre(.., QGramDir).">'],
['IndexEsa', '(Spec)', 'href="SPEC_Index_Esa.html" title="The enhanced suffix array index is very fast index, requiring more memory than other indices. In addition to the suffix array an lcp (longest common prefix) table and a child table (containing structural information of the suffix tree) are provided.">'],
['indexLcp (IndexEsa)', '(Function)', 'href="FUNCTION_Index_Esa_23index_Lcp.html" title="Shortcut for getFibre(.., EsaLcp).">'],
['indexLcpe (IndexEsa)', '(Function)', 'href="FUNCTION_Index_Esa_23index_Lcpe.html" title="Shortcut for getFibre(.., EsaLcpe).">'],
['IndexQGram', '(Spec)', 'href="SPEC_Index_Q_Gram.html" title="An index based on an array of sorted q-grams. Especially useful for q-gram/k-mer searches.">'],
['indexRawSA', '(Function)', 'href="FUNCTION.index_Raw_S_A.html" title="Shortcut for getFibre(.., EsaRawSA).">'],
['indexRawText', '(Function)', 'href="FUNCTION.index_Raw_Text.html" title="Shortcut for getFibre(.., EsaRawText).">'],
['indexRequire', '(Function)', 'href="FUNCTION.index_Require.html" title="On-demand creation of a specific Metafunction.Fibre.">'],
['indexSA', '(Function)', 'href="FUNCTION.index_S_A.html" title="Shortcut for getFibre(.., FibreSA).">'],
['IndexSa', '(Spec)', 'href="SPEC_Index_Sa.html" title="An index based on a suffix array.">'],
['indexShape', '(Function)', 'href="FUNCTION.index_Shape.html" title="Shortcut for getFibre(.., QGramShape).">'],
['indexSupplied (FMIndex)', '(Function)', 'href="FUNCTION_F_M_Index_23index_Supplied.html" title="Returns whether a specific Metafunction.Fibre is present.">'],
['indexSupplied', '(Function)', 'href="FUNCTION.index_Supplied.html" title="Returns whether a specific Metafunction.Fibre is present.">'],
['indexText', '(Function)', 'href="FUNCTION.index_Text.html" title="Shortcut for getFibre(index, FibreText()).">'],
['IndexWotd', '(Spec)', 'href="SPEC_Index_Wotd.html" title="This index represents a lazy suffix tree, meaning that a path from the tree of the index in only computed, if it is traversed. For details see Giegerich et al., &quot;Efficient implementation of lazy suffix trees&quot;.">'],
['infimumValueImpl', '(Function)', 'href="FUNCTION.infimum_Value_Impl.html" title="Implements Function.minValue.">'],
['infix (Finder)', '(Function)', 'href="FUNCTION_Finder_23infix.html" title="Returns the segment of the last found match in haystack.">'],
['infix', '(Function)', 'href="FUNCTION.infix.html" title="Creates infix object.">'],
['Infix', '(Metafunction)', 'href="METAFUNCTION_Infix.html" title="Infix sequence type.">'],
['InfixSegment', '(Spec)', 'href="SPEC_Infix_Segment.html" title="An arbitrary segment.">'],
['infixWithLength', '(Function)', 'href="FUNCTION.infix_With_Length.html" title="Creates infix object.">'],
['info (VcfRecord)', '(Memvar)', 'href="MEMVAR_Vcf_Record_23info.html" title="Value of the INFO field, empty if &quot;.&quot; in VCF file (Shortcut.CharString).">'],
['InputIteratorConcept', '(Concept)', 'href="CONCEPT_Input_Iterator_Concept.html" title="Iterator that allows dereferenced reading.">'],
['insert (Map)', '(Function)', 'href="FUNCTION_Map_23insert.html" title="Insert new value into map.">'],
['insert', '(Function)', 'href="FUNCTION.insert.html" title="Inserts a sequence into a container.">'],
['insertGap', '(Function)', 'href="FUNCTION.insert_Gap.html" title="Insert one gap into a gapped sequence.">'],
['insertGaps', '(Function)', 'href="FUNCTION.insert_Gaps.html" title="Insert multiple gaps into a gapped sequence.">'],
['InsertionBuffer', '(Metafunction)', 'href="METAFUNCTION_Insertion_Buffer.html" title="Return type of insertion buffer string for a journaled string.">'],
['insertValue', '(Function)', 'href="FUNCTION.insert_Value.html" title="Inserts a single value into a container.">'],
['IntegerConcept', '(Concept)', 'href="CONCEPT_Integer_Concept.html" title="An integral type.">'],
['IntegralForValue', '(Metafunction)', 'href="METAFUNCTION_Integral_For_Value.html" title="Returns an itegral type that provides sufficient space to store a value.">'],
['integrateAlign', '(Function)', 'href="FUNCTION.integrate_Align.html" title="Integrates an alignment into another by copying the gaps.">'],
['InternalMap', '(Class)', 'href="CLASS_Internal_Map.html" title="An internal property map using member ids.">'],
['InternalPointerMap', '(Class)', 'href="CLASS_Internal_Pointer_Map.html" title="An internal property map using pointer to members.">'],
['InternalRawMap', '(Class)', 'href="CLASS_Internal_Raw_Map.html" title="An internal property map using raw pointer to members.">'],
['Interval Tree', '(Demo)', 'href="DEMO_Interval+_Tree.html" title="Construction and usage demo for the interval tree.">'],
['Interval Tree Node', '(Spec)', 'href="SPEC_Interval+_Tree+_Node.html" title="An Interval Tree Node that stores intervals explicitely in each node.">'],
['IntervalAndCargo', '(Class)', 'href="CLASS_Interval_And_Cargo.html" title="A simple record type that stores an interval and a cargo value.">'],
['IntervalAndCargo (IntervalAndCargo)', '(Memfunc)', 'href="MEMFUNC_Interval_And_Cargo_23_Interval_And_Cargo.html" title="Constructor.">'],
['IntervalTree', '(Class)', 'href="CLASS_Interval_Tree.html" title="A datastructure that efficiently stores intervals.">'],
['IntervalTree (IntervalTree)', '(Memfunc)', 'href="MEMFUNC_Interval_Tree_23_Interval_Tree.html" title="Constructor">'],
['IntervalTree Centers', '(Tag)', 'href="TAG_Interval_Tree+_Centers.html" title="Tag to select a specific way to compute the center of an interval tree node.">'],
['IntervalTree Node Types', '(Tag)', 'href="TAG_Interval_Tree+_Node+_Types.html" title="Tags to select the node type for Class.IntervalTree.">'],
['IntervalTreeNode', '(Class)', 'href="CLASS_Interval_Tree_Node.html" title="Element of Class.IntervalTree.">'],
['IntervalTreeNode (IntervalTreeNode)', '(Memfunc)', 'href="MEMFUNC_Interval_Tree_Node_23_Interval_Tree_Node.html" title="Default constructor.">'],
['INVALID_ID (AlignedReadStoreElement)', '(Memvar)', 'href="MEMVAR_Aligned_Read_Store_Element_23_I_N_V_A_L_I_D___I_D.html" title="Constant to represent an invalid id.">'],
['INVALID_ID (AnnotationStoreElement)', '(Memvar)', 'href="MEMVAR_Annotation_Store_Element_23_I_N_V_A_L_I_D___I_D.html" title="Constant to represent an invalid id.">'],
['INVALID_ID (ContigStoreElement)', '(Memvar)', 'href="MEMVAR_Contig_Store_Element_23_I_N_V_A_L_I_D___I_D.html" title="Constant to represent an invalid id.">'],
['INVALID_ID (MatePairStoreElement)', '(Memvar)', 'href="MEMVAR_Mate_Pair_Store_Element_23_I_N_V_A_L_I_D___I_D.html" title="Constant to represent an invalid id.">'],
['INVALID_ID (ReadStoreElement)', '(Memvar)', 'href="MEMVAR_Read_Store_Element_23_I_N_V_A_L_I_D___I_D.html" title="Constant to represent an invalid id.">'],
['INVALID_LEN (BamAlignmentRecord)', '(Memvar)', 'href="MEMVAR_Bam_Alignment_Record_23_I_N_V_A_L_I_D___L_E_N.html" title="Static member with invalid/sentinel position value.">'],
['INVALID_POS (AnnotationStoreElement)', '(Memvar)', 'href="MEMVAR_Annotation_Store_Element_23_I_N_V_A_L_I_D___P_O_S.html" title="Constant to represent an invalid position.">'],
['INVALID_POS (BamAlignmentRecord)', '(Memvar)', 'href="MEMVAR_Bam_Alignment_Record_23_I_N_V_A_L_I_D___P_O_S.html" title="Static member with invalid/sentinel position value.">'],
['INVALID_POS (BedRecord)', '(Memvar)', 'href="MEMVAR_Bed_Record_23_I_N_V_A_L_I_D___P_O_S.html" title="Constant for invalid positions.">'],
['INVALID_POS (GffRecord)', '(Memvar)', 'href="MEMVAR_Gff_Record_23_I_N_V_A_L_I_D___P_O_S.html" title="Static member with invalid/sentinel position value.">'],
['INVALID_POS (VcfRecord)', '(Memvar)', 'href="MEMVAR_Vcf_Record_23_I_N_V_A_L_I_D___P_O_S.html" title="Static member as marker for invalid position (__int32)">'],
['INVALID_REFID (BamAlignmentRecord)', '(Memvar)', 'href="MEMVAR_Bam_Alignment_Record_23_I_N_V_A_L_I_D___R_E_F_I_D.html" title="Static member with invalid/sentinel reference id (-1 as in BAM/SAM).">'],
['INVALID_REFID (BedRecord)', '(Memvar)', 'href="MEMVAR_Bed_Record_23_I_N_V_A_L_I_D___R_E_F_I_D.html" title="Constant for invalid references.">'],
['INVALID_REFID (VcfRecord)', '(Memvar)', 'href="MEMVAR_Vcf_Record_23_I_N_V_A_L_I_D___R_E_F_I_D.html" title="Static member as marker for invalid reference (__int32)">'],
['INVALID_SCORE (GffRecord)', '(Memvar)', 'href="MEMVAR_Gff_Record_23_I_N_V_A_L_I_D___S_C_O_R_E.html" title="Static member with invalid score value.">'],
['inverseHash', '(Function)', 'href="FUNCTION.inverse_Hash.html" title="Determines the corresponding sequence pattern given the hash value.">'],
['IO stream', '(Adaption)', 'href="ADAPTION_I_O+stream.html" title="Adaption of standard C++ iostream objects.">'],
['Is', '(Metafunction)', 'href="METAFUNCTION_Is.html" title="Returns whether a concept is fulfilled.">'],
['isalnum', '(Function)', 'href="FUNCTION.isalnum.html" title="Check if character is alpha-numeric">'],
['isalpha', '(Function)', 'href="FUNCTION.isalpha.html" title="Check if character is a upper or lowercase letter">'],
['isAnsiColorTerminal', '(Function)', 'href="FUNCTION.is_Ansi_Color_Terminal.html" title="Check whether we are printing to a terminal.">'],
['isBitSet', '(Function)', 'href="FUNCTION.is_Bit_Set.html" title="Returns whether the bit with the given index is set to 1.">'],
['isblank', '(Function)', 'href="FUNCTION.isblank.html" title="Check if character is either \' \' or \'\\t\'">'],
['isBooleanOption (ArgParseOption)', '(Function)', 'href="FUNCTION_Arg_Parse_Option_23is_Boolean_Option.html" title="Returns whether option is a switch.">'],
['IsCharType', '(Metafunction)', 'href="METAFUNCTION_Is_Char_Type.html" title="Return whether the argument is char, wchar_t, char const, or wchar_t const.">'],
['iscntrl', '(Function)', 'href="FUNCTION.iscntrl.html" title="Check if character is a control character">'],
['IsContiguous', '(Metafunction)', 'href="METAFUNCTION_Is_Contiguous.html" title="Determines whether a container stores its elements in a contiguous array.">'],
['isdigit', '(Function)', 'href="FUNCTION.isdigit.html" title="Check if character is a digit">'],
['isDirect', '(Function)', 'href="FUNCTION.is_Direct.html" title="Query a GZ File Stream for being &quot;direct.&quot;">'],
['isDoubleArgument', '(Function)', 'href="FUNCTION.is_Double_Argument.html" title="Returns whether the argument is a double.">'],
['isEqual', '(Function)', 'href="FUNCTION.is_Equal.html" title="Operator &quot;==&quot;.">'],
['isFlat (Journaled String)', '(Function)', 'href="FUNCTION_Journaled+_String_23is_Flat.html" title="Returns whether journaled string has modifications.">'],
['isGap (Gaps)', '(Function)', 'href="FUNCTION_Gaps_23is_Gap.html" title="Query whether a given clipped view position is a gap.">'],
['isGood (BamStream)', '(Function)', 'href="FUNCTION_Bam_Stream_23is_Good.html" title="Check whether the Class.BamStream object has is in the failure state.">'],
['isGood (BedStream)', '(Function)', 'href="FUNCTION_Bed_Stream_23is_Good.html" title="Query a Class.BedStream for errors.">'],
['isGood (GffStream)', '(Function)', 'href="FUNCTION_Gff_Stream_23is_Good.html" title="Query a Class.GffStream for errors.">'],
['isGood (SequenceStream)', '(Function)', 'href="FUNCTION_Sequence_Stream_23is_Good.html" title="Check whether a Class.SequenceStream object is ready for reading.">'],
['isGood (VcfStream)', '(Function)', 'href="FUNCTION_Vcf_Stream_23is_Good.html" title="Query a Class.VcfStream for errors.">'],
['isgraph', '(Function)', 'href="FUNCTION.isgraph.html" title="Check if character is printable and not white space">'],
['isGreater', '(Function)', 'href="FUNCTION.is_Greater.html" title="Operator &quot;>&quot;.">'],
['isGreaterOrEqual', '(Function)', 'href="FUNCTION.is_Greater_Or_Equal.html" title="Operator &quot;>=&quot;.">'],
['isHidden (ArgParseOption)', '(Function)', 'href="FUNCTION_Arg_Parse_Option_23is_Hidden.html" title="Returns whether option is hidden on the help screen. Default is false.">'],
['isInputFileArgument', '(Function)', 'href="FUNCTION.is_Input_File_Argument.html" title="Returns whether the argument is an input file.">'],
['isInt64Argument', '(Function)', 'href="FUNCTION.is_Int64_Argument.html" title="Returns whether the argument is a 64 bit integer.">'],
['IsInteger', '(Metafunction)', 'href="METAFUNCTION_Is_Integer.html" title="Tests for a type to be of integral aue.">'],
['isIntegerArgument', '(Function)', 'href="FUNCTION.is_Integer_Argument.html" title="Returns whether the argument is an integer.">'],
['IsIntegral', '(Metafunction)', 'href="METAFUNCTION_Is_Integral.html" title="Tests for a type to be of integral aue.">'],
['isLastChild', '(Function)', 'href="FUNCTION.is_Last_Child.html" title="Returns a boolean value that indicates whether the current node is the last child.">'],
['isLeaf (Graph)', '(Function)', 'href="FUNCTION_Graph_23is_Leaf.html" title="Tests whether a given vertex is a leaf or not.">'],
['isLeaf', '(Function)', 'href="FUNCTION.is_Leaf.html" title="Test whether a tree iterator points to a leaf.">'],
['isLeftMaximal', '(Function)', 'href="FUNCTION.is_Left_Maximal.html" title="Test whether the occurrences of an iterator\'s Function.representative mutually differ in the character left of the hits.">'],
['isLess', '(Function)', 'href="FUNCTION.is_Less.html" title="Operator &quot;&lt;&quot;.">'],
['isLessOrEqual', '(Function)', 'href="FUNCTION.is_Less_Or_Equal.html" title="Operator &quot;&lt;=&quot;.">'],
['isListArgument', '(Function)', 'href="FUNCTION.is_List_Argument.html" title="Returns whether the argument can be given multiple times.">'],
['isNotEqual', '(Function)', 'href="FUNCTION.is_Not_Equal.html" title="Operator &quot;!=&quot;.">'],
['isOutputFileArgument', '(Function)', 'href="FUNCTION.is_Output_File_Argument.html" title="Returns whether the argument is an output file.">'],
['isPartiallyLeftExtensible', '(Function)', 'href="FUNCTION.is_Partially_Left_Extensible.html" title="Test whether the characters left of the two occurrences of Function.representative are equal.">'],
['isPrefix', '(Function)', 'href="FUNCTION.is_Prefix.html" title="Test whether a sequence is prefix of another sequence.">'],
['isprint', '(Function)', 'href="FUNCTION.isprint.html" title="Check if character is printable, i.e. not a control character">'],
['isRequired (ArgParseOption)', '(Function)', 'href="FUNCTION_Arg_Parse_Option_23is_Required.html" title="Returns whether the option is mandatory.">'],
['isReversed', '(Function)', 'href="FUNCTION.is_Reversed.html" title="Returns true if the segment match is in reverse orientation.">'],
['isRightTerminal', '(Function)', 'href="FUNCTION.is_Right_Terminal.html" title="Test whether iterator points to a suffix.">'],
['isRoot (Graph)', '(Function)', 'href="FUNCTION_Graph_23is_Root.html" title="Tests whether a given vertex is the root or not.">'],
['isRoot', '(Function)', 'href="FUNCTION.is_Root.html" title="Test whether a tree iterator points to the root node.">'],
['IsSameType', '(Metafunction)', 'href="METAFUNCTION_Is_Same_Type.html" title="Metaprogramming type comparison.">'],
['IsSequence', '(Metafunction)', 'href="METAFUNCTION_Is_Sequence.html" title="Determines whether a container stores its elements in sequential order.">'],
['isSet (ArgParseArgument)', '(Function)', 'href="FUNCTION_Arg_Parse_Argument_23is_Set.html" title="Returns true if a value was assigned to the argument.">'],
['isSet (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23is_Set.html" title="Returns whether an option was set on the parsed command line.">'],
['isSetBit', '(Function)', 'href="FUNCTION.is_Set_Bit.html" title="Returns whether the bit with the given index is set to 1.">'],
['IsSignedInteger', '(Metafunction)', 'href="METAFUNCTION_Is_Signed_Integer.html" title="Tests for a type to be of signed integral aue.">'],
['isSilent', '(Function)', 'href="FUNCTION.is_Silent.html" title="Indicates whether a state is silent or not.">'],
['IsSimple', '(Metafunction)', 'href="METAFUNCTION_Is_Simple.html" title="Tests type to be simple.">'],
['isspace', '(Function)', 'href="FUNCTION.isspace.html" title="Check if character is a white-space character">'],
['isStringArgument', '(Function)', 'href="FUNCTION.is_String_Argument.html" title="Returns whether the argument is a string.">'],
['isTerminal()', '(Function)', 'href="FUNCTION.is_Terminal_28_29.html" title="Check whether we are printing to a terminal.">'],
['isUnique', '(Function)', 'href="FUNCTION.is_Unique.html" title="Test whether the Function.representative occurs only once in every sequence.">'],
['IsUnsignedInteger', '(Metafunction)', 'href="METAFUNCTION_Is_Unsigned_Integer.html" title="Tests for a type to be of unsigned integral aue.">'],
['itemRgb (Bed12 BedRecord)', '(Memvar)', 'href="MEMVAR_Bed12+_Bed_Record_23item_Rgb.html" title="RGB color of item (Class.BedRgb).">'],
['Iter', '(Class)', 'href="CLASS_Iter.html" title="Iterator that is used to traverse containers.">'],
['iter', '(Function)', 'href="FUNCTION.iter.html" title="Iterator to item at given position.">'],
['Iter (Adaptor Iterator)', '(Memfunc)', 'href="MEMFUNC_Adaptor+_Iterator_23_Iter.html" title="Constructor">'],
['Iter (Adjacency Iterator)', '(Memfunc)', 'href="MEMFUNC_Adjacency+_Iterator_23_Iter.html" title="Constructor">'],
['Iter (Bfs Iterator)', '(Memfunc)', 'href="MEMFUNC_Bfs+_Iterator_23_Iter.html" title="Constructor">'],
['Iter (ConcatVirtual Iterator)', '(Memfunc)', 'href="MEMFUNC_Concat_Virtual+_Iterator_23_Iter.html" title="Constructor">'],
['Iter (Dfs Preorder Iterator)', '(Memfunc)', 'href="MEMFUNC_Dfs+_Preorder+_Iterator_23_Iter.html" title="Constructor">'],
['Iter (Edge Iterator)', '(Memfunc)', 'href="MEMFUNC_Edge+_Iterator_23_Iter.html" title="Constructor">'],
['Iter (Out-Edge Iterator)', '(Memfunc)', 'href="MEMFUNC_Out-_Edge+_Iterator_23_Iter.html" title="Constructor">'],
['Iter (Position Iterator)', '(Memfunc)', 'href="MEMFUNC_Position+_Iterator_23_Iter.html" title="Constructor">'],
['Iter (Vertex Iterator)', '(Memfunc)', 'href="MEMFUNC_Vertex+_Iterator_23_Iter.html" title="Constructor">'],
['Iterator (BottomUp Iterator)', '(Memfunc)', 'href="MEMFUNC_Bottom_Up+_Iterator_23_Iterator.html" title="Constructor">'],
['Iterator (MaxRepeats Iterator)', '(Memfunc)', 'href="MEMFUNC_Max_Repeats+_Iterator_23_Iterator.html" title="Constructor">'],
['Iterator (MultiMems Iterator)', '(Memfunc)', 'href="MEMFUNC_Multi_Mems+_Iterator_23_Iterator.html" title="Constructor">'],
['Iterator (Mums Iterator)', '(Memfunc)', 'href="MEMFUNC_Mums+_Iterator_23_Iterator.html" title="Constructor">'],
['Iterator (SuperMaxRepeats Iterator)', '(Memfunc)', 'href="MEMFUNC_Super_Max_Repeats+_Iterator_23_Iterator.html" title="Constructor">'],
['Iterator (SuperMaxRepeatsFast Iterator)', '(Memfunc)', 'href="MEMFUNC_Super_Max_Repeats_Fast+_Iterator_23_Iterator.html" title="Constructor">'],
['Iterator (TopDown Iterator)', '(Memfunc)', 'href="MEMFUNC_Top_Down+_Iterator_23_Iterator.html" title="Constructor">'],
['Iterator (TopDownHistory Iterator)', '(Memfunc)', 'href="MEMFUNC_Top_Down_History+_Iterator_23_Iterator.html" title="Constructor">'],
['Iterator (Chained Seed)', '(Metafunction)', 'href="METAFUNCTION_Chained+_Seed_23_Iterator.html" title="The seed diagonal iterator type.">'],
['Iterator', '(Metafunction)', 'href="METAFUNCTION_Iterator.html" title="Type of iterator objects that are used to traverse the container.">'],
['Iterator Basics', '(Demo)', 'href="DEMO_Iterator+_Basics.html" title="Simple iterator functions.">'],
['Iterator Proxy', '(Spec)', 'href="SPEC_Iterator+_Proxy.html" title="Proxy that is implemented by an iterator.">'],
['Iterator Spec', '(Tag)', 'href="TAG_Iterator+_Spec.html" title="Specifies the kind of an iterator.">'],
['IteratorAssociatedTypesConcept', '(Concept)', 'href="CONCEPT_Iterator_Associated_Types_Concept.html" title="Requires metafunctions for the associated types used in the iterator concepts.">'],
['IterComplementConst', '(Metafunction)', 'href="METAFUNCTION_Iter_Complement_Const.html" title="Complement the &quot;constness&quot; of the container of an iterator.">'],
['IterMakeConst', '(Metafunction)', 'href="METAFUNCTION_Iter_Make_Const.html" title="Make the container of an Iter const.">'],
['Iupac', '(Spec)', 'href="SPEC_Iupac.html" title="Iupac code for DNA.">'],
['IupacIterator', '(Shortcut)', 'href="SHORTCUT_Iupac_Iterator.html" title="Iterator for Shortcut.IupacString.">'],
['IupacString', '(Shortcut)', 'href="SHORTCUT_Iupac_String.html" title="A string of Spec.Iupac.">'],
['join', '(Function)', 'href="FUNCTION.join.html" title="Joins a Spec.Journaled String to a Spec.Journaled Set by computing and journaling differences to the global reference sequence.">'],
['Join Strategies', '(Tag)', 'href="TAG_Join+_Strategies.html" title="Tags used for selecting journaling strategies when joining a Spec.Journaled String to a global reference sequence.">'],
['JoinConfig', '(Class)', 'href="CLASS_Join_Config.html" title="Specifies the strategy and all necessary parameters used to journal a sequence to a reference sequence.">'],
['Joiner', '(Spec)', 'href="SPEC_Joiner.html" title="Joins two or three input streams.">'],
['joinSets', '(Function)', 'href="FUNCTION.join_Sets.html" title="UNION() operation for UF data structure.">'],
['Journaled Set', '(Spec)', 'href="SPEC_Journaled+_Set.html" title="A string set storing the string as members. It can store a global reference sequence to which all members can be journaled if they are of type Spec.Journaled String.">'],
['Journaled String', '(Spec)', 'href="SPEC_Journaled+_String.html" title="Journaled versions of arbitrary underlying string.">'],
['JournalType', '(Metafunction)', 'href="METAFUNCTION_Journal_Type.html" title="Metafunction for returning the type of the journal of a Journaled String.">'],
['jumpToOrphans (BamIndex)', '(Function)', 'href="FUNCTION_Bam_Index_23jump_To_Orphans.html" title="Seek to orphans block in BAM BGZF stream using an index.">'],
['jumpToRegion (BamIndex)', '(Function)', 'href="FUNCTION_Bam_Index_23jump_To_Region.html" title="Seek in BAM BGZF stream using an index.">'],
['key (VcfHeaderRecord)', '(Memvar)', 'href="MEMVAR_Vcf_Header_Record_23key.html" title="Key of the header record (Shortcut.CharString).">'],
['Key', '(Metafunction)', 'href="METAFUNCTION_Key.html" title="Key type of a key to cargo mapping.">'],
['kmerSize (D2 AFScore)', '(Memvar)', 'href="MEMVAR_D2+_A_F_Score_23kmer_Size.html" title="Size of the kmers">'],
['kmerSize (D2Star AFScore)', '(Memvar)', 'href="MEMVAR_D2_Star+_A_F_Score_23kmer_Size.html" title="Size of the kmers">'],
['kmerSize (D2z AFScore)', '(Memvar)', 'href="MEMVAR_D2z+_A_F_Score_23kmer_Size.html" title="Size of the kmers">'],
['kmerSize (N2 AFScore)', '(Memvar)', 'href="MEMVAR_N2+_A_F_Score_23kmer_Size.html" title="Size of the kmers">'],
['Kruskals Algorithm', '(Demo)', 'href="DEMO_Kruskals+_Algorithm.html" title="Kruskal\'s algorithm for computing a minimum spanning tree.">'],
['kruskalsAlgorithm', '(Function)', 'href="FUNCTION.kruskals_Algorithm.html" title="Computes a minimum spanning tree on a graph.">'],
['label (Automaton)', '(Function)', 'href="FUNCTION_Automaton_23label.html" title="Returns the label of the out-edge this iterator points to (for automatons).">'],
['label', '(Function)', 'href="FUNCTION.label.html" title="Gets the label that is associated with this vertex descriptor or the sequence that is associated with a fragment.">'],
['lastChildId (AnnotationStoreElement)', '(Memvar)', 'href="MEMVAR_Annotation_Store_Element_23last_Child_Id.html" title="The id of the rightmost child annotation.">'],
['layoutAlignment', '(Function)', 'href="FUNCTION.layout_Alignment.html" title="Calculates a visible layout of aligned reads.">'],
['lca', '(Function)', 'href="FUNCTION.lca.html" title="Returns the last common ancestor of two tree nodes.">'],
['lcp', '(Function)', 'href="FUNCTION.lcp.html" title="Returns the length of the longest-common-prefix of two suffix tree nodes.">'],
['lcpAt (IndexEsa)', '(Function)', 'href="FUNCTION_Index_Esa_23lcp_At.html" title="Shortcut for value(indexLcp(..), ..).">'],
['lcpeAt (IndexEsa)', '(Function)', 'href="FUNCTION_Index_Esa_23lcpe_At.html" title="Shortcut for value(indexLcpe(..), ..).">'],
['lcpLength', '(Function)', 'href="FUNCTION.lcp_Length.html" title="Length of longest common prefix.">'],
['leftBoundary', '(Function)', 'href="FUNCTION.left_Boundary.html" title="Access to the left boundary.">'],
['length (Chained Seed)', '(Function)', 'href="FUNCTION_Chained+_Seed_23length.html" title="Returns the number of diagonals in the chained seed.">'],
['length (FileMapping)', '(Function)', 'href="FUNCTION_File_Mapping_23length.html" title="Return the file size of a memory mapping.">'],
['length (Gaps)', '(Function)', 'href="FUNCTION_Gaps_23length.html" title="Return length of the gapped sequence.">'],
['length (Index)', '(Function)', 'href="FUNCTION_Index_23length.html" title="The number of characters in the underlying text of the index is returned.">'],
['length (PrefixSumTable)', '(Function)', 'href="FUNCTION_Prefix_Sum_Table_23length.html" title="Returns the number of different characters in the prefix-sum table.">'],
['length', '(Function)', 'href="FUNCTION.length.html" title="The number of items/characters.">'],
['length (SeedDiagonal)', '(Memvar)', 'href="MEMVAR_Seed_Diagonal_23length.html" title="The length of the diagonal.">'],
['LENGTH', '(Metafunction)', 'href="METAFUNCTION_L_E_N_G_T_H.html" title="Number of elements in a fixed-size container.">'],
['LessThanComparableConcept', '(Concept)', 'href="CONCEPT_Less_Than_Comparable_Concept.html" title="A type that can be less-than compared.">'],
['Levenshtein StringEnumerator', '(Spec)', 'href="SPEC_Levenshtein+_String_Enumerator.html" title="Enumerate all strings within a given edit distance of a &quot;center string&quot;.">'],
['LevenshteinDistance', '(Tag)', 'href="TAG_Levenshtein_Distance.html" title="Switch to trigger Levenshtein distance, which is a measure of edit operations (character substitutions, deletions or insertions).">'],
['Lexical', '(Class)', 'href="CLASS_Lexical.html" title="Comparator for lexical comparison.">'],
['lexicalCast', '(Function)', 'href="FUNCTION.lexical_Cast.html" title="Cast from a String-type to a numerical type">'],
['lexicalCast2', '(Function)', 'href="FUNCTION.lexical_Cast2.html" title="Cast from a String-type to a numerical type">'],
['LF Table Fibres', '(Tag)', 'href="TAG_L_F+_Table+_Fibres.html" title="Tag to select a specific fibre of a Spec.FMIndex.">'],
['lfMapping', '(Function)', 'href="FUNCTION.lf_Mapping.html" title="Returns the position of an character at a specified position of L in F. L corresponds to the last column of the sorted cyclic rotations of the original text, while F correspond to the first column.">'],
['LfTable', '(Class)', 'href="CLASS_Lf_Table.html" title="LfTable is an object storing all necessary information for the LF-mapping.">'],
['libId (MatePairStoreElement)', '(Memvar)', 'href="MEMVAR_Mate_Pair_Store_Element_23lib_Id.html" title="Refers to a library in the Memvar.FragmentStore#libraryStore or is INVALID_ID if the mate-pair has no library.">'],
['libraryNameStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23library_Name_Store.html" title="Class.StringSet that maps from libId to libName.">'],
['libraryStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23library_Store.html" title="Class.String that maps from libId to &lt;mean, std>.">'],
['LibraryStoreElement', '(Class)', 'href="CLASS_Library_Store_Element.html" title="Represents a fragment library.">'],
['LibraryStoreElement (LibraryStoreElement)', '(Memfunc)', 'href="MEMFUNC_Library_Store_Element_23_Library_Store_Element.html" title="Constructor">'],
['LimitRecordReaderInScope', '(Class)', 'href="CLASS_Limit_Record_Reader_In_Scope.html" title="manipulates a Class.RecordReader -Object so that it operates only on one buffer">'],
['lineLength (SequenceOutputOptions)', '(Memvar)', 'href="MEMVAR_Sequence_Output_Options_23line_Length.html" title="Length of the lines when writing out.">'],
['list1 (IntervalTreeNode)', '(Memvar)', 'href="MEMVAR_Interval_Tree_Node_23list1.html" title="Sorted list of pointers to intervals, sorted in ascending according to their left boundary points.">'],
['list2 (IntervalTreeNode)', '(Memvar)', 'href="MEMVAR_Interval_Tree_Node_23list2.html" title="Sorted list of pointers to intervals, sorted in descending according to their right boundary points.">'],
['ListType', '(Metafunction)', 'href="METAFUNCTION_List_Type.html" title="Type of lists in tree nodes.">'],
['loadContig', '(Function)', 'href="FUNCTION.load_Contig.html" title="Manually loads a contig sequence.">'],
['loadContigs', '(Function)', 'href="FUNCTION.load_Contigs.html" title="Loads contigs into fragment store.">'],
['loadReads', '(Function)', 'href="FUNCTION.load_Reads.html" title="Loads reads into fragment store.">'],
['loadScoreMatrix', '(Function)', 'href="FUNCTION.load_Score_Matrix.html" title="Load a score matrix from a file.">'],
['Local Alignments', '(Demo)', 'href="DEMO_Local+_Alignments.html" title="Computing local alignments between two sequences.">'],
['Local Chaining', '(Tag)', 'href="TAG_Local+_Chaining.html" title="The local chaining algorithms to use when adding a seed to a Class.SeedSet.">'],
['localAlignment', '(Function)', 'href="FUNCTION.local_Alignment.html" title="Computes the best pairwise local alignment using the Smith-Waterman algorithm.">'],
['LocalAlignmentEnumerator', '(Class)', 'href="CLASS_Local_Alignment_Enumerator.html" title="Enumerate local alignments using the Waterman-Eggert algorithm.">'],
['LocalAlignmentEnumerator (Banded LocalAlignmentEnumerator)', '(Memfunc)', 'href="MEMFUNC_Banded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html" title="Constructor">'],
['LocalAlignmentEnumerator (Unbanded LocalAlignmentEnumerator)', '(Memfunc)', 'href="MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html" title="Constructor">'],
['LocalAlignmentFinder', '(Class)', 'href="CLASS_Local_Alignment_Finder.html" title="Stores the information necessary for local alignment dynamic programming.">'],
['LocalAlignmentFinder (LocalAlignmentFinder)', '(Memfunc)', 'href="MEMFUNC_Local_Alignment_Finder_23_Local_Alignment_Finder.html" title="Constructor">'],
['LocalMatch', '(Class)', 'href="CLASS_Local_Match.html" title="Stores information about local matches.">'],
['LocalMatchStore', '(Class)', 'href="CLASS_Local_Match_Store.html" title="Stores information about local matches.">'],
['LocalMatchStoreConfig', '(Class)', 'href="CLASS_Local_Match_Store_Config.html" title="Stores information about local matches.">'],
['lockContig', '(Function)', 'href="FUNCTION.lock_Contig.html" title="Locks a contig sequence from being removed.">'],
['lockContigs', '(Function)', 'href="FUNCTION.lock_Contigs.html" title="Locks all contig sequences from being removed.">'],
['Log-Normal Pdf', '(Spec)', 'href="SPEC_Log-_Normal+_Pdf.html" title="Log-normal probability density function.">'],
['log2', '(Function)', 'href="FUNCTION.log2.html" title="Computes floored logarithm of base 2 for integer types">'],
['Log2', '(Metafunction)', 'href="METAFUNCTION_Log2.html" title="Compute ceiled logarithm to base 2 using metaprogramming.">'],
['Log2Floor', '(Metafunction)', 'href="METAFUNCTION_Log2_Floor.html" title="Compute floored logarithm to base 2 using metaprogramming.">'],
['logarithmize', '(Function)', 'href="FUNCTION.logarithmize.html" title="Logarithmizes each element of a given Class.FrequencyDistribution object.">'],
['Logical Values', '(Tag)', 'href="TAG_Logical+_Values.html" title="Tag that represents true and false.">'],
['Lognormal Construction', '(Tag)', 'href="TAG_Lognormal+_Construction.html" title="Specify parameters for lognormal distribution construction.">'],
['LogProb', '(Class)', 'href="CLASS_Log_Prob.html" title="Value type for computation in log-space.">'],
['Longest Common Subsequence', '(Demo)', 'href="DEMO_Longest+_Common+_Subsequence.html" title="Longest common subsequence code example">'],
['Longest Increasing Subsequence', '(Demo)', 'href="DEMO_Longest+_Increasing+_Subsequence.html" title="Longest increasing subsequence code example">'],
['longestCommonSubsequence', '(Function)', 'href="FUNCTION.longest_Common_Subsequence.html" title="Computes the longest common subsequence.">'],
['longestIncreasingSubsequence', '(Function)', 'href="FUNCTION.longest_Increasing_Subsequence.html" title="Computes the longest increasing subsequence.">'],
['Loop', '(Metafunction)', 'href="METAFUNCTION_Loop.html" title="Metafunction returning a function that iterates over a static integer range.">'],
['LoopReverse', '(Metafunction)', 'href="METAFUNCTION_Loop_Reverse.html" title="Metafunction returning a function that iterates over a static integer range in reverse order.">'],
['lowerBoundAlignedReads', '(Function)', 'href="FUNCTION.lower_Bound_Aligned_Reads.html" title="Performs a binary lower bound search on the aligned reads.">'],
['lowerDiagonal (Seed)', '(Function)', 'href="FUNCTION_Seed_23lower_Diagonal.html" title="Returns the leftmost diagonal of the seed (minimum diagonal value).">'],
['Macros', '', '<a target=_parent href="INDEXPAGE_Macro.html">'],
['MakePacked', '(Metafunction)', 'href="METAFUNCTION_Make_Packed.html" title="Return the corresponding packed type of a type.">'],
['MakeSigned', '(Metafunction)', 'href="METAFUNCTION_Make_Signed.html" title="Converts an integral value into a signed integral value.">'],
['MakeUnsigned', '(Metafunction)', 'href="METAFUNCTION_Make_Unsigned.html" title="Converts an integral value into an unsigned integral value.">'],
['Map', '(Class)', 'href="CLASS_Map.html" title="Set/dictionary container.">'],
['mapFileSegment', '(Function)', 'href="FUNCTION.map_File_Segment.html" title="Map a segment of a file into memory.">'],
['MapperConfig', '(Spec)', 'href="SPEC_Mapper_Config.html" title="Configuration of Mapper.">'],
['MapperConfigSize', '(Spec)', 'href="SPEC_Mapper_Config_Size.html" title="Configuration of Mapper.">'],
['MapperSpec', '(Spec)', 'href="SPEC_Mapper_Spec.html" title="Permutes all elements using a custom destination function.">'],
['mapQ (BamAlignmentRecord)', '(Memvar)', 'href="MEMVAR_Bam_Alignment_Record_23map_Q.html" title="The mapping quality (255 for \'*\').">'],
['mapValue', '(Function)', 'href="FUNCTION.map_Value.html" title="Subscript operator [ ] of maps.">'],
['MapValue', '(Metafunction)', 'href="METAFUNCTION_Map_Value.html" title="Type of the map value type.">'],
['MarkovModel', '(Class)', 'href="CLASS_Markov_Model.html" title="Gives a suitable representation of a Marcov Chain.">'],
['MarkovModel (MarkovModel)', '(Memfunc)', 'href="MEMFUNC_Markov_Model_23_Markov_Model.html" title="Constructor">'],
['matchRefinement', '(Function)', 'href="FUNCTION.match_Refinement.html" title="Refines (i.e. cuts into smaller parts) a set of pairwise segment matches in such a way that none of the segments partly overlap. They are either identical (fully overlapping) or non-overlapping.">'],
['matchStore (LocalMatchStore)', '(Memvar)', 'href="MEMVAR_Local_Match_Store_23match_Store.html" title="Class.String storing the Class.LocalMatch|local matches.">'],
['matePairId (ReadStoreElement)', '(Memvar)', 'href="MEMVAR_Read_Store_Element_23mate_Pair_Id.html" title="Refers to a mate-pair in the Memvar.FragmentStore#matePairStore or is INVALID_ID if the read is not paired.">'],
['matePairNameStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23mate_Pair_Name_Store.html" title="Class.StringSet that maps from contigId to contigName.">'],
['matePairStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23mate_Pair_Store.html" title="Class.String that maps from matePairId to &lt;readId[2], libId>.">'],
['MatePairStoreElement', '(Class)', 'href="CLASS_Mate_Pair_Store_Element.html" title="Represents a mate-pair.">'],
['MatePairStoreElement (MatePairStoreElement)', '(Memfunc)', 'href="MEMFUNC_Mate_Pair_Store_Element_23_Mate_Pair_Store_Element.html" title="Constructor">'],
['Matrix', '(Class)', 'href="CLASS_Matrix.html" title="A simple n-dimensional matrix type.">'],
['Maximal Repeats', '(Demo)', 'href="DEMO_Maximal+_Repeats.html" title="Example for using the Spec.MaxRepeats Iterator.">'],
['Maximal Unique Matches', '(Demo)', 'href="DEMO_Maximal+_Unique+_Matches.html" title="Example for using the Spec.Mums Iterator.">'],
['Maximum Flow', '(Demo)', 'href="DEMO_Maximum+_Flow.html" title="Ford-Fulkerson maximum flow code example">'],
['MaxRepeats Iterator', '(Spec)', 'href="SPEC_Max_Repeats+_Iterator.html" title="Iterator to search for all maximal repeats.">'],
['maxValue', '(Function)', 'href="FUNCTION.max_Value.html" title="Supremum for a given type.">'],
['MaxValue', '(Metafunction)', 'href="METAFUNCTION_Max_Value.html" title="Supremum for a given type.">'],
['mean (LibraryStoreElement)', '(Memvar)', 'href="MEMVAR_Library_Store_Element_23mean.html" title="The library size mean.">'],
['memset', '(Function)', 'href="FUNCTION.memset.html" title="An implementation of memset with fixed number of bytes using Metaprogramming.">'],
['Mersenne Twister Rng', '(Spec)', 'href="SPEC_Mersenne+_Twister+_Rng.html" title="Mersenne Twister 19937 Random Number Generator">'],
['Metafunctions', '', '<a target=_parent href="INDEXPAGE_Metafunction.html">'],
['minScore (SeedSet)', '(Function)', 'href="FUNCTION_Seed_Set_23min_Score.html" title="Returns the threshold to distinguish between high-scoring and low-scoring seeds.">'],
['minValue', '(Function)', 'href="FUNCTION.min_Value.html" title="Infimum for a given type.">'],
['MinValue', '(Metafunction)', 'href="METAFUNCTION_Min_Value.html" title="Infimum for a given type.">'],
['mismatches (N2 AFScore)', '(Memvar)', 'href="MEMVAR_N2+_A_F_Score_23mismatches.html" title="Approximate word matches [0(exact)/1(one mismatch)]">'],
['mismatchWeight (N2 AFScore)', '(Memvar)', 'href="MEMVAR_N2+_A_F_Score_23mismatch_Weight.html" title="Weight for approximate word matches">'],
['MISSING_QUAL (VcfRecord)', '(Memfunc)', 'href="MEMFUNC_Vcf_Record_23_M_I_S_S_I_N_G___Q_U_A_L.html" title="Return IEEE NaN float value.">'],
['MMap String', '(Spec)', 'href="SPEC_M_Map+_String.html" title="String that is stored in external memory. Uses memory mapping.">'],
['mmapAdvise', '(Function)', 'href="FUNCTION.mmap_Advise.html" title="Call advise function for memory mapped files.">'],
['ModComplementDna', '(Shortcut)', 'href="SHORTCUT_Mod_Complement_Dna.html" title="Modifier specialization type for the complement of Spec.Dna alphabet sequences.">'],
['ModComplementDna5', '(Shortcut)', 'href="SHORTCUT_Mod_Complement_Dna5.html" title="Modifier specialization type for the complement of Spec.Dna5 alphabet sequences.">'],
['ModComplementRna', '(Shortcut)', 'href="SHORTCUT_Mod_Complement_Rna.html" title="Modifier specialization type for the complement of Spec.Rna alphabet sequences.">'],
['ModComplementRna5', '(Shortcut)', 'href="SHORTCUT_Mod_Complement_Rna5.html" title="Modifier specialization type for the complement of Spec.Rna5 alphabet sequences.">'],
['ModifiedAlphabet', '(Class)', 'href="CLASS_Modified_Alphabet.html" title="Modifies value types.">'],
['ModifiedIterator', '(Class)', 'href="CLASS_Modified_Iterator.html" title="Allows to modify arbitrary iterators by specializing what differs from an origin.">'],
['ModifiedString', '(Class)', 'href="CLASS_Modified_String.html" title="Allows to modify arbitrary strings by specializing what differs from an origin.">'],
['ModReverse', '(Demo)', 'href="DEMO_Mod_Reverse.html" title="Modifier example for reverse strings.">'],
['ModReverse', '(Spec)', 'href="SPEC_Mod_Reverse.html" title="Mirrors the characters from begin to end.">'],
['ModView', '(Demo)', 'href="DEMO_Mod_View.html" title="How to modify strings with a per-character functor.">'],
['ModView', '(Spec)', 'href="SPEC_Mod_View.html" title="Transforms the characters of the THost string/iterator using a custom function.">'],
['Motif', '(Metafunction)', 'href="METAFUNCTION_Motif.html" title="The string type of the finder.">'],
['Motif Finder', '(Demo)', 'href="DEMO_Motif+_Finder.html" title="Examples for how to start a motif search using SeqAn\'s Motif Finder.">'],
['motifCount', '(Function)', 'href="FUNCTION.motif_Count.html" title="Gets number of motifs in the Class.MotifFinder.">'],
['MotifFinder', '(Class)', 'href="CLASS_Motif_Finder.html" title="Holds the algorithm parameter values and the motif instance(s) found by the appropriate           motif discovery algorithm.">'],
['move', '(Function)', 'href="FUNCTION.move.html" title="Hands over content from one container to another container.">'],
['Move Switch', '(Tag)', 'href="TAG_Move+_Switch.html" title="Switch to force move.">'],
['moveHost', '(Function)', 'href="FUNCTION.move_Host.html" title="Assign to the host of a given value.">'],
['moveValue', '(Function)', 'href="FUNCTION.move_Value.html" title="Assigns value to item.">'],
['Multi Pool Allocator', '(Spec)', 'href="SPEC_Multi+_Pool+_Allocator.html" title="Allocator that pools memory blocks.">'],
['MultiBfam', '(Spec)', 'href="SPEC_Multi_Bfam.html" title="Multi-Pattern Backward Factor Automaton Matching.">'],
['MultiBfam&lt;Oracle&gt;', '(Spec)', 'href="SPEC_Multi_Bfam_3c_Oracle_3e.html" title="Multi-Pattern Backward Factor Automaton Matching using an oracle automaton.">'],
['MultiFasta', '(Shortcut)', 'href="SHORTCUT_Multi_Fasta.html" title="A sequence file mapped in memory as a StringSet of concatenated sequence file fragments.">'],
['MultiMems Iterator', '(Spec)', 'href="SPEC_Multi_Mems+_Iterator.html" title="Iterator to search for MultiMems.">'],
['MultipleShiftAnd', '(Spec)', 'href="SPEC_Multiple_Shift_And.html" title=" Multiple exact string matching using bit parallelism. The total size of the patterns should fit into a computer word.">'],
['MultiSeqFile', '(Shortcut)', 'href="SHORTCUT_Multi_Seq_File.html" title="A sequence file mapped in memory as a StringSet of concatenated sequence file fragments.">'],
['Mummy', '(Demo)', 'href="DEMO_Mummy.html" title="Simple MUMmer clone.">'],
['Mums Iterator', '(Spec)', 'href="SPEC_Mums+_Iterator.html" title="Iterator to search for all maximum unique matches.">'],
['MutableBidirectionalIteratorConcept', '(Concept)', 'href="CONCEPT_Mutable_Bidirectional_Iterator_Concept.html" title="A Concept.BidirectionalIteratorConcept|Bidirectional Iterator that allows dereferenced assignment">'],
['MutableForwardIteratorConcept', '(Concept)', 'href="CONCEPT_Mutable_Forward_Iterator_Concept.html" title="A Concept.ForwardIteratorConcept|Forward Iterator that allows dereferenced assignment.">'],
['MutableRandomAccessIteratorConcept', '(Concept)', 'href="CONCEPT_Mutable_Random_Access_Iterator_Concept.html" title="A Concept.RandomAccessIteratorConcept that allows assignable derefentiation.">'],
['MutableRootedIteratorConcept', '(Concept)', 'href="CONCEPT_Mutable_Rooted_Iterator_Concept.html" title="A Concept.RootedIteratorConcept|Rooted Iterator that allows dereferenced assignment.">'],
['MutableRootedRandomAccessIteratorConcept', '(Concept)', 'href="CONCEPT_Mutable_Rooted_Random_Access_Iterator_Concept.html" title="A Concept.RootedIteratorConcept|Rooted Iterator that allows dereferenced assignment.">'],
['Myers', '(Spec)', 'href="SPEC_Myers.html" title="Provides fast approximate searching of one string in another using Myer\'s fast bit-parallel algorithm with application of the Ukkonen-trick.">'],
['MyersUkkonen', '(Shortcut)', 'href="SHORTCUT_Myers_Ukkonen.html" title="Semin-global (query-global, text-local) pattern matching without findBegin() support.">'],
['MyersUkkonenBanded', '(Shortcut)', 'href="SHORTCUT_Myers_Ukkonen_Banded.html" title="Semin-global (query-global, text-local) pattern matching without findBegin() support.">'],
['MyersUkkonenGlobal', '(Shortcut)', 'href="SHORTCUT_Myers_Ukkonen_Global.html" title="Global (query-global, text-global) pattern matching without findBegin() support.">'],
['MyersUkkonenGlobalBanded', '(Shortcut)', 'href="SHORTCUT_Myers_Ukkonen_Global_Banded.html" title="global (query-global, text-global) pattern matching without findBegin() support.">'],
['N2 AFScore', '(Spec)', 'href="SPEC_N2+_A_F_Score.html" title="N2 computes the inner product of the standardised neighbourhood kmer count vectors">'],
['name (Bed4 BedRecord)', '(Memvar)', 'href="MEMVAR_Bed4+_Bed_Record_23name.html" title="The name of the interval (Shortcut.CharString).">'],
['Namer', '(Spec)', 'href="SPEC_Namer.html" title="Extends the input stream by a second field which names the elements.">'],
['nameStore (BamIOContext)', '(Function)', 'href="FUNCTION_Bam_I_O_Context_23name_Store.html" title="Return reference to name store from Class.BamIOContext.">'],
['nameStore (BedIOContext)', '(Function)', 'href="FUNCTION_Bed_I_O_Context_23name_Store.html" title="Return reference to name store from Class.BedIOContext.">'],
['nameStore (GffIOContext)', '(Function)', 'href="FUNCTION_Gff_I_O_Context_23name_Store.html" title="Return reference to name store from Class.GffIOContext.">'],
['NameStoreCache', '(Class)', 'href="CLASS_Name_Store_Cache.html" title="Stores a mapping from names to ids.">'],
['nameStoreCache (BamIOContext)', '(Function)', 'href="FUNCTION_Bam_I_O_Context_23name_Store_Cache.html" title="Return reference to name store cache from Class.BamIOContext.">'],
['nameStoreCache (BedIOContext)', '(Function)', 'href="FUNCTION_Bed_I_O_Context_23name_Store_Cache.html" title="Return reference to name store cache from Class.BedIOContext.">'],
['nameStoreCache (GffIOContext)', '(Function)', 'href="FUNCTION_Gff_I_O_Context_23name_Store_Cache.html" title="Return reference to name store cache from Class.GffIOContext.">'],
['NameStoreCache (NameStoreCache)', '(Memfunc)', 'href="MEMFUNC_Name_Store_Cache_23_Name_Store_Cache.html" title="Constructor">'],
['needle', '(Function)', 'href="FUNCTION.needle.html" title="Returns the needle of a Class.Pattern object (not implemented for some online-algorithms).">'],
['Needle', '(Metafunction)', 'href="METAFUNCTION_Needle.html" title="Returns the needle type of a Class.Pattern type.">'],
['Nested Modifiers', '(Demo)', 'href="DEMO_Nested+_Modifiers.html" title="How to combine modifiers.">'],
['nextIs (RecordReader)', '(Function)', 'href="FUNCTION_Record_Reader_23next_Is.html" title="Query whether the next record is of a given type.">'],
['nextLocalAlignment', '(Function)', 'href="FUNCTION.next_Local_Alignment.html" title="Compute next suboptimal local alignment.">'],
['nextS', '(Function)', 'href="FUNCTION.next_S.html" title="Accesses the next source pointer.">'],
['nextSiblingId (AnnotationStoreElement)', '(Memvar)', 'href="MEMVAR_Annotation_Store_Element_23next_Sibling_Id.html" title="The id of the right sibling annotation.">'],
['nextT', '(Function)', 'href="FUNCTION.next_T.html" title="Accesses the next target pointer.">'],
['NilCase', '(Tag)', 'href="TAG_Nil_Case.html" title="Metaprogramming default: case expression.">'],
['njTree', '(Function)', 'href="FUNCTION.nj_Tree.html" title="Computes a guide tree from a distance matrix.">'],
['nodeDepth', '(Function)', 'href="FUNCTION.node_Depth.html" title="Returns the zero-based node depth of the iterator node.">'],
['nodeDown (AnnotationTree Iterator)', '(Function)', 'href="FUNCTION_Annotation_Tree+_Iterator_23node_Down.html" title="Returns a new iterator to the first child node of the current annotation in the annotation tree.">'],
['nodeHullPredicate', '(Function)', 'href="FUNCTION.node_Hull_Predicate.html" title="If false this node and its subtree is concealed.">'],
['nodePredicate', '(Function)', 'href="FUNCTION.node_Predicate.html" title="If false this node will be skipped during the bottom-up traversal.">'],
['nodeRight (AnnotationTree Iterator)', '(Function)', 'href="FUNCTION_Annotation_Tree+_Iterator_23node_Right.html" title="Returns a new iterator to the right sibling of the current annotation in the annotation tree.">'],
['nodeUp (AnnotationTree Iterator)', '(Function)', 'href="FUNCTION_Annotation_Tree+_Iterator_23node_Up.html" title="Returns a new iterator to the parent node of the current annotation in the annotation tree.">'],
['nodeUp', '(Function)', 'href="FUNCTION.node_Up.html" title="Returns the vertex descriptor of the parent node.">'],
['NonHierarchical', '(Spec)', 'href="SPEC_Non_Hierarchical.html" title=" By using this Specialization the hierarchical verification is disabled.">'],
['Normal Pdf', '(Spec)', 'href="SPEC_Normal+_Pdf.html" title="Normal probability density function.">'],
['normalize', '(Function)', 'href="FUNCTION.normalize.html" title="Determines the normalized frequencies.">'],
['Not', '(Metafunction)', 'href="METAFUNCTION_Not.html" title="Metaprogramming boolean &quot;not&quot; operator.">'],
['NotC', '(Metafunction)', 'href="METAFUNCTION_Not_C.html" title="Metaprogramming boolean &quot;not&quot; operator, value variant.">'],
['Nothing', '(Tag)', 'href="TAG_Nothing.html" title="Tag that represents an absent parameter or an absent type.">'],
['nukeCopies', '(Function)', 'href="FUNCTION.nuke_Copies.html" title="Reset all pointers connected to a given one.">'],
['numberOfAllowedValues', '(Function)', 'href="FUNCTION.number_Of_Allowed_Values.html" title="Returns the number of allowed values for this Class.ArgParseArgument.">'],
['numChildren', '(Function)', 'href="FUNCTION.num_Children.html" title="Number of children of a given tree vertex.">'],
['numEdges', '(Function)', 'href="FUNCTION.num_Edges.html" title="Number of edges in a graph.">'],
['numSeqs (FaiIndex)', '(Function)', 'href="FUNCTION_Fai_Index_23num_Seqs.html" title="Return number of sequences known to an Class.FaiIndex.">'],
['numTreeEdges', '(Function)', 'href="FUNCTION.num_Tree_Edges.html" title="Number of tree edges.">'],
['numVertices', '(Function)', 'href="FUNCTION.num_Vertices.html" title="Number of vertices in a graph.">'],
['obtainId', '(Function)', 'href="FUNCTION.obtain_Id.html" title="Obtains a new id from the id manager.">'],
['Omops', '(Tag)', 'href="TAG_Omops.html" title="Represents the One or More Occurences Per Sequence model.">'],
['OneGappedShape', '(Spec)', 'href="SPEC_One_Gapped_Shape.html" title="A variable shape with one optional gap.">'],
['Oops', '(Tag)', 'href="TAG_Oops.html" title="Represents the One Occurrence Per Sequence model.">'],
['open (BamStream)', '(Function)', 'href="FUNCTION_Bam_Stream_23open.html" title="Open a Class.BamStream object for reading/writing.">'],
['open (BedStream)', '(Function)', 'href="FUNCTION_Bed_Stream_23open.html" title="Open a Class.BedStream.">'],
['open (CompressedSA)', '(Function)', 'href="FUNCTION_Compressed_S_A_23open.html" title="This functions opens a compressed suffix array from disk.">'],
['open (FileMapping)', '(Function)', 'href="FUNCTION_File_Mapping_23open.html" title="Open a file to be mapped into memory.">'],
['open (GffStream)', '(Function)', 'href="FUNCTION_Gff_Stream_23open.html" title="Open a Class.GffStream.">'],
['open (Index)', '(Function)', 'href="FUNCTION_Index_23open.html" title="This functions opens an index from disk.">'],
['open (LfTable)', '(Function)', 'href="FUNCTION_Lf_Table_23open.html" title="This functions loads a LF table from disk.">'],
['open (PrefixSumTable)', '(Function)', 'href="FUNCTION_Prefix_Sum_Table_23open.html" title="This functions loads a prefix-sum table from disk.">'],
['open (RankDictionary)', '(Function)', 'href="FUNCTION_Rank_Dictionary_23open.html" title="This functions loads a dictionary from disk.">'],
['open (RankSupportBitString)', '(Function)', 'href="FUNCTION_Rank_Support_Bit_String_23open.html" title="This functions saves a Class.RankSupportBitString to disk.">'],
['open (RightArrayBinaryTree)', '(Function)', 'href="FUNCTION_Right_Array_Binary_Tree_23open.html" title="This functions loads a Class.RightArrayBinaryTree from disk.">'],
['open (SentinelRankDictionary)', '(Function)', 'href="FUNCTION_Sentinel_Rank_Dictionary_23open.html" title="This functions loads a dictionary from disk.">'],
['open (SequenceStream)', '(Function)', 'href="FUNCTION_Sequence_Stream_23open.html" title="Open or re-open a file using a SequenceStream.">'],
['open (SparseString)', '(Function)', 'href="FUNCTION_Sparse_String_23open.html" title="This functions saves a sparse string to disk.">'],
['open (VcfStream)', '(Function)', 'href="FUNCTION_Vcf_Stream_23open.html" title="Open a Class.VcfStream.">'],
['open', '(Function)', 'href="FUNCTION.open.html" title="Opens a file, stream, or persistent string.">'],
['OpenAddressing', '(Spec)', 'href="SPEC_Open_Addressing.html" title="An index based on an array of sorted q-grams.">'],
['openTemp (FileMapping)', '(Function)', 'href="FUNCTION_File_Mapping_23open_Temp.html" title="Open a temporary file to be mapped into memory.">'],
['openTemp', '(Function)', 'href="FUNCTION.open_Temp.html" title="Opens a temporary file.">'],
['operation (CigarElement)', '(Memvar)', 'href="MEMVAR_Cigar_Element_23operation.html" title="The described operation.">'],
['operator delete', '(Function)', 'href="FUNCTION.operator+delete.html" title="C++ built-in deallocation operator.">'],
['operator delete[]', '(Function)', 'href="FUNCTION.operator+delete[].html" title="C++ built-in array deallocation operator.">'],
['operator new', '(Function)', 'href="FUNCTION.operator+new.html" title="C++ built-in allocation operator.">'],
['operator new[]', '(Function)', 'href="FUNCTION.operator+new[].html" title="C++ built-in array allocation operator operator.">'],
['operator!', '(Function)', 'href="FUNCTION.operator_21.html" title="C++ built-in logical negation operator.">'],
['operator!=', '(Function)', 'href="FUNCTION.operator_21=.html" title="C++ built-in inequal comparison operator.">'],
['operator%', '(Function)', 'href="FUNCTION.operator_25.html" title="C++ built-in modulo operator.">'],
['operator%=', '(Function)', 'href="FUNCTION.operator_25=.html" title="C++ built-in modulo assignment operator.">'],
['operator&amp;', '(Function)', 'href="FUNCTION.operator_26.html" title="C++ built-in bitwise AND operator.">'],
['operator&amp; (reference)', '(Function)', 'href="FUNCTION.operator_26+_28reference_29.html" title="C++ built-in reference/address-of operator.">'],
['operator&amp;&amp;', '(Function)', 'href="FUNCTION.operator_26_26.html" title="C++ built-in logical AND operator.">'],
['operator&amp;=', '(Function)', 'href="FUNCTION.operator_26=.html" title="C++ built-in bitwise AND assignment operator.">'],
['operator&gt;', '(Function)', 'href="FUNCTION.operator_3e.html" title="C++ built-in greater-than comparison operator.">'],
['operator&gt;&gt;', '(Function)', 'href="FUNCTION.operator_3e_3e.html" title="C++ built-in bitwise right shift operator.">'],
['operator&gt;&gt; (Stream)', '(Function)', 'href="FUNCTION.operator_3e_3e+_28_Stream_29.html" title="C++ built-in bitwise get-from/stream extraction operator.">'],
['operator&gt;&gt;=', '(Function)', 'href="FUNCTION.operator_3e_3e=.html" title="C++ built-in bitwise right shift assignment operator.">'],
['operator&gt;=', '(Function)', 'href="FUNCTION.operator_3e=.html" title="C++ built-in greather-than-or-equal comparison operator.">'],
['operator&lt;', '(Function)', 'href="FUNCTION.operator_3c.html" title="C++ built-in less-than comparison operator.">'],
['operator&lt;&lt;', '(Function)', 'href="FUNCTION.operator_3c_3c.html" title="C++ built-in bitwise left shift operator.">'],
['operator&lt;&lt; (Stream)', '(Function)', 'href="FUNCTION.operator_3c_3c+_28_Stream_29.html" title="C++ built-in bitwise put-to/stream insertion operator.">'],
['operator&lt;&lt;=', '(Function)', 'href="FUNCTION.operator_3c_3c=.html" title="C++ built-in bitwise left shift assignment operator.">'],
['operator&lt;=', '(Function)', 'href="FUNCTION.operator_3c=.html" title="C++ built-in less-than-or-equal comparison operator.">'],
['operator()', '(Function)', 'href="FUNCTION.operator_28_29.html" title="C++ built-in function call operator.">'],
['operator() (Rng)', '(Memfunc)', 'href="MEMFUNC_Rng_23operator_28_29.html" title="Function call operator.">'],
['operator*', '(Function)', 'href="FUNCTION.operator_2a.html" title="C++ built-in multiplication operator.">'],
['operator* (indirection)', '(Function)', 'href="FUNCTION.operator_2a+_28indirection_29.html" title="C++ built-in indirection/object-pointed-to-by operator.">'],
['operator*=', '(Function)', 'href="FUNCTION.operator_2a=.html" title="C++ built-in multiplication assignment operator.">'],
['operator+', '(Function)', 'href="FUNCTION.operator_2b.html" title="C++ built-in addition operator.">'],
['operator+ (unary)', '(Function)', 'href="FUNCTION.operator_2b+_28unary_29.html" title="C++ built-in unary plus (integer promotion) operator.">'],
['operator++ (prefix)', '(Function)', 'href="FUNCTION.operator_2b_2b+_28prefix_29.html" title="C++ built-in prefix increment operator.">'],
['operator++ (suffix)', '(Function)', 'href="FUNCTION.operator_2b_2b+_28suffix_29.html" title="C++ built-in suffix increment operator.">'],
['operator+=', '(Function)', 'href="FUNCTION.operator_2b=.html" title="C++ built-in addition assignment operator.">'],
['operator,', '(Function)', 'href="FUNCTION.operator_2c.html" title="C++ built-in comma operator.">'],
['operator-', '(Function)', 'href="FUNCTION.operator-.html" title="C++ built-in subtraction operator.">'],
['operator- (unary)', '(Function)', 'href="FUNCTION.operator-+_28unary_29.html" title="C++ built-in unary minus (additive inverse) operator.">'],
['operator-&gt;', '(Function)', 'href="FUNCTION.operator-_3e.html" title="C++ built-in structure dereference operator.">'],
['operator-&gt;*', '(Function)', 'href="FUNCTION.operator-_3e_2a.html" title="C++ built-in member-pointed-to-by-b-of-object-pointed-to-by-a operator.">'],
['operator-- (prefix)', '(Function)', 'href="FUNCTION.operator--+_28prefix_29.html" title="C++ built-in prefix decrement operator.">'],
['operator-- (suffix)', '(Function)', 'href="FUNCTION.operator--+_28suffix_29.html" title="C++ built-in suffix decrement operator.">'],
['operator-=', '(Function)', 'href="FUNCTION.operator-=.html" title="C++ built-in subtraction assignment operator.">'],
['operator/', '(Function)', 'href="FUNCTION.operator_2f.html" title="C++ built-in division operator.">'],
['operator/=', '(Function)', 'href="FUNCTION.operator_2f=.html" title="C++ built-in division assignment operator.">'],
['operator=', '(Function)', 'href="FUNCTION.operator=.html" title="C++ built-in Assignment operator.">'],
['operator==', '(Function)', 'href="FUNCTION.operator==.html" title="C++ built-in equal comparison operator.">'],
['operator[]', '(Function)', 'href="FUNCTION.operator[].html" title="C++ built-in array subscript operator.">'],
['operator^', '(Function)', 'href="FUNCTION.operator^.html" title="C++ built-in bitwise XOR operator.">'],
['operator^=', '(Function)', 'href="FUNCTION.operator^=.html" title="C++ built-in bitwise XOR assignment operator.">'],
['operator~', '(Function)', 'href="FUNCTION.operator~.html" title="C++ built-in bitwise NOT operator.">'],
['Or', '(Metafunction)', 'href="METAFUNCTION_Or.html" title="Metaprogramming boolean &quot;or&quot; operator.">'],
['Oracle', '(Spec)', 'href="SPEC_Oracle.html" title="A factor oracle.">'],
['OrC', '(Metafunction)', 'href="METAFUNCTION_Or_C.html" title="Metaprogramming boolean &quot;or&quot; operator, value variant.">'],
['order (MarkovModel)', '(Memvar)', 'href="MEMVAR_Markov_Model_23order.html" title="The MarkovModel order">'],
['OrderedAlphabetConcept', '(Concept)', 'href="CONCEPT_Ordered_Alphabet_Concept.html" title="Totally strict ordered alphabet.">'],
['orderOccurrences', '(Function)', 'href="FUNCTION.order_Occurrences.html" title="Sorts a string of occurrences.">'],
['ordValue', '(Function)', 'href="FUNCTION.ord_Value.html" title="Maps an alphabet 1-to-1 to the interval [0..ValueSize).">'],
['Out-Edge Iterator', '(Spec)', 'href="SPEC_Out-_Edge+_Iterator.html" title="Out-edge iterator for Class.Graph.">'],
['outDegree', '(Function)', 'href="FUNCTION.out_Degree.html" title="Number of outgoing edges for a given vertex.">'],
['outputFile (D2Star AFScore)', '(Memvar)', 'href="MEMVAR_D2_Star+_A_F_Score_23output_File.html" title=" When specified, all kmerWeights will be written to this file, for every sequence, and for every sequence comparison">'],
['outputFile (N2 AFScore)', '(Memvar)', 'href="MEMVAR_N2+_A_F_Score_23output_File.html" title=" When specified, all kmerWeights for every sequence will be written to this file">'],
['Overflow Strategy', '(Tag)', 'href="TAG_Overflow+_Strategy.html" title="The strategy for resizing containers.">'],
['Owner', '(Spec)', 'href="SPEC_Owner.html" title="A string set storing the strings as members.">'],
['Pack', '(Tag)', 'href="TAG_Pack.html" title="Tag to mark a packed specialization that disables address alignment for members.">'],
['Packed Pair', '(Spec)', 'href="SPEC_Packed+_Pair.html" title="Stores two arbitrary objects. Saves memory by disabling memory alignment.">'],
['Packed String', '(Spec)', 'href="SPEC_Packed+_String.html" title="A string that stores as many values in one machine word as possible.">'],
['Packed Triple', '(Spec)', 'href="SPEC_Packed+_Triple.html" title="Stores three arbitrary objects. Saves memory by disabling memory alignment.">'],
['Pair', '(Class)', 'href="CLASS_Pair.html" title="Stores two arbitrary objects.">'],
['Pair (Pair)', '(Memfunc)', 'href="MEMFUNC_Pair_23_Pair.html" title="Constructor">'],
['pairMatchId (AlignedReadStoreElement)', '(Memvar)', 'href="MEMVAR_Aligned_Read_Store_Element_23pair_Match_Id.html" title="Two read alignments having the same Memvar.AlignedReadStoreElement#pairMatchId form a valid pair match. If it equals Memvar.AlignedReadStoreElement#INVALID_ID, the read is either not paired or could not be aligned as part of a pair match.">'],
['pairScore (AlignQualityStoreElement)', '(Memvar)', 'href="MEMVAR_Align_Quality_Store_Element_23pair_Score.html" title="Combined score of both alignments of a pair match.">'],
['Pairwise Global Alignment Algorithms', '(Tag)', 'href="TAG_Pairwise+_Global+_Alignment+_Algorithms.html" title="Tags used for selecting pairwise global alignment algorithms.">'],
['Pairwise Local Alignment Algorithms', '(Tag)', 'href="TAG_Pairwise+_Local+_Alignment+_Algorithms.html" title="Tags used for selecting pairwise global alignment algorithms.">'],
['Pam120', '(Shortcut)', 'href="SHORTCUT_Pam120.html" title="Pam120 scoring matrix.">'],
['Pam200', '(Shortcut)', 'href="SHORTCUT_Pam200.html" title="Pam200 scoring matrix.">'],
['Pam250', '(Shortcut)', 'href="SHORTCUT_Pam250.html" title="Pam250 scoring matrix.">'],
['Pam40', '(Shortcut)', 'href="SHORTCUT_Pam40.html" title="Pam40 scoring matrix.">'],
['Parallel', '(Tag)', 'href="TAG_Parallel.html" title="Tag to select a parallel implementation of an algorithm.">'],
['parentEdgeFirstChar', '(Function)', 'href="FUNCTION.parent_Edge_First_Char.html" title="Returns the first character of the edge from an iterator node to its parent.">'],
['parentEdgeLabel', '(Function)', 'href="FUNCTION.parent_Edge_Label.html" title="Returns a substring representing the edge from an iterator node to its parent.">'],
['parentEdgeLength', '(Function)', 'href="FUNCTION.parent_Edge_Length.html" title="Returns the length of the edge from the iterator node to its parent.">'],
['parentId (AnnotationStoreElement)', '(Memvar)', 'href="MEMVAR_Annotation_Store_Element_23parent_Id.html" title="The id of the parent annotation.">'],
['parentRepLength', '(Function)', 'href="FUNCTION.parent_Rep_Length.html" title="Returns the length of the substring representing the path from root to iterator\'s parent node.">'],
['parentVertex', '(Function)', 'href="FUNCTION.parent_Vertex.html" title="Returns the parent vertex of an edge or vertex.">'],
['parse (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23parse.html" title="Parses the command line.">'],
['parse (GenomicRegion)', '(Function)', 'href="FUNCTION_Genomic_Region_23parse.html" title="Parse genomic region string store results in Class.GenomicRegion.">'],
['parseString', '(Function)', 'href="FUNCTION.parse_String.html" title="Parses a string one character at a time and moves accordingly in the automaton.">'],
['partialSum', '(Function)', 'href="FUNCTION.partial_Sum.html" title="Computes the partial sum of a sequence.">'],
['Pattern', '(Class)', 'href="CLASS_Pattern.html" title="Holds the needle and preprocessing data (depends on algorithm).">'],
['Pattern', '(Concept)', 'href="CONCEPT_Pattern.html" title="Object that stores information about the glos:needle of a search.">'],
['Pdf', '(Class)', 'href="CLASS_Pdf.html" title="ProbabilityDensityFunction">'],
['Pdf (Beta Pdf)', '(Memfunc)', 'href="MEMFUNC_Beta+_Pdf_23_Pdf.html" title="Constructor for beta Pdf.">'],
['Pdf (Geometric Pdf)', '(Memfunc)', 'href="MEMFUNC_Geometric+_Pdf_23_Pdf.html" title="Constructor for geometric Pdf.">'],
['Pdf (Log-Normal Pdf)', '(Memfunc)', 'href="MEMFUNC_Log-_Normal+_Pdf_23_Pdf.html" title="Constructor for log-normal Pdf. Log-normal PDFs can either be initialized by the mean and standard deviation of the underlying normal distribution or directly of the log-normal distribution.">'],
['Pdf (Normal Pdf)', '(Memfunc)', 'href="MEMFUNC_Normal+_Pdf_23_Pdf.html" title="Constructor for normal Pdf.">'],
['Pdf (Uniform Pdf)', '(Memfunc)', 'href="MEMFUNC_Uniform+_Pdf_23_Pdf.html" title="Constructor for uniform Pdf.">'],
['Peptide', '(Shortcut)', 'href="SHORTCUT_Peptide.html" title="A string of Spec.AminoAcid.">'],
['PeptideIterator', '(Shortcut)', 'href="SHORTCUT_Peptide_Iterator.html" title="Iterator for Shortcut.Peptide.">'],
['period (Repeat)', '(Memvar)', 'href="MEMVAR_Repeat_23period.html" title="The period of the repeat of type TSize.">'],
['Pex', '(Spec)', 'href="SPEC_Pex.html" title=" Provides a fast approximate string matching filter that splits the needle into several pieces that are searched with a multiple exact string matching algorithm and later verified.">'],
['PexMultiFinder', '(Metafunction)', 'href="METAFUNCTION_Pex_Multi_Finder.html" title="Determines the multiple exact string matching algorithm used by the Pex algorithm.">'],
['phase (GffRecord)', '(Memvar)', 'href="MEMVAR_Gff_Record_23phase.html" title="The phase of the record.">'],
['pickRandomNumber', '(Function)', 'href="FUNCTION.pick_Random_Number.html" title="Pick a random number using a random number generator object, possibly following the given distribution.">'],
['Pigeonhole', '(Spec)', 'href="SPEC_Pigeonhole.html" title="Provides a fast filter alogrithm that uses the pigeonhole lemma, i.e. if a pattern matches with k errors in the text, every partition into k+1 parts contains one part that matches without error.">'],
['Pipe', '(Class)', 'href="CLASS_Pipe.html" title="Pipes are pop-passive pipeline modules.">'],
['Pipe (Filter)', '(Memfunc)', 'href="MEMFUNC_Filter_23_Pipe.html" title="Constructor">'],
['Pipe (Namer)', '(Memfunc)', 'href="MEMFUNC_Namer_23_Pipe.html" title="Constructor">'],
['Pipe (Pipe)', '(Memfunc)', 'href="MEMFUNC_Pipe_23_Pipe.html" title="Constructor">'],
['Pizza &amp; Chili Index', '(Spec)', 'href="SPEC_Pizza+_26+_Chili+_Index.html" title="An adapter for the Pizza & Chili index API.">'],
['Pizza &amp; Chili Index Fibres', '(Tag)', 'href="TAG_Pizza+_26+_Chili+_Index+_Fibres.html" title="Tag to select a specific fibre (e.g. table, object, ...) of a Spec.Pizza & Chili Index index.">'],
['Pizza &amp; Chili Index Tags', '(Tag)', 'href="TAG_Pizza+_26+_Chili+_Index+_Tags.html" title="Tag specifying the Pizza & Chili library to use.">'],
['Pizza &amp; Chili String', '(Spec)', 'href="SPEC_Pizza+_26+_Chili+_String.html" title="String used by the Pizza & Chili indices.">'],
['PMode', '(Spec)', 'href="SPEC_P_Mode.html" title=" Represents the P computation scheme for handling &quot;zero&quot; probabilities.">'],
['Pms1', '(Spec)', 'href="SPEC_Pms1.html" title=" Represents the Pms1 algorithm developed by Rajasekaran et al.">'],
['Pmsp', '(Spec)', 'href="SPEC_Pmsp.html" title=" Represents the Pmsp algorithm of Davila et al.">'],
['pNext (BamAlignmentRecord)', '(Memvar)', 'href="MEMVAR_Bam_Alignment_Record_23p_Next.html" title="Position of next fragment mapping (0-based, INVALID_POS for \'*\')">'],
['point (PointAndCargo)', '(Memvar)', 'href="MEMVAR_Point_And_Cargo_23point.html" title="The stored point of type TValue.">'],
['PointAndCargo', '(Class)', 'href="CLASS_Point_And_Cargo.html" title="Simple record class storing a point (one-value interval) and a cargo.">'],
['PointAndCargo (PointAndCargo)', '(Memfunc)', 'href="MEMFUNC_Point_And_Cargo_23_Point_And_Cargo.html" title="Constructor.">'],
['Pointer', '(Metafunction)', 'href="METAFUNCTION_Pointer.html" title="Returns pointer to an object, required for Function.operator->, for example.">'],
['Points Only Tree Node', '(Spec)', 'href="SPEC_Points+_Only+_Tree+_Node.html" title="Spec for IntervalTreeNode that stores only the relevant point in each node meaning the endpoint of the interval in the list sorted by endpoints (list2) and only the beginpoint of the interval in the list sorted by beginpoints (list1).">'],
['Pool', '(Class)', 'href="CLASS_Pool.html" title="Pools are push- and pop-passive pipeline modules.">'],
['PoolConfig', '(Spec)', 'href="SPEC_Pool_Config.html" title="Configuration of Pool.">'],
['PoolConfigSize', '(Spec)', 'href="SPEC_Pool_Config_Size.html" title="Configuration of Pool.">'],
['PoolSpec', '(Spec)', 'href="SPEC_Pool_Spec.html" title="Stores/Retrieves all elements to/from disk.">'],
['pop (PriorityType)', '(Function)', 'href="FUNCTION_Priority_Type_23pop.html" title="Deletes item with the highest priority and adjusts the priority queue.">'],
['pop', '(Function)', 'href="FUNCTION.pop.html" title="Pops the first element of the remaining stream.">'],
['popCount', '(Function)', 'href="FUNCTION.pop_Count.html" title="Returns number of set bits in an integer.">'],
['posAdd', '(Function)', 'href="FUNCTION.pos_Add.html" title="Returns a position where the local offset is increased by a value delta.">'],
['posAddAndCheck', '(Function)', 'href="FUNCTION.pos_Add_And_Check.html" title="Increases the local offset of a position by a value delta and check for overflow.">'],
['posGlobalize', '(Function)', 'href="FUNCTION.pos_Globalize.html" title="Converts a local/global to a global position.">'],
['posInc', '(Function)', 'href="FUNCTION.pos_Inc.html" title="Increments the local offset of a position type.">'],
['position (ConsensusScoreSequenceEntry)', '(Function)', 'href="FUNCTION_Consensus_Score_Sequence_Entry_23position.html" title="Returns position stored in entry.">'],
['position (RecordReader)', '(Function)', 'href="FUNCTION_Record_Reader_23position.html" title="Returns the current position of the reader.">'],
['position', '(Function)', 'href="FUNCTION.position.html" title="Position of an iterator.">'],
['Position', '(Metafunction)', 'href="METAFUNCTION_Position.html" title="Type of an object that represents a position in a container.">'],
['Position (RecordReader)', '(Metafunction)', 'href="METAFUNCTION_Record_Reader_23_Position.html" title="Returns the position type to use in Function.RecordReader#position and Function.RecordReader#setPosition.">'],
['Position (Seed)', '(Metafunction)', 'href="METAFUNCTION_Seed_23_Position.html" title="The position type of a Class.Seed.">'],
['Position (SeedDiagonal)', '(Metafunction)', 'href="METAFUNCTION_Seed_Diagonal_23_Position.html" title="The position type of a Class.SeedDiagonal.">'],
['Position Iterator', '(Spec)', 'href="SPEC_Position+_Iterator.html" title="Adapts Metafunction.Position|Position Iterator to Concept.RootedIteratorConcept|Rooted Iterator.">'],
['positionGapToSeq', '(Function)', 'href="FUNCTION.position_Gap_To_Seq.html" title="Convert from gap-space in the global alignment to the sequence-space on the reference.">'],
['positionRange', '(Function)', 'href="FUNCTION.position_Range.html" title="Returns a pair of the begin and end position in the haystack or needle for the last hit found.">'],
['positionRangeNoClip', '(Function)', 'href="FUNCTION.position_Range_No_Clip.html" title="Returns a pair of the begin and end position in or beyond the haystack or needle for the last hit found.">'],
['positionSeqToGap', '(Function)', 'href="FUNCTION.position_Seq_To_Gap.html" title="Convert from sequence space on the reference to gap space in the global alignment.">'],
['positionToId', '(Function)', 'href="FUNCTION.position_To_Id.html" title="Retrieves the id of a string in the StringSet given a position.">'],
['posLocalize', '(Function)', 'href="FUNCTION.pos_Localize.html" title="Converts a local/global to a local position.">'],
['posLocalToX', '(Function)', 'href="FUNCTION.pos_Local_To_X.html" title="Converts a local to a local/global position.">'],
['posNext', '(Function)', 'href="FUNCTION.pos_Next.html" title="Returns a position where the local offset is increased by one.">'],
['posOfMax', '(Function)', 'href="FUNCTION.pos_Of_Max.html" title="Determines the residue position in a given Class.FrequencyDistribution object with the maximum frequency.">'],
['posPrev', '(Function)', 'href="FUNCTION.pos_Prev.html" title="Returns a position where the local offset is decreased by one.">'],
['posSub', '(Function)', 'href="FUNCTION.pos_Sub.html" title="Returns a position where the local offset is decreased by a value delta.">'],
['Power', '(Metafunction)', 'href="METAFUNCTION_Power.html" title="Compute power of a number.">'],
['Predefined Annotation Types', '(Enum)', 'href="ENUM_Predefined+_Annotation+_Types.html" title="Predefined annotation type ids.">'],
['prefix', '(Function)', 'href="FUNCTION.prefix.html" title="Creates prefix object.">'],
['Prefix', '(Metafunction)', 'href="METAFUNCTION_Prefix.html" title="Prefix sequence type.">'],
['Prefix Order', '(Tag)', 'href="TAG_Prefix+_Order.html" title="Specify whether less-than or greather-than comparison is meant.">'],
['PrefixSegment', '(Spec)', 'href="SPEC_Prefix_Segment.html" title="First part of a sequence.">'],
['prefixSum (PrefixSumTable)', '(Function)', 'href="FUNCTION_Prefix_Sum_Table_23prefix_Sum.html" title="Returns a reference to the entry of the prefix sum table of a given position.">'],
['PrefixSumTable', '(Class)', 'href="CLASS_Prefix_Sum_Table.html" title="The prefix-sum table is a data structure which stores for each character the number of smaller lexicographic smaller characters in a given text.">'],
['PrefixSumTable Fibres', '(Tag)', 'href="TAG_Prefix_Sum_Table+_Fibres.html" title="Tag to select a specific fibre of a Class.CompressedSA.">'],
['prependValue', '(Function)', 'href="FUNCTION.prepend_Value.html" title="Prepend a value to a container.">'],
['Prims Algorithm', '(Demo)', 'href="DEMO_Prims+_Algorithm.html" title="Prim\'s algorithm for computing a minimum spanning tree.">'],
['primsAlgorithm', '(Function)', 'href="FUNCTION.prims_Algorithm.html" title="Computes a minimum spanning tree on a graph.">'],
['print (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23print.html" title="Print Class.ToolDoc object in a given format.">'],
['printAlignment', '(Function)', 'href="FUNCTION.print_Alignment.html" title="Prints a window of the visible layout of reads into a outstream.">'],
['printDebugLevel', '(Function)', 'href="FUNCTION.print_Debug_Level.html" title="Print the current SeqAn debug level and the compiler flags to the given stream.">'],
['printHelp (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23print_Help.html" title="Prints the complete help message for the parser to a stream.">'],
['printShortHelp (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23print_Short_Help.html" title="Prints a short help message for the parser to a stream">'],
['printVersion (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23print_Version.html" title="Prints the version information of the parser to a stream.">'],
['PriorityHeap', '(Spec)', 'href="SPEC_Priority_Heap.html" title="Stores the priority data on a heap.">'],
['PriorityType', '(Class)', 'href="CLASS_Priority_Type.html" title="Stores items in such a way that the item with the highest priority is at the top.">'],
['ProfileChar', '(Class)', 'href="CLASS_Profile_Char.html" title="Alphabet type for profiles over another alphabet.">'],
['progressiveAlignment', '(Function)', 'href="FUNCTION.progressive_Alignment.html" title="Performs a progressive alignment.">'],
['Projection', '(Spec)', 'href="SPEC_Projection.html" title=" Represents the PROJECTION algorithm of Buhler and Tompa.">'],
['property', '(Function)', 'href="FUNCTION.property.html" title="Accesses the property of an item in the property map.">'],
['Proxy', '(Class)', 'href="CLASS_Proxy.html" title="Emulates object of another class.">'],
['Pseudocount', '(Class)', 'href="CLASS_Pseudocount.html" title="Holds the pseudocounts for each residue of a given sequence alphabet.">'],
['push (Accumulator)', '(Function)', 'href="FUNCTION_Accumulator_23push.html" title="Adds a value to an accumulator.">'],
['push (PriorityType)', '(Function)', 'href="FUNCTION_Priority_Type_23push.html" title="Inserts a new item and adjusts the priority queue if necessary.">'],
['push', '(Function)', 'href="FUNCTION.push.html" title="Appends an item at the end of an input stream.">'],
['QGram Index Fibres', '(Tag)', 'href="TAG_Q_Gram+_Index+_Fibres.html" title="Tag to select a specific fibre (e.g. table, object, ...) of a Spec.IndexQGram.q-gram Index.">'],
['qName (BamAlignmentRecord)', '(Memvar)', 'href="MEMVAR_Bam_Alignment_Record_23q_Name.html" title="The read/query name.">'],
['qual (BamAlignmentRecord)', '(Memvar)', 'href="MEMVAR_Bam_Alignment_Record_23qual.html" title="String with Phred scores (as in SAM file, empty for \'*\').">'],
['qual (VcfRecord)', '(Memvar)', 'href="MEMVAR_Vcf_Record_23qual.html" title="Quality, NaN if invalid (float).">'],
['QualityValueSize', '(Metafunction)', 'href="METAFUNCTION_Quality_Value_Size.html" title="Return the number of quality values in characters from alphabet with qualities.">'],
['qualMeta (SequenceOutputOptions)', '(Memvar)', 'href="MEMVAR_Sequence_Output_Options_23qual_Meta.html" title="Whether or not to write the meta information into the &quot;+&quot; line before the qualities (interpreted for FASTQ only). Default is false.">'],
['queryBeginPos (LocalMatch)', '(Memvar)', 'href="MEMVAR_Local_Match_23query_Begin_Pos.html" title="Begin position of local match in the query.">'],
['queryEndPos (LocalMatch)', '(Memvar)', 'href="MEMVAR_Local_Match_23query_End_Pos.html" title="End position of local match in the query.">'],
['queryId (LocalMatch)', '(Memvar)', 'href="MEMVAR_Local_Match_23query_Id.html" title="The id of the query.">'],
['RandomAccessIteratorConcept', '(Concept)', 'href="CONCEPT_Random_Access_Iterator_Concept.html" title="An iterator allowing random access.">'],
['range', '(Function)', 'href="FUNCTION.range.html" title="Returns the suffix array interval borders of occurrences of Function.representative substring or a q-gram in the index text.">'],
['RankDictionary', '(Class)', 'href="CLASS_Rank_Dictionary.html" title="A rank dictionary is a data structure to store the rank of an element of a sequence at every position of the sequence.">'],
['RankSupportBitString', '(Class)', 'href="CLASS_Rank_Support_Bit_String.html" title="A bit string supporting rank queries in constant time.">'],
['RankSupportBitString Fibres', '(Tag)', 'href="TAG_Rank_Support_Bit_String+_Fibres.html" title="Tag to select a specific fibre (e.g. table, object, ...) of a Class.RankSupportBitString.">'],
['rawsaAt', '(Function)', 'href="FUNCTION.rawsa_At.html" title="Shortcut for value(indexRawSA(..), ..).">'],
['rawtextAt', '(Function)', 'href="FUNCTION.rawtext_At.html" title="Shortcut for value(indexRawText(..), ..).">'],
['read (BamIndex)', '(Function)', 'href="FUNCTION_Bam_Index_23read.html" title="Load a BAM index from a given file name.">'],
['read (FaiIndex)', '(Function)', 'href="FUNCTION_Fai_Index_23read.html" title="Read a FAI index.">'],
['read (FileFormat)', '(Function)', 'href="FUNCTION_File_Format_23read.html" title="Loads a record from file.">'],
['read (VCF I/O)', '(Function)', 'href="FUNCTION_V_C_F+_I_2f_O_23read.html" title="Read a Class.VcfHeader.">'],
['read', '(Function)', 'href="FUNCTION.read.html" title="Loads records from a file.">'],
['read (MarkovModel)', '(Memfunc)', 'href="MEMFUNC_Markov_Model_23read.html" title=" Loads an instance of MarkovModel from a file">'],
['read2', '(Function)', 'href="FUNCTION.read2.html" title="reads an entire document from a Concept.StreamConcept, by the means of Class.RecordReader">'],
['readAll (SequenceStream)', '(Function)', 'href="FUNCTION_Sequence_Stream_23read_All.html" title="Read all sequence records from a Class.SequenceStream object.">'],
['readAlphaNums', '(Function)', 'href="FUNCTION.read_Alpha_Nums.html" title="Read characters from stream as long as characters are letters">'],
['readAt', '(Function)', 'href="FUNCTION.read_At.html" title="Loads records from a specific position in a file.">'],
['readBatch (SequenceStream)', '(Function)', 'href="FUNCTION_Sequence_Stream_23read_Batch.html" title="Read a given number of sequence records from Class.SequenceStream.">'],
['readDigits', '(Function)', 'href="FUNCTION.read_Digits.html" title="Read characters from stream as long as characters are digits">'],
['readDna5IgnoringWhitespaces', '(Function)', 'href="FUNCTION.read_Dna5_Ignoring_Whitespaces.html" title="Read characters from stream, as long as they are DNA5 characters. Skip over whitespaces.">'],
['readFasta', '(Function)', 'href="FUNCTION.read_Fasta.html" title="Read first sequence from a FASTA file.">'],
['readFeature', '(Function)', 'href="FUNCTION.read_Feature.html" title="Finds the first feature specified by \'key\' starting from position \'start\' in the feature table (the feature table can be obtained by calling readLineType with the two-character code &quot;FT&quot;).">'],
['readFloat', '(Function)', 'href="FUNCTION.read_Float.html" title="Read characters from stream as long as the number is a valid floating point numbers.">'],
['readGraphs', '(Function)', 'href="FUNCTION.read_Graphs.html" title="Read characters from stream as long as characters are graph characters.">'],
['readId (AlignedReadStoreElement)', '(Memvar)', 'href="MEMVAR_Aligned_Read_Store_Element_23read_Id.html" title="Refers to the aligned read in the Memvar.FragmentStore#readStore.">'],
['readId[2] (MatePairStoreElement)', '(Memvar)', 'href="MEMVAR_Mate_Pair_Store_Element_23read_Id[2].html" title="Refers to two paired reads in the Memvar.FragmentStore#readStore or contains INVALID_ID values.">'],
['readIdentifier', '(Function)', 'href="FUNCTION.read_Identifier.html" title="Read characters from stream as long as characters are identifiers (alphanumeric, \'-\', and \'_\').">'],
['readLetters', '(Function)', 'href="FUNCTION.read_Letters.html" title="Read characters from stream as long as characters are letters">'],
['readLine', '(Function)', 'href="FUNCTION.read_Line.html" title="Read a line from stream and save it to buffer">'],
['readLineStripTrailingBlanks', '(Function)', 'href="FUNCTION.read_Line_Strip_Trailing_Blanks.html" title="Read a line from stream and save it to buffer, remove trailing blanks">'],
['readLineType', '(Function)', 'href="FUNCTION.read_Line_Type.html" title="Reads the information belonging to the two-character line code specified.">'],
['readMeta', '(Function)', 'href="FUNCTION.read_Meta.html" title="Read meta information from file.">'],
['readNameStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23read_Name_Store.html" title="Class.StringSet that maps from readId to readName.">'],
['readNChars', '(Function)', 'href="FUNCTION.read_N_Chars.html" title="Read exactly n characters from stream into buffer">'],
['readNCharsIgnoringWhitespace', '(Function)', 'href="FUNCTION.read_N_Chars_Ignoring_Whitespace.html" title="Read n characters from stream into buffer, but skip certain Chars">'],
['readRecord (BamStream)', '(Function)', 'href="FUNCTION_Bam_Stream_23read_Record.html" title="Read one Class.BamAlignmentRecord from a Class.BamStream.">'],
['readRecord (BedRecord)', '(Function)', 'href="FUNCTION_Bed_Record_23read_Record.html" title="Read a BED record from a file.">'],
['readRecord (BedStream)', '(Function)', 'href="FUNCTION_Bed_Stream_23read_Record.html" title="Read a record from a Class.BedStream">'],
['readRecord (GffRecord)', '(Function)', 'href="FUNCTION_Gff_Record_23read_Record.html" title="Read one gff record.">'],
['readRecord (GffStream)', '(Function)', 'href="FUNCTION_Gff_Stream_23read_Record.html" title="Read a record from a Class.GffStream">'],
['readRecord (LocalMatchStore)', '(Function)', 'href="FUNCTION_Local_Match_Store_23read_Record.html" title="Read Lastz &quot;general&quot; format record.">'],
['readRecord (SequenceStream)', '(Function)', 'href="FUNCTION_Sequence_Stream_23read_Record.html" title="Read the next sequence record from Class.SequenceStream.">'],
['readRecord (VCF I/O)', '(Function)', 'href="FUNCTION_V_C_F+_I_2f_O_23read_Record.html" title="Read a Class.VcfRecord from a Spec.Single-Pass RecordReader.">'],
['readRecord (VcfStream)', '(Function)', 'href="FUNCTION_Vcf_Stream_23read_Record.html" title="Read a record from a Class.VcfStream">'],
['readRecord', '(Function)', 'href="FUNCTION.read_Record.html" title="reads one record (e.g. a single DNA-sequence and its meta data) from a Concept.StreamConcept, by the means of Class.RecordReader">'],
['readRegion (FaiIndex)', '(Function)', 'href="FUNCTION_Fai_Index_23read_Region.html" title="Load the infix of a sequence from a Class.FaiIndex.">'],
['readSeqStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23read_Seq_Store.html" title="Class.StringSet that maps from readId to readSeq.">'],
['readSequence (FaiIndex)', '(Function)', 'href="FUNCTION_Fai_Index_23read_Sequence.html" title="Load a whole sequence from an Class.FaiIndex.">'],
['readStore (FragmentStore)', '(Memvar)', 'href="MEMVAR_Fragment_Store_23read_Store.html" title="Class.String that maps from readId to &lt;matePairId>.">'],
['ReadStoreElement', '(Class)', 'href="CLASS_Read_Store_Element.html" title="Represents a single read (without sequence).">'],
['ReadStoreElement (ReadStoreElement)', '(Memfunc)', 'href="MEMFUNC_Read_Store_Element_23_Read_Store_Element.html" title="Constructor">'],
['readUntilBlank', '(Function)', 'href="FUNCTION.read_Until_Blank.html" title="Read characters from stream into buffer until Blank is encountered">'],
['readUntilChar', '(Function)', 'href="FUNCTION.read_Until_Char.html" title="Read characters from stream into buffer until Char is encountered">'],
['readUntilOneOf', '(Function)', 'href="FUNCTION.read_Until_One_Of.html" title="Read characters from stream into buffer until one of the given characters is encountered">'],
['readUntilTabOrLineBreak', '(Function)', 'href="FUNCTION.read_Until_Tab_Or_Line_Break.html" title="Read characters from stream until a tab or line-break occurs.">'],
['readUntilWhitespace', '(Function)', 'href="FUNCTION.read_Until_Whitespace.html" title="Read characters from stream into buffer until Whitespace is encountered">'],
['reAlign', '(Function)', 'href="FUNCTION.re_Align.html" title="Perform realignment similar to Anson-Myers algorithm.">'],
['RecordReader', '(Class)', 'href="CLASS_Record_Reader.html" title="Buffer management for streams.">'],
['RecordReader (RecordReader)', '(Memfunc)', 'href="MEMFUNC_Record_Reader_23_Record_Reader.html" title="Constructor">'],
['records (BamHeader)', '(Memvar)', 'href="MEMVAR_Bam_Header_23records.html" title="String of Class.BamHeaderRecord|BamHeaderRecords.">'],
['red (BedRgb)', '(Memvar)', 'href="MEMVAR_Bed_Rgb_23red.html" title="Red value of RGB color (default is 0).">'],
['ref (BedRecord)', '(Memvar)', 'href="MEMVAR_Bed_Record_23ref.html" title="Name of the interval\'s reference (Shortcut.CharString).">'],
['ref (GffRecord)', '(Memvar)', 'href="MEMVAR_Gff_Record_23ref.html" title="The sequence id of the record.">'],
['ref (VcfRecord)', '(Memvar)', 'href="MEMVAR_Vcf_Record_23ref.html" title="Bases in the reference (Shortcut.CharString).">'],
['Reference (Chained Seed)', '(Metafunction)', 'href="METAFUNCTION_Chained+_Seed_23_Reference.html" title="The seed diagonal reference type.">'],
['Reference', '(Metafunction)', 'href="METAFUNCTION_Reference.html" title="Reference type.">'],
['refresh', '(Function)', 'href="FUNCTION.refresh.html" title="Recreate a name store cache.">'],
['releaseAll', '(Function)', 'href="FUNCTION.release_All.html" title="Releases all ids handled by this id manager at once.">'],
['releaseId', '(Function)', 'href="FUNCTION.release_Id.html" title="Releases a given id so it can be redistributed later on.">'],
['remapFileSegment', '(Function)', 'href="FUNCTION.remap_File_Segment.html" title="Change the size of a memory-mapped file segment.">'],
['removeAllChildren', '(Function)', 'href="FUNCTION.remove_All_Children.html" title="Removes all children from the tree given a parent.">'],
['removeChild', '(Function)', 'href="FUNCTION.remove_Child.html" title="Removes a child from the tree given a parent.">'],
['RemoveConst', '(Metafunction)', 'href="METAFUNCTION_Remove_Const.html" title="Converts a (const) type into the corresponding non-const type.">'],
['removeEdge', '(Function)', 'href="FUNCTION.remove_Edge.html" title="Removes an edge from the graph. For automatons a label is required.">'],
['removeGap', '(Function)', 'href="FUNCTION.remove_Gap.html" title="Remove one gap from a gapped sequence.">'],
['removeGaps', '(Function)', 'href="FUNCTION.remove_Gaps.html" title="Remove multiple gaps from a gapped sequence.">'],
['removeInEdges', '(Function)', 'href="FUNCTION.remove_In_Edges.html" title="Removes the incoming edges of a given vertex.">'],
['removeInterval', '(Function)', 'href="FUNCTION.remove_Interval.html" title="Removes an interval from the interval tree.">'],
['removeOutEdges', '(Function)', 'href="FUNCTION.remove_Out_Edges.html" title="Removes the outgoing edges of a given vertex.">'],
['RemoveReference', '(Metafunction)', 'href="METAFUNCTION_Remove_Reference.html" title="Converts a (reference) type into the same type without reference.">'],
['removeValueById', '(Function)', 'href="FUNCTION.remove_Value_By_Id.html" title="Removes a string from the StringSet given an id.">'],
['removeVertex', '(Function)', 'href="FUNCTION.remove_Vertex.html" title="Removes a vertex.">'],
['Repeat', '(Class)', 'href="CLASS_Repeat.html" title="Store information about a repeat.">'],
['replace', '(Function)', 'href="FUNCTION.replace.html" title="Replaces a part of a container with another container.">'],
['repLength', '(Function)', 'href="FUNCTION.rep_Length.html" title="Returns the length of the substring representing the path from root to iterator node.">'],
['representative', '(Function)', 'href="FUNCTION.representative.html" title="Returns a substring representing the path from root to iterator node.">'],
['requireBooleanExpr', '(Function)', 'href="FUNCTION.require_Boolean_Expr.html" title="Tests for a boolean expression.">'],
['reSeed', '(Function)', 'href="FUNCTION.re_Seed.html" title="Reset and re-seed MersenneTwister">'],
['reserve', '(Function)', 'href="FUNCTION.reserve.html" title="Increases the capacity.">'],
['reset (BamStream)', '(Function)', 'href="FUNCTION_Bam_Stream_23reset.html" title="Reset Class.BamStream object to status after construction.">'],
['resize (FileMapping)', '(Function)', 'href="FUNCTION_File_Mapping_23resize.html" title="Resize the underlying file.">'],
['resize (PrefixSumTable)', '(Function)', 'href="FUNCTION_Prefix_Sum_Table_23resize.html" title="Resize the prefix sum table to be able to store more or less characters.">'],
['resize', '(Function)', 'href="FUNCTION.resize.html" title="Resizes a container. If the new length exceeds the old length the new elements are filled with copies of value.">'],
['resizeEdgeMap', '(Function)', 'href="FUNCTION.resize_Edge_Map.html" title="Initializes an edge map">'],
['resizeSpace', '(Function)', 'href="FUNCTION.resize_Space.html" title="Makes free space in container">'],
['resizeVertexMap', '(Function)', 'href="FUNCTION.resize_Vertex_Map.html" title="Initializes a vertex map.">'],
['Result', '(Metafunction)', 'href="METAFUNCTION_Result.html" title="Return the result of a computation.">'],
['resultCode (RecordReader)', '(Function)', 'href="FUNCTION_Record_Reader_23result_Code.html" title="Returns int current status code for reader (0 on success).">'],
['revCom (N2 AFScore)', '(Memvar)', 'href="MEMVAR_N2+_A_F_Score_23rev_Com.html" title="Scoring of reverse complements words [\'\'/\'max\'/\'min\'/\'mean\'/\'both_strands\'/]">'],
['reverse', '(Function)', 'href="FUNCTION.reverse.html" title="Reverse an object/container in-place.">'],
['reverseComplement', '(Function)', 'href="FUNCTION.reverse_Complement.html" title="Reverse and complement a sequence or a Class.StringSet in-place.">'],
['rewind', '(Function)', 'href="FUNCTION.rewind.html" title="Sets the current file pointer to the beginning.">'],
['rID (BamAlignmentRecord)', '(Memvar)', 'href="MEMVAR_Bam_Alignment_Record_23r_I_D.html" title="ID of reference for this fragment mapping (0-based, INVALID_REFID for \'*\').">'],
['rID (BedRecord)', '(Memvar)', 'href="MEMVAR_Bed_Record_23r_I_D.html" title="Numeric id of the interval\'s reference (__int32, defaults to INVALID_REFID).">'],
['rID (VcfRecord)', '(Memvar)', 'href="MEMVAR_Vcf_Record_23r_I_D.html" title="Static member as marker for invalid reference (__int32)">'],
['RightArrayBinaryTree', '(Class)', 'href="CLASS_Right_Array_Binary_Tree.html" title="A special format to encode the structure of a wavelet tree. The structure is very space efficient because only one position is stored which encodes where the left and right subtree of a given node exist.">'],
['RightArrayBinaryTree Fibres', '(Tag)', 'href="TAG_Right_Array_Binary_Tree+_Fibres.html" title="Tag to select a specific fibre (e.g. table, object, ...) of a Class.RightArrayBinaryTree.">'],
['RightArrayBinaryTree Iterator', '(Spec)', 'href="SPEC_Right_Array_Binary_Tree+_Iterator.html" title="An iterator for Class.RightArrayBinaryTree.">'],
['rightBoundary', '(Function)', 'href="FUNCTION.right_Boundary.html" title="Access to the right boundary.">'],
['Rna', '(Spec)', 'href="SPEC_Rna.html" title="Alphabet for RNA.">'],
['Rna5', '(Spec)', 'href="SPEC_Rna5.html" title="Alphabet for RNA including \'N\' character.">'],
['Rna5Iterator', '(Shortcut)', 'href="SHORTCUT_Rna5_Iterator.html" title="Iterator for Shortcut.Rna5String.">'],
['Rna5String', '(Shortcut)', 'href="SHORTCUT_Rna5_String.html" title="A string of Spec.Rna5.">'],
['Rna5StringComplement', '(Shortcut)', 'href="SHORTCUT_Rna5_String_Complement.html" title="Modifier for the complement of a Shortcut.Rna5String.">'],
['Rna5StringReverse', '(Shortcut)', 'href="SHORTCUT_Rna5_String_Reverse.html" title="Modifier for the reverse of a Shortcut.Rna5String.">'],
['Rna5StringReverseComplement', '(Shortcut)', 'href="SHORTCUT_Rna5_String_Reverse_Complement.html" title="Modifier for the reverse complement of a Shortcut.Rna5String.">'],
['RnaIterator', '(Shortcut)', 'href="SHORTCUT_Rna_Iterator.html" title="Iterator for Shortcut.RnaString.">'],
['RnaString', '(Shortcut)', 'href="SHORTCUT_Rna_String.html" title="A string of Spec.Rna.">'],
['RnaStringComplement', '(Shortcut)', 'href="SHORTCUT_Rna_String_Complement.html" title="Modifier for the complement of a Shortcut.RnaString.">'],
['RnaStringReverse', '(Shortcut)', 'href="SHORTCUT_Rna_String_Reverse.html" title="Modifier for the reverse of a Shortcut.RnaString.">'],
['RnaStringReverseComplement', '(Shortcut)', 'href="SHORTCUT_Rna_String_Reverse_Complement.html" title="Modifier for the reverse complement of a Shortcut.RnaString.">'],
['rNextId (BamAlignmentRecord)', '(Memvar)', 'href="MEMVAR_Bam_Alignment_Record_23r_Next_Id.html" title="ID of reference for next fragment mapping (0-based, INVALID_REFID for \'*\')">'],
['Rng', '(Class)', 'href="CLASS_Rng.html" title="Random Number Generator">'],
['Rng (Mersenne Twister Rng)', '(Memfunc)', 'href="MEMFUNC_Mersenne+_Twister+_Rng_23_Rng.html" title="Constructor Mersenne Twister Rng.">'],
['Rng (Rng Functor)', '(Memfunc)', 'href="MEMFUNC_Rng+_Functor_23_Rng.html" title="Constructor Functor Rng.">'],
['Rng Functor', '(Spec)', 'href="SPEC_Rng+_Functor.html" title="Functor wrapper for random number generation.">'],
['root', '(Function)', 'href="FUNCTION.root.html" title="Gets a reference to the root of the tree.">'],
['Rooted Iterators', '(Demo)', 'href="DEMO_Rooted+_Iterators.html" title="Example for some functions for handling (rooted) iterators.">'],
['RootedIteratorConcept', '(Concept)', 'href="CONCEPT_Rooted_Iterator_Concept.html" title="Iterator that knows its container.">'],
['RootedRandomAccessIteratorConcept', '(Concept)', 'href="CONCEPT_Rooted_Random_Access_Iterator_Concept.html" title="An iterator that is both rooted and random access, allowing to implement Function.position.">'],
['row', '(Function)', 'href="FUNCTION.row.html" title="A row in an alignment.">'],
['Row', '(Metafunction)', 'href="METAFUNCTION_Row.html" title="Type of a row in an alignment.">'],
['rows', '(Function)', 'href="FUNCTION.rows.html" title="The container of rows in an alignment.">'],
['Rows', '(Metafunction)', 'href="METAFUNCTION_Rows.html" title="Type of row container of an alignment.">'],
['saAt', '(Function)', 'href="FUNCTION.sa_At.html" title="Shortcut for value(indexSA(..), ..).">'],
['Sam', '(Tag)', 'href="TAG_Sam.html" title="Tag for identifying the SAM format.">'],
['sameType', '(Function)', 'href="FUNCTION.same_Type.html" title="Tests for equality of types.">'],
['sampleNames (VcfHeader)', '(Memvar)', 'href="MEMVAR_Vcf_Header_23sample_Names.html" title="Names of the samples (Class.StringSet&lt;Shortcut.CharString>).">'],
['sampleNames (VcfIOContext)', '(Memvar)', 'href="MEMVAR_Vcf_I_O_Context_23sample_Names.html" title="Names of the samples.">'],
['sampleNamesCache (VcfIOContext)', '(Memvar)', 'href="MEMVAR_Vcf_I_O_Context_23sample_Names_Cache.html" title="Name store cache for the sample names.">'],
['Sampler', '(Spec)', 'href="SPEC_Sampler.html" title="Outputs m-tuples beginning at a position of difference cover DC.">'],
['SAValue', '(Metafunction)', 'href="METAFUNCTION_S_A_Value.html" title="The default alphabet type of a suffix array, i.e. the type to store a position of a string or string set.">'],
['save (CompressedSA)', '(Function)', 'href="FUNCTION_Compressed_S_A_23save.html" title="This functions saves a compressed suffix array to disk.">'],
['save (Index)', '(Function)', 'href="FUNCTION_Index_23save.html" title="This functions saves an index to disk.">'],
['save (LfTable)', '(Function)', 'href="FUNCTION_Lf_Table_23save.html" title="This functions saves a LF table to disk.">'],
['save (PrefixSumTable)', '(Function)', 'href="FUNCTION_Prefix_Sum_Table_23save.html" title="This functions saves a prefix-sum table to disk.">'],
['save (RankDictionary)', '(Function)', 'href="FUNCTION_Rank_Dictionary_23save.html" title="This functions saves a dictionary to disk.">'],
['save (RankSupportBitString)', '(Function)', 'href="FUNCTION_Rank_Support_Bit_String_23save.html" title="This functions saves a Class.RankSupportBitString to disk.">'],
['save (RightArrayBinaryTree)', '(Function)', 'href="FUNCTION_Right_Array_Binary_Tree_23save.html" title="This functions saves a Class.RightArrayBinaryTree to disk.">'],
['save (SentinelRankDictionary)', '(Function)', 'href="FUNCTION_Sentinel_Rank_Dictionary_23save.html" title="This functions saves a dictionary to disk.">'],
['save (SparseString)', '(Function)', 'href="FUNCTION_Sparse_String_23save.html" title="This functions saves a sparse string to disk.">'],
['SBM', '(Tag)', 'href="TAG_S_B_M.html" title="Tag that specifies the Spec.FMIndex to use a StringSet of rank support bis strings as the occurrence table.">'],
['Score', '(Class)', 'href="CLASS_Score.html" title="A scoring scheme.">'],
['score (Seed)', '(Function)', 'href="FUNCTION_Seed_23score.html" title="Returns the score of the seed.">'],
['score', '(Function)', 'href="FUNCTION.score.html" title="Returns the score for aligning the entries entryH and entryV.">'],
['Score (Score Matrix)', '(Memfunc)', 'href="MEMFUNC_Score+_Matrix_23_Score.html" title="Constructor.">'],
['Score (Score)', '(Memfunc)', 'href="MEMFUNC_Score_23_Score.html" title="Constructor">'],
['score (AlignQualityStoreElement)', '(Memvar)', 'href="MEMVAR_Align_Quality_Store_Element_23score.html" title="Score of the alignment.">'],
['score (Bed5 BedRecord)', '(Memvar)', 'href="MEMVAR_Bed5+_Bed_Record_23score.html" title="The score of the interval (stored as Shortcut.CharString to allow more flexible annotation).">'],
['score (GffRecord)', '(Memvar)', 'href="MEMVAR_Gff_Record_23score.html" title="The score of the record.">'],
['Score Matrix', '(Spec)', 'href="SPEC_Score+_Matrix.html" title="A general scoring matrix.">'],
['scoreGap', '(Function)', 'href="FUNCTION.score_Gap.html" title="Score for gaps.">'],
['scoreGapExtend', '(Function)', 'href="FUNCTION.score_Gap_Extend.html" title="Score for extending gaps.">'],
['scoreGapExtendHorizontal', '(Function)', 'href="FUNCTION.score_Gap_Extend_Horizontal.html" title="Returns the score for extending a gap in horizontal direction.">'],
['scoreGapExtendVertical', '(Function)', 'href="FUNCTION.score_Gap_Extend_Vertical.html" title="Returns the score for extending a gap in vertical direction.">'],
['scoreGapHorizontal', '(Function)', 'href="FUNCTION.score_Gap_Horizontal.html" title="Returns the score for a gap in horizontal direction.">'],
['scoreGapOpen', '(Function)', 'href="FUNCTION.score_Gap_Open.html" title="Score for opening a gap.">'],
['scoreGapOpenHorizontal', '(Function)', 'href="FUNCTION.score_Gap_Open_Horizontal.html" title="Returns the score for opening a gap in horizontal direction.">'],
['scoreGapOpenVertical', '(Function)', 'href="FUNCTION.score_Gap_Open_Vertical.html" title="Returns the score for opening a gap in vertical direction.">'],
['scoreGapVertical', '(Function)', 'href="FUNCTION.score_Gap_Vertical.html" title="Returns the score for a gap in vertical direction.">'],
['scoreLimit', '(Function)', 'href="FUNCTION.score_Limit.html" title="The minimal score a match must reach in approximate searching.">'],
['scoreMatch', '(Function)', 'href="FUNCTION.score_Match.html" title="Match score.">'],
['scoreMismatch', '(Function)', 'href="FUNCTION.score_Mismatch.html" title="Mismatch score.">'],
['scoringScheme', '(Function)', 'href="FUNCTION.scoring_Scheme.html" title="The glos:Scoring Scheme|scoring scheme used for finding or aligning.">'],
['ScoringScheme', '(Metafunction)', 'href="METAFUNCTION_Scoring_Scheme.html" title="Returns the scoring scheme of an approximate searching algorithm.">'],
['Seed', '(Class)', 'href="CLASS_Seed.html" title="A seed in a dotplot.">'],
['Seed (Chained Seed)', '(Memfunc)', 'href="MEMFUNC_Chained+_Seed_23_Seed.html" title="Constructor">'],
['Seed (Simple Seed)', '(Memfunc)', 'href="MEMFUNC_Simple+_Seed_23_Seed.html" title="Constructor">'],
['Seed Extension', '(Tag)', 'href="TAG_Seed+_Extension.html" title="The algorithms used to extend a seed.">'],
['SeedDiagonal', '(Class)', 'href="CLASS_Seed_Diagonal.html" title="Store the information about a seed segment.">'],
['SeedScore (Seed)', '(Metafunction)', 'href="METAFUNCTION_Seed_23_Seed_Score.html" title="Returns type of the value for the score of a seed.">'],
['SeedSet', '(Class)', 'href="CLASS_Seed_Set.html" title="Handles a set of seeds with local chaining on adding seeds.">'],
['seedSize (Seed)', '(Function)', 'href="FUNCTION_Seed_23seed_Size.html" title="Returns the number of matches and mismatches of the seed.  This is the longest true diagonal fitting into its dimensions.">'],
['seek', '(Function)', 'href="FUNCTION.seek.html" title="Changes the current file pointer.">'],
['Segment', '(Class)', 'href="CLASS_Segment.html" title="A contiguous part of a sequence.">'],
['Segment (InfixSegment)', '(Memfunc)', 'href="MEMFUNC_Infix_Segment_23_Segment.html" title="Constructor">'],
['Segment (PrefixSegment)', '(Memfunc)', 'href="MEMFUNC_Prefix_Segment_23_Segment.html" title="Constructor">'],
['Segment (SuffixSegment)', '(Memfunc)', 'href="MEMFUNC_Suffix_Segment_23_Segment.html" title="Constructor">'],
['Segment Match Generation', '(Tag)', 'href="TAG_Segment+_Match+_Generation.html" title="A tag that specifies how to generate segment matches.">'],
['sentinelPosition', '(Function)', 'href="FUNCTION.sentinel_Position.html" title="Returns whether a specified position is a sentinel position.">'],
['SentinelRankDictionary', '(Class)', 'href="CLASS_Sentinel_Rank_Dictionary.html" title="A rank dictionary, additional storing sentinel character which are not accounted for in a rank querry.">'],
['SentinelRankDictionary Fibres', '(Tag)', 'href="TAG_Sentinel_Rank_Dictionary+_Fibres.html" title="Tag to select a specific fibre (e.g. table, object, ...) of a Class.SentinelRankDictionary.">'],
['seq (BamAlignmentRecord)', '(Memvar)', 'href="MEMVAR_Bam_Alignment_Record_23seq.html" title="The sequence string (empty for \'*\').">'],
['seq (ContigStoreElement)', '(Memvar)', 'href="MEMVAR_Contig_Store_Element_23seq.html" title="Contig sequence.">'],
['SeqAn - The Library for Sequence Analysis - Documentation', '', '<a target=_parent href="index.html">'],
['SEQAN_ASSERT', '(Macro)', 'href="MACRO_S_E_Q_A_N___A_S_S_E_R_T.html" title="Test that the given expression can be coerced to true.">'],
['SEQAN_ASSERT_EQ', '(Macro)', 'href="MACRO_S_E_Q_A_N___A_S_S_E_R_T___E_Q.html" title="Test that two given expressions are equal, as defined by the matching call to the operator=(,).">'],
['SEQAN_ASSERT_GEQ', '(Macro)', 'href="MACRO_S_E_Q_A_N___A_S_S_E_R_T___G_E_Q.html" title="Test that the two given expressions are in the greater-than-or-equal relation as defined by the matching call to operator>=(,).">'],
['SEQAN_ASSERT_GT', '(Macro)', 'href="MACRO_S_E_Q_A_N___A_S_S_E_R_T___G_T.html" title="Test that the two given expressions are in the greather-than relation as defined by the matching call to operator>(,).">'],
['SEQAN_ASSERT_IN_DELTA', '(Macro)', 'href="MACRO_S_E_Q_A_N___A_S_S_E_R_T___I_N___D_E_L_T_A.html" title="Test that the given expression can be coerced to true.">'],
['SEQAN_ASSERT_LEQ', '(Macro)', 'href="MACRO_S_E_Q_A_N___A_S_S_E_R_T___L_E_Q.html" title="Test that the two given expressions are in the less-than-or-equal relation as defined by the matching call to operator&lt;=(,).">'],
['SEQAN_ASSERT_LT', '(Macro)', 'href="MACRO_S_E_Q_A_N___A_S_S_E_R_T___L_T.html" title="Test that the two given expressions are in the less-than relation as defined by the matching call to operator&lt;(,).">'],
['SEQAN_ASSERT_NEQ', '(Macro)', 'href="MACRO_S_E_Q_A_N___A_S_S_E_R_T___N_E_Q.html" title="Test that two given expressions are not equal, as defined by the matching call to the operator!=(,).">'],
['SEQAN_ASSERT_NOT', '(Macro)', 'href="MACRO_S_E_Q_A_N___A_S_S_E_R_T___N_O_T.html" title="Test that the given expression can be coerced to false.">'],
['SEQAN_BEGIN_TESTSUITE', '(Macro)', 'href="MACRO_S_E_Q_A_N___B_E_G_I_N___T_E_S_T_S_U_I_T_E.html" title="Expand to a test suite beginning.">'],
['SEQAN_CALL_TEST', '(Macro)', 'href="MACRO_S_E_Q_A_N___C_A_L_L___T_E_S_T.html" title="Expand to calling a test.">'],
['SEQAN_CHECK', '(Macro)', 'href="MACRO_S_E_Q_A_N___C_H_E_C_K.html" title="Force abortion of program if a condition is not met, regardless of debugging settings.">'],
['SEQAN_CHECKPOINT', '(Macro)', 'href="MACRO_S_E_Q_A_N___C_H_E_C_K_P_O_I_N_T.html" title="Generate a check point.">'],
['SEQAN_CONCEPT', '(Macro)', 'href="MACRO_S_E_Q_A_N___C_O_N_C_E_P_T.html" title="Defines a new concept.">'],
['SEQAN_CONCEPT_ASSERT', '(Macro)', 'href="MACRO_S_E_Q_A_N___C_O_N_C_E_P_T___A_S_S_E_R_T.html" title="Perform a concept check.">'],
['SEQAN_CONCEPT_IMPL', '(Macro)', 'href="MACRO_S_E_Q_A_N___C_O_N_C_E_P_T___I_M_P_L.html" title="Defines which concepts a model fulfills.">'],
['SEQAN_CONCEPT_REFINE', '(Macro)', 'href="MACRO_S_E_Q_A_N___C_O_N_C_E_P_T___R_E_F_I_N_E.html" title="Defines a new concept as a refinement of existing concepts.">'],
['SEQAN_CONCEPT_USAGE', '(Macro)', 'href="MACRO_S_E_Q_A_N___C_O_N_C_E_P_T___U_S_A_G_E.html" title="Define valid expressions.">'],
['SEQAN_CTOR_DISABLE_IF', '(Macro)', 'href="MACRO_S_E_Q_A_N___C_T_O_R___D_I_S_A_B_L_E___I_F.html" title="Bind the visibility of a constructor to an expression.">'],
['SEQAN_CTOR_ENABLE_IF', '(Macro)', 'href="MACRO_S_E_Q_A_N___C_T_O_R___E_N_A_B_L_E___I_F.html" title="Bind the visibility of a constructor to an expression.">'],
['SEQAN_DEFINE_TEST', '(Macro)', 'href="MACRO_S_E_Q_A_N___D_E_F_I_N_E___T_E_S_T.html" title="Expand to test definition.">'],
['SEQAN_ENABLE_CHECKPOINTS', '(Macro)', 'href="MACRO_S_E_Q_A_N___E_N_A_B_L_E___C_H_E_C_K_P_O_I_N_T_S.html" title="Indicates whether checkpoints are enabled.">'],
['SEQAN_ENABLE_DEBUG', '(Macro)', 'href="MACRO_S_E_Q_A_N___E_N_A_B_L_E___D_E_B_U_G.html" title="Indicates whether debugging is enabled.">'],
['SEQAN_ENABLE_PARALLELISM', '(Macro)', 'href="MACRO_S_E_Q_A_N___E_N_A_B_L_E___P_A_R_A_L_L_E_L_I_S_M.html" title="Indicates whether parallelism is enabled with value 0/1.">'],
['SEQAN_ENABLE_TESTING', '(Macro)', 'href="MACRO_S_E_Q_A_N___E_N_A_B_L_E___T_E_S_T_I_N_G.html" title="Indicates whether testing is enabled.">'],
['SEQAN_END_TESTSUITE', '(Macro)', 'href="MACRO_S_E_Q_A_N___E_N_D___T_E_S_T_S_U_I_T_E.html" title="Expand to a test suite ending.">'],
['SEQAN_FAIL', '(Macro)', 'href="MACRO_S_E_Q_A_N___F_A_I_L.html" title="Force abortion of program, regardless of debugging settings.">'],
['SEQAN_FUNC_DISABLE_IF', '(Macro)', 'href="MACRO_S_E_Q_A_N___F_U_N_C___D_I_S_A_B_L_E___I_F.html" title="Bind the visibility of a function to an expression.">'],
['SEQAN_FUNC_ENABLE_IF', '(Macro)', 'href="MACRO_S_E_Q_A_N___F_U_N_C___E_N_A_B_L_E___I_F.html" title="Bind the visibility of a function to an expression.">'],
['SEQAN_HAS_BZIP2', '(Macro)', 'href="MACRO_S_E_Q_A_N___H_A_S___B_Z_I_P2.html" title="If set to 1 then bzlib2 is available, i.e. including &lt;bzlib.h> and linking against libbzip2 works.">'],
['SEQAN_HAS_ZLIB', '(Macro)', 'href="MACRO_S_E_Q_A_N___H_A_S___Z_L_I_B.html" title="If set to 1 then zlib is available, i.e. including &lt;zlib.h> and linking against libz works.">'],
['SEQAN_OMP_PRAGMA', '(Macro)', 'href="MACRO_S_E_Q_A_N___O_M_P___P_R_A_G_M_A.html" title="Portable conditional #pragma issuing if OpenMP is enabled.">'],
['SEQAN_PATH_TO_ROOT', '(Macro)', 'href="MACRO_S_E_Q_A_N___P_A_T_H___T_O___R_O_O_T.html" title="Return path to the checkout root directory (i.e. containing core/extras).">'],
['SEQAN_SKIP_TEST', '(Macro)', 'href="MACRO_S_E_Q_A_N___S_K_I_P___T_E_S_T.html" title="Force the test to return without failing and mark it as skipped.">'],
['SEQAN_TEMP_FILENAME', '(Macro)', 'href="MACRO_S_E_Q_A_N___T_E_M_P___F_I_L_E_N_A_M_E.html" title="Generates the name to a temporary file.">'],
['SEQAN_TYPEDEF_FOR_DEBUG', '(Macro)', 'href="MACRO_S_E_Q_A_N___T_Y_P_E_D_E_F___F_O_R___D_E_B_U_G.html" title=" When using typedefs that are only used in debug mode then they have to be marked with macro.">'],
['SEQAN_VERIFY_CHECKPOINTS', '(Macro)', 'href="MACRO_S_E_Q_A_N___V_E_R_I_F_Y___C_H_E_C_K_P_O_I_N_T_S.html" title="Verify check points for the given file name.">'],
['SEQAN_VERSION_MAJOR', '(Macro)', 'href="MACRO_S_E_Q_A_N___V_E_R_S_I_O_N___M_A_J_O_R.html" title="Major SeqAn revision number.">'],
['SEQAN_VERSION_MINOR', '(Macro)', 'href="MACRO_S_E_Q_A_N___V_E_R_S_I_O_N___M_I_N_O_R.html" title="Minor SeqAn revision number.">'],
['SEQAN_VERSION_PATCH', '(Macro)', 'href="MACRO_S_E_Q_A_N___V_E_R_S_I_O_N___P_A_T_C_H.html" title="SeqAn patch revision number.">'],
['SEQAN_VERSION_PRE_RELEASE', '(Macro)', 'href="MACRO_S_E_Q_A_N___V_E_R_S_I_O_N___P_R_E___R_E_L_E_A_S_E.html" title="Flag (0/1) to indicate whether this is a pre-release (i.e. SVN version).">'],
['seqId (GenomicRegion)', '(Memvar)', 'href="MEMVAR_Genomic_Region_23seq_Id.html" title="An optional field storing an integer. Default is -1.">'],
['seqName (GenomicRegion)', '(Memvar)', 'href="MEMVAR_Genomic_Region_23seq_Name.html" title="Name of the sequence the region lies on, default is the empty string.">'],
['seqPos (GapAnchor)', '(Memvar)', 'href="MEMVAR_Gap_Anchor_23seq_Pos.html" title="Sequence character position in the ungapped sequence.">'],
['SeqStreamFormats', '(Shortcut)', 'href="SHORTCUT_Seq_Stream_Formats.html" title="A Tag list of the currently implemented Sequence-Formats (in RecordReader/Stream-IO)">'],
['SequenceBitMask', '(Spec)', 'href="SPEC_Sequence_Bit_Mask.html" title="The string set bit string dictionary is a string set of rank support bit strings for constant time acces of the rank of a specified character at a specified position.">'],
['SequenceBitMask Fibres', '(Spec)', 'href="SPEC_Sequence_Bit_Mask+_Fibres.html" title="Tag to select a specific fibre of a SequenceBitMask.">'],
['SequenceConcept', '(Concept)', 'href="CONCEPT_Sequence_Concept.html" title="Concept for sequences.">'],
['sequenceEntryForScore (Score)', '(Function)', 'href="FUNCTION_Score_23sequence_Entry_For_Score.html" title="Helper function for element access, depending on score type.">'],
['SequenceEntryForScore (Score)', '(Metafunction)', 'href="METAFUNCTION_Score_23_Sequence_Entry_For_Score.html" title="Returns representation type for a character of a position in a sequence.">'],
['sequenceId', '(Function)', 'href="FUNCTION.sequence_Id.html" title="Gets the sequence id that is associated with this vertex descriptor or with a sequence of a fragment.">'],
['sequenceInfos (BamHeader)', '(Memvar)', 'href="MEMVAR_Bam_Header_23sequence_Infos.html" title="String of (seqid, length) with reference name / length information.">'],
['sequenceLength (FaiIndex)', '(Function)', 'href="FUNCTION_Fai_Index_23sequence_Length.html" title="Return length of the sequence with the given id in the Class.FaiIndex.">'],
['sequenceName (FaiIndex)', '(Function)', 'href="FUNCTION_Fai_Index_23sequence_Name.html" title="Return the name of the sequence with the given id in the Class.FaiIndex.">'],
['sequenceNames (BedStream)', '(Memvar)', 'href="MEMVAR_Bed_Stream_23sequence_Names.html" title="The names of the sequences (Class.StringSet of Shortcut.CharString), updated when new sequences are seen in BED file.">'],
['sequenceNames (GffStream)', '(Memvar)', 'href="MEMVAR_Gff_Stream_23sequence_Names.html" title="The names of the sequences (Class.StringSet of Shortcut.CharString), updated when new sequences are seen in GFF file.">'],
['sequenceNames (VcfHeader)', '(Memvar)', 'href="MEMVAR_Vcf_Header_23sequence_Names.html" title="Names of the sequences (Class.StringSet&lt;Shortcut.CharString>).">'],
['sequenceNames (VcfIOContext)', '(Memvar)', 'href="MEMVAR_Vcf_I_O_Context_23sequence_Names.html" title="Names of the reference sequences.">'],
['sequenceNamesCache (VcfIOContext)', '(Memvar)', 'href="MEMVAR_Vcf_I_O_Context_23sequence_Names_Cache.html" title="Name store cache for of the reference names.">'],
['sequenceNameStore (LocalMatchStore)', '(Memvar)', 'href="MEMVAR_Local_Match_Store_23sequence_Name_Store.html" title="Class.StringSet storing the sequence names.">'],
['SequenceOutputOptions', '(Class)', 'href="CLASS_Sequence_Output_Options.html" title="Configuration for writing sequence (FASTA/FASTQ) files.">'],
['SequenceStream', '(Class)', 'href="CLASS_Sequence_Stream.html" title="High-level reading and writing of sequences.">'],
['SequenceStream (SequenceStream)', '(Memfunc)', 'href="MEMFUNC_Sequence_Stream_23_Sequence_Stream.html" title="Constructor">'],
['SequenceStream::FileFormat', '(Enum)', 'href="ENUM_Sequence_Stream_5ccolon_5ccolon_File_Format.html" title="Select the file format to read/write.">'],
['SequenceStream::FileType', '(Enum)', 'href="ENUM_Sequence_Stream_5ccolon_5ccolon_File_Type.html" title="Select the file type to read/write.">'],
['SequenceStream::OperationMode', '(Enum)', 'href="ENUM_Sequence_Stream_5ccolon_5ccolon_Operation_Mode.html" title="Select the operation mode of a Class.SequenceStream.">'],
['Serial', '(Tag)', 'href="TAG_Serial.html" title="Tag to select a non-parallel implementation of an algorithm.">'],
['set', '(Function)', 'href="FUNCTION.set.html" title="Assigns one object to another object avoiding to copy contents.">'],
['set (MarkovModel)', '(Memfunc)', 'href="MEMFUNC_Markov_Model_23set.html" title=" Given e transition matrix, sets it as transition matrix of the MarkovModel and computes (if it is not available) the  vector of character distributions and the auxiliary information">'],
['setAppName (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23set_App_Name.html" title="Sets application name of Class.ArgumentParser.">'],
['setBegin', '(Function)', 'href="FUNCTION.set_Begin.html" title="Sets begin of object in host.">'],
['setBeginPosition (Gaps)', '(Function)', 'href="FUNCTION_Gaps_23set_Begin_Position.html" title="Set the begin position of the clipped gapped sequence, given a source position.">'],
['setBeginPosition', '(Function)', 'href="FUNCTION.set_Begin_Position.html" title="Sets begin position of object in host.">'],
['setBeginPositionH (Seed)', '(Function)', 'href="FUNCTION_Seed_23set_Begin_Position_H.html" title=" Sets the begin position of the seed in the database.">'],
['setBeginPositionV (Seed)', '(Function)', 'href="FUNCTION_Seed_23set_Begin_Position_V.html" title=" Sets the begin position of the seed in the query.">'],
['setBit', '(Function)', 'href="FUNCTION.set_Bit.html" title="Set the bit with the given index to 1.">'],
['setBitTo', '(Function)', 'href="FUNCTION.set_Bit_To.html" title="Set the bit with the given index to the given value.">'],
['setCategory (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23set_Category.html" title="Set tool category for Class.ArgumentParser object.">'],
['setCategory (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23set_Category.html" title="Set tool category for Class.ToolDoc object.">'],
['setCharacter (RightArrayBinaryTree Iterator)', '(Function)', 'href="FUNCTION_Right_Array_Binary_Tree+_Iterator_23set_Character.html" title="setCharacter(iterator, character) sets the character of the node the iterator points to to character.">'],
['setClippedBeginPosition (Gaps)', '(Function)', 'href="FUNCTION_Gaps_23set_Clipped_Begin_Position.html" title="Sets the begin position of the clipping.">'],
['setClippedEndPosition (Gaps)', '(Function)', 'href="FUNCTION_Gaps_23set_Clipped_End_Position.html" title="Sets the end position of the clipping.">'],
['setContainer', '(Function)', 'href="FUNCTION.set_Container.html" title="Set container of an adaptor iterator.">'],
['setDate (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23set_Date.html" title="Sets date string of Class.ArgumentParser.">'],
['setDate (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23set_Date.html" title="Set date string for Class.ToolDoc object.">'],
['setDefaultScoreMatrix', '(Function)', 'href="FUNCTION.set_Default_Score_Matrix.html" title="Set the value of the given matrix to the default value.">'],
['setDefaultValue (ArgParseOption)', '(Function)', 'href="FUNCTION_Arg_Parse_Option_23set_Default_Value.html" title="Sets the default value for the given option.">'],
['setDefaultValue (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23set_Default_Value.html" title="Set default value of an option of an ArgumentParser.">'],
['setEnd', '(Function)', 'href="FUNCTION.set_End.html" title="Sets end of object in host.">'],
['setEndPosition (Gaps)', '(Function)', 'href="FUNCTION_Gaps_23set_End_Position.html" title="Set the end position of the clipped gapped sequence, given a source position.">'],
['setEndPosition', '(Function)', 'href="FUNCTION.set_End_Position.html" title="Sets begin position of object in host.">'],
['setEndPositionH (Seed)', '(Function)', 'href="FUNCTION_Seed_23set_End_Position_H.html" title=" Sets the end position of the seed in the database.">'],
['setEndPositionV (Seed)', '(Function)', 'href="FUNCTION_Seed_23set_End_Position_V.html" title=" Returns the end position of the seed in the query.">'],
['setEof', '(Function)', 'href="FUNCTION.set_Eof.html" title="Sets the file end to the current pointer.">'],
['setGlobalReference', '(Function)', 'href="FUNCTION.set_Global_Reference.html" title="Sets the global reference of a Spec.Journaled Set.">'],
['setHaystack', '(Function)', 'href="FUNCTION.set_Haystack.html" title="Sets the haystack of a Class.Finder object.">'],
['setHelpText (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23set_Help_Text.html" title="Set help text of argument parser.">'],
['setHelpText', '(Function)', 'href="FUNCTION.set_Help_Text.html" title="Sets the help text for an ArgParseArgument.">'],
['SetHorspool', '(Spec)', 'href="SPEC_Set_Horspool.html" title=" Multiple exact string matching using set horspool algorithm.">'],
['setHost', '(Function)', 'href="FUNCTION.set_Host.html" title="Sets the host of an object.">'],
['setLfTable', '(Function)', 'href="FUNCTION.set_Lf_Table.html" title="Set the LfTable of the compressed suffix array.">'],
['setLowerDiagonal (Seed)', '(Function)', 'href="FUNCTION_Seed_23set_Lower_Diagonal.html" title=" Sets a new value for the leftmost diagonal.">'],
['setManTitle (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23set_Man_Title.html" title="Set version string for Class.ToolDoc object.">'],
['setMaxValue (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23set_Max_Value.html" title="Set largest allowed value for an option or argument of an ArgumentParser.">'],
['setMaxValue', '(Function)', 'href="FUNCTION.set_Max_Value.html" title="Sets the maximum value of a Class.ArgParseArgument object.">'],
['setMinScore (SeedSet)', '(Function)', 'href="FUNCTION_Seed_Set_23set_Min_Score.html" title="Sets the threshold at which seeds are considered high-scoring.">'],
['setMinValue (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23set_Min_Value.html" title="Set smallest allowed value for an option or argument of an ArgumentParser.">'],
['setMinValue', '(Function)', 'href="FUNCTION.set_Min_Value.html" title="Sets the minimum value of a Class.ArgParseArgument object.">'],
['setName (AnnotationTree Iterator)', '(Function)', 'href="FUNCTION_Annotation_Tree+_Iterator_23set_Name.html" title="Sets the identifier of the current annotation.">'],
['setName (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23set_Name.html" title="Set tool name for Class.ToolDoc object.">'],
['setNeedle', '(Function)', 'href="FUNCTION.set_Needle.html" title="Sets the needle of a Class.Pattern object and optionally induces preprocessing.">'],
['setPosition (RecordReader)', '(Function)', 'href="FUNCTION_Record_Reader_23set_Position.html" title="Returns the current position of the reader.">'],
['setPosition', '(Function)', 'href="FUNCTION.set_Position.html" title="Sets the position of a finder.">'],
['setPrefixSum', '(Function)', 'href="FUNCTION.set_Prefix_Sum.html" title="Returns a reference to the entry of the prefix-sum table of a given position.">'],
['setRequired (ArgParseOption)', '(Function)', 'href="FUNCTION_Arg_Parse_Option_23set_Required.html" title="Sets whether or not the option is mandatory.">'],
['setRequired (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23set_Required.html" title="Sets whether or not the option defined by the parameter name (which can be  either the short or the long name) is mandatory.">'],
['setScore (Seed)', '(Function)', 'href="FUNCTION_Seed_23set_Score.html" title="Set the score value of a seed.">'],
['setScore', '(Function)', 'href="FUNCTION.set_Score.html" title="Set the substitution score between two values.">'],
['setScoreGap', '(Function)', 'href="FUNCTION.set_Score_Gap.html" title="Set gap opening and extension score.">'],
['setScoreGapExtend', '(Function)', 'href="FUNCTION.set_Score_Gap_Extend.html" title="Set gap extension score.">'],
['setScoreGapOpen', '(Function)', 'href="FUNCTION.set_Score_Gap_Open.html" title="Set gap opening score.">'],
['setScoreLimit', '(Function)', 'href="FUNCTION.set_Score_Limit.html" title="Sets the minimal score a match must reach in approximate searching.">'],
['setScoreMatch', '(Function)', 'href="FUNCTION.set_Score_Match.html" title="Set match score.">'],
['setScoreMismatch', '(Function)', 'href="FUNCTION.set_Score_Mismatch.html" title="Set mismatch score.">'],
['setScoringScheme', '(Function)', 'href="FUNCTION.set_Scoring_Scheme.html" title="Sets the glos:Scoring Scheme|scoring scheme used for finding or aligning.">'],
['setSentinelPosition (SentinelRankDictionary)', '(Function)', 'href="FUNCTION_Sentinel_Rank_Dictionary_23set_Sentinel_Position.html" title="Sets the sentinel position..">'],
['setSentinelSubstitute (SentinelRankDictionary)', '(Function)', 'href="FUNCTION_Sentinel_Rank_Dictionary_23set_Sentinel_Substitute.html" title="Sets the character used to substitute the sentinel sign.">'],
['setShortDescription (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23set_Short_Description.html" title="Sets short description of the Class.ArgumentParser object.">'],
['setShortDescription (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23set_Short_Description.html" title="Set short description for Class.ToolDoc object.">'],
['setSource (Gaps)', '(Function)', 'href="FUNCTION_Gaps_23set_Source.html" title="Set the source of a Gaps object, do not copy if possible.">'],
['setStepSize', '(Function)', 'href="FUNCTION.set_Step_Size.html" title="Change the q-gram step size used for index creation.">'],
['setStrings', '(Function)', 'href="FUNCTION.set_Strings.html" title="Loads the sequences of a stringset into an alignment.">'],
['setTagValue (BamHeaderRecord)', '(Function)', 'href="FUNCTION_Bam_Header_Record_23set_Tag_Value.html" title="Set tag value of a Class.BamHeaderRecord.">'],
['setTagValue (BamTagsDict)', '(Function)', 'href="FUNCTION_Bam_Tags_Dict_23set_Tag_Value.html" title="Set the value of a tag through a Class.BamTagsDict.">'],
['setType', '(Function)', 'href="FUNCTION.set_Type.html" title="Sets the type name of the current annotation.">'],
['setUpperDiagonal (Seed)', '(Function)', 'href="FUNCTION_Seed_23set_Upper_Diagonal.html" title=" Sets a new value for the rightmost diagonal.">'],
['setValidValues (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23set_Valid_Values.html" title="Set valid values for an argument or option of an ArgumentParser.">'],
['setValidValues', '(Function)', 'href="FUNCTION.set_Valid_Values.html" title="Sets the set of allowed values of a Class.ArgParseArgument object.">'],
['setValue', '(Function)', 'href="FUNCTION.set_Value.html" title="Makes holder dependent.">'],
['setVersion (ArgumentParser)', '(Function)', 'href="FUNCTION_Argument_Parser_23set_Version.html" title="Sets version string of Class.ArgumentParser.">'],
['setVersion (ToolDoc)', '(Function)', 'href="FUNCTION_Tool_Doc_23set_Version.html" title="Set version string for Class.ToolDoc object.">'],
['Shape', '(Class)', 'href="CLASS_Shape.html" title="Stores hash value and shape for an ungapped or gapped q-gram.">'],
['Shape (GenericShape)', '(Memfunc)', 'href="MEMFUNC_Generic_Shape_23_Shape.html" title="Constructor">'],
['Shape (OneGappedShape)', '(Memfunc)', 'href="MEMFUNC_One_Gapped_Shape_23_Shape.html" title="Constructor">'],
['Shape (Shape)', '(Memfunc)', 'href="MEMFUNC_Shape_23_Shape.html" title="Constructor">'],
['Shape (SimpleShape)', '(Memfunc)', 'href="MEMFUNC_Simple_Shape_23_Shape.html" title="Constructor">'],
['shapeToString', '(Function)', 'href="FUNCTION.shape_To_String.html" title="Converts a given shape into a sequence of \'1\' (relevant position) and \'0\' (irrelevant position).">'],
['shareResources', '(Function)', 'href="FUNCTION.share_Resources.html" title="Determines whether two sequences share the same resource.">'],
['ShiftAnd', '(Spec)', 'href="SPEC_Shift_And.html" title=" Exact string matching using bit parallelism. The Shift-And algorithm is applicable to search small patterns in texts using a small alphabet.">'],
['Shifter', '(Spec)', 'href="SPEC_Shifter.html" title="Shifts the input stream by delta elements.">'],
['ShiftOr', '(Spec)', 'href="SPEC_Shift_Or.html" title=" Exact string matching using bit parallelism. The Shift-Or algorithm is applicable to search small patterns in texts using a small alphabet.">'],
['Shortcuts', '', '<a target=_parent href="INDEXPAGE_Shortcut.html">'],
['Shortest Path in DAGs', '(Demo)', 'href="DEMO_Shortest+_Path+in+_D_A_Gs.html" title="Computing single source shortest paths in a directed acyclic graph.">'],
['shrinkToFit', '(Function)', 'href="FUNCTION.shrink_To_Fit.html" title="Resizes container to minimum capacity">'],
['shuffle', '(Function)', 'href="FUNCTION.shuffle.html" title="Shuffle the given container.">'],
['SignedIntegerConcept', '(Concept)', 'href="CONCEPT_Signed_Integer_Concept.html" title="An integral type with a sign.">'],
['silentStatus', '(Function)', 'href="FUNCTION.silent_Status.html" title="Reference to the silent status of a state.">'],
['Simple Allocator', '(Spec)', 'href="SPEC_Simple+_Allocator.html" title="General purpose allocator.">'],
['Simple Finder', '(Spec)', 'href="SPEC_Simple+_Finder.html" title="A brute force online searching algorithm.">'],
['Simple Holder', '(Spec)', 'href="SPEC_Simple+_Holder.html" title="Simple copying wrapper without any additional state.">'],
['Simple Score', '(Spec)', 'href="SPEC_Simple+_Score.html" title="Simple scoring scheme that has scores for matches, mismatches, opening gaps and extending gaps.">'],
['Simple Seed', '(Spec)', 'href="SPEC_Simple+_Seed.html" title="Describes a seed with start and end position and diagonal upper and lower bounds.">'],
['Simple Type', '(Concept)', 'href="CONCEPT_Simple+_Type.html" title="Object that does not need constructors, destructors or copy assignment operators.">'],
['SimpleScore', '(Shortcut)', 'href="SHORTCUT_Simple_Score.html" title="Simple scoring scheme.">'],
['SimpleShape', '(Spec)', 'href="SPEC_Simple_Shape.html" title="A variable length ungapped shape (also called q-gram or k-mer).">'],
['SimpleType', '(Class)', 'href="CLASS_Simple_Type.html" title="Implementation for &quot;simple&quot; types.">'],
['Single Pool Allocator', '(Spec)', 'href="SPEC_Single+_Pool+_Allocator.html" title="Allocator that pools memory blocks of specific size.">'],
['Single-Pass RecordReader', '(Spec)', 'href="SPEC_Single-_Pass+_Record_Reader.html" title="Record reader specialization for single-pass reading.">'],
['Single-Pass String RecordReader', '(Spec)', 'href="SPEC_Single-_Pass+_String+_Record_Reader.html" title="Record reader specialization for single-pass reading from memory mapped files.">'],
['size', '(Function)', 'href="FUNCTION.size.html" title="Gets the file size.">'],
['Size (Seed)', '(Metafunction)', 'href="METAFUNCTION_Seed_23_Size.html" title="The size type of a Class.Seed.">'],
['Size (SeedDiagonal)', '(Metafunction)', 'href="METAFUNCTION_Seed_Diagonal_23_Size.html" title="The position type of a Class.SeedDiagonal.">'],
['Size', '(Metafunction)', 'href="METAFUNCTION_Size.html" title="Type of an object that is suitable to hold size information.">'],
['skipBlanks', '(Function)', 'href="FUNCTION.skip_Blanks.html" title="Skip (i.e. read without saving) characters from stream until non-Blank is encountered">'],
['skipChar', '(Function)', 'href="FUNCTION.skip_Char.html" title="Skip one character that must be equal to a given one for this function to succeed.">'],
['skipLine', '(Function)', 'href="FUNCTION.skip_Line.html" title="Skip a line in stream and go to beginning of next">'],
['Skiplist', '(Spec)', 'href="SPEC_Skiplist.html" title="General purpose map container.">'],
['skipNChars', '(Function)', 'href="FUNCTION.skip_N_Chars.html" title="Skip exactly n characters from stream">'],
['skipNCharsIgnoringWhitespace', '(Function)', 'href="FUNCTION.skip_N_Chars_Ignoring_Whitespace.html" title="Skip n characters from stream, not counting whitespaces">'],
['skipUntilBlank', '(Function)', 'href="FUNCTION.skip_Until_Blank.html" title="Skip (i.e. read without saving) characters from stream until Blank is encountered">'],
['skipUntilChar', '(Function)', 'href="FUNCTION.skip_Until_Char.html" title="Skip (i.e. read without saving) characters from stream until Char is encountered">'],
['skipUntilGraph', '(Function)', 'href="FUNCTION.skip_Until_Graph.html" title="Skip (i.e. read without saving) characters from stream until printable, non-\' \' character is encountered">'],
['skipUntilLineBeginsWithChar', '(Function)', 'href="FUNCTION.skip_Until_Line_Begins_With_Char.html" title="Skip input until the first graphical(see Function.isgraph) character of a line is equal to c">'],
['skipUntilLineBeginsWithOneCharOfStr', '(Function)', 'href="FUNCTION.skip_Until_Line_Begins_With_One_Char_Of_Str.html" title="Skip input until a line begins with a one of the characters in str">'],
['skipUntilLineBeginsWithStr', '(Function)', 'href="FUNCTION.skip_Until_Line_Begins_With_Str.html" title="Skip input until a line begins with str.">'],
['skipUntilString', '(Function)', 'href="FUNCTION.skip_Until_String.html" title="Skip (i.e. read without saving) characters from stream until String is encountered">'],
['skipUntilWhitespace', '(Function)', 'href="FUNCTION.skip_Until_Whitespace.html" title="Skip (i.e. read without saving) characters from stream until Whitespace is encountered">'],
['skipWhitespaces', '(Function)', 'href="FUNCTION.skip_Whitespaces.html" title="Skip (i.e. read without saving) characters from stream until non-Whitespace is encountered">'],
['sortAlignedRead Tags', '(Tag)', 'href="TAG.sort_Aligned_Read+_Tags.html" title="Tag to select a specific field to stably sort the Memvar.FragmentStore#alignedReadStore by.">'],
['sortAlignedReads', '(Function)', 'href="FUNCTION.sort_Aligned_Reads.html" title="Stably sort aligned reads.">'],
['SorterConfig', '(Spec)', 'href="SPEC_Sorter_Config.html" title="Configuration of Sorter.">'],
['SorterConfigSize', '(Spec)', 'href="SPEC_Sorter_Config_Size.html" title="Configuration of Sorter.">'],
['SorterSpec', '(Spec)', 'href="SPEC_Sorter_Spec.html" title="Sorts all elements using a custom compare function.">'],
['source', '(Function)', 'href="FUNCTION.source.html" title="Return underlying object.">'],
['source (GffRecord)', '(Memvar)', 'href="MEMVAR_Gff_Record_23source.html" title="The source of the record.">'],
['Source', '(Metafunction)', 'href="METAFUNCTION_Source.html" title="Return underlying sequence of Gaps/Alignments.">'],
['Source', '(Spec)', 'href="SPEC_Source.html" title="Pipelining adaptor for arbitrary containers or iterators.">'],
['SourceValue', '(Metafunction)', 'href="METAFUNCTION_Source_Value.html" title="Returns underlying value for Class.ProfileChar.">'],
['sourceVertex', '(Function)', 'href="FUNCTION.source_Vertex.html" title="Returns the source vertex of an edge.">'],
['SparseString', '(Class)', 'href="CLASS_Sparse_String.html" title="A string storing only a fraction of the values of the original string..">'],
['SparseString Fibres', '(Tag)', 'href="TAG_Sparse_String+_Fibres.html" title="Tag to select a specific fibre of a Class.SparseString.">'],
['Spec', '(Metafunction)', 'href="METAFUNCTION_Spec.html" title="The spec of a class.">'],
['Specializations', '', '<a target=_parent href="INDEXPAGE_Spec.html">'],
['split', '(Function)', 'href="FUNCTION.split.html" title="Divides the contents of a sequence file into sequence file fragments separated by a file format specific delimiter.">'],
['splitAlignment', '(Function)', 'href="FUNCTION.split_Alignment.html" title="Compute split alignments.">'],
['splitEmblHeader', '(Function)', 'href="FUNCTION.split_Embl_Header.html" title="Split an EMBL header line.">'],
['splitGenBankHeader', '(Function)', 'href="FUNCTION.split_Gen_Bank_Header.html" title="Split an GenBank header field/value.">'],
['Splitter', '(Class)', 'href="CLASS_Splitter.html" title="Splits an interval into subintervals.">'],
['Splitter (Splitter)', '(Memfunc)', 'href="MEMFUNC_Splitter_23_Splitter.html" title="Constructor">'],
['startFirstPass', '(Function)', 'href="FUNCTION.start_First_Pass.html" title="Start the first reading pass.">'],
['startSecondPass', '(Function)', 'href="FUNCTION.start_Second_Pass.html" title="Start the second reading pass.">'],
['startsWith', '(Function)', 'href="FUNCTION.starts_With.html" title="Check whether a sequence starts with a given prefix.">'],
['stationaryDistribution (MarkovModel)', '(Memvar)', 'href="MEMVAR_Markov_Model_23stationary_Distribution.html" title="The vector of character distribution">'],
['std (LibraryStoreElement)', '(Memvar)', 'href="MEMVAR_Library_Store_Element_23std.html" title="The library size standard deviation.">'],
['STD Adaptor Iterator', '(Spec)', 'href="SPEC_S_T_D+_Adaptor+_Iterator.html" title="Adapt STL iterators to SeqAn iterators.">'],
['std::basic_string', '(Adaption)', 'href="ADAPTION.std_3a_3abasic__string.html" title="Adaption for STL strings.">'],
['std::FILE *', '(Adaption)', 'href="ADAPTION.std_3a_3a_F_I_L_E+_2a.html" title="Standard library C style streams.">'],
['std::iostream', '(Adaption)', 'href="ADAPTION.std_3a_3aiostream.html" title="Standard library stream classes.">'],
['std::list', '(Adaption)', 'href="ADAPTION.std_3a_3alist.html" title="Adaption for STL list objects.">'],
['std::vector', '(Adaption)', 'href="ADAPTION.std_3a_3avector.html" title="Adaption for STL vector class.">'],
['StdContainerIterator', '(Metafunction)', 'href="METAFUNCTION_Std_Container_Iterator.html" title="Returns type of the STL container iterator.">'],
['strand (Bed6 BedRecord)', '(Memvar)', 'href="MEMVAR_Bed6+_Bed_Record_23strand.html" title="The strand of the interval (stored as char, one of ., \'-\', and +).">'],
['strand (GffRecord)', '(Memvar)', 'href="MEMVAR_Gff_Record_23strand.html" title="The strand the record belongs to.">'],
['Stream', '(Class)', 'href="CLASS_Stream.html" title="Abstract base class to fulfill the Concept.StreamConcept concept.">'],
['Stream (BZ2 File Stream)', '(Memfunc)', 'href="MEMFUNC_B_Z2+_File+_Stream_23_Stream.html" title="Constructor">'],
['Stream (Char Array Stream)', '(Memfunc)', 'href="MEMFUNC_Char+_Array+_Stream_23_Stream.html" title="Constructor">'],
['Stream (GZ File Stream)', '(Memfunc)', 'href="MEMFUNC_G_Z+_File+_Stream_23_Stream.html" title="Constructor">'],
['Stream Feature', '(Tag)', 'href="TAG_Stream+_Feature.html" title="Tag to select a given feature for querying in Metafunction.HasStreamFeature.">'],
['StreamConcept', '(Concept)', 'href="CONCEPT_Stream_Concept.html" title="Concept for I/O streams.">'],
['streamEof', '(Function)', 'href="FUNCTION.stream_Eof.html" title="Check end-of-file state of a Concept.StreamConcept.">'],
['streamError', '(Function)', 'href="FUNCTION.stream_Error.html" title="Return the stream\'s error code.">'],
['streamFlush', '(Function)', 'href="FUNCTION.stream_Flush.html" title="Flush the underlying stream.">'],
['streamPeek', '(Function)', 'href="FUNCTION.stream_Peek.html" title="Read next character from stream without advancing current position.">'],
['streamPut', '(Function)', 'href="FUNCTION.stream_Put.html" title="Write different types to stream">'],
['streamReadBlock', '(Function)', 'href="FUNCTION.stream_Read_Block.html" title="Read a block of bytes into a buffer.">'],
['streamReadChar', '(Function)', 'href="FUNCTION.stream_Read_Char.html" title="Read next character from stream and advance the current position.">'],
['streamSeek', '(Function)', 'href="FUNCTION.stream_Seek.html" title="Perform a seek operation on the stream.">'],
['streamTell', '(Function)', 'href="FUNCTION.stream_Tell.html" title="Get the position in the current stream.">'],
['streamWriteBlock', '(Function)', 'href="FUNCTION.stream_Write_Block.html" title="Write a block of bytes from a buffer into a stream.">'],
['streamWriteChar', '(Function)', 'href="FUNCTION.stream_Write_Char.html" title="Write one character to the stream.">'],
['String', '(Class)', 'href="CLASS_String.html" title="A sequence container with generic alphabet and many specializations.">'],
['String (External String)', '(Memfunc)', 'href="MEMFUNC_External+_String_23_String.html" title="Constructor">'],
['String (String)', '(Memfunc)', 'href="MEMFUNC_String_23_String.html" title="Constructor">'],
['StringEnumerator', '(Class)', 'href="CLASS_String_Enumerator.html" title="Class to enumerate all strings within a given edit/Hamming distance.">'],
['StringEnumerator (StringEnumerator)', '(Memfunc)', 'href="MEMFUNC_String_Enumerator_23_String_Enumerator.html" title="Constructor">'],
['StringSet', '(Class)', 'href="CLASS_String_Set.html" title="A container class for a set of strings.">'],
['stringSet', '(Function)', 'href="FUNCTION.string_Set.html" title="Gets the string set of an alignment graph.">'],
['stringSetLimits', '(Function)', 'href="FUNCTION.string_Set_Limits.html" title="Retrieves a string of delimiter positions of a Class.StringSet which is needed for local&lt;->global position conversions.">'],
['StringSetType', '(Metafunction)', 'href="METAFUNCTION_String_Set_Type.html" title="Return type of Function.stringSet function.">'],
['stringSplit', '(Function)', 'href="FUNCTION.string_Split.html" title="Append a list of the words in the string, using sep as the delimiter string Class.StringSet.">'],
['stringToShape', '(Function)', 'href="FUNCTION.string_To_Shape.html" title="Takes a shape given as a string of \'1\' (relevant position) and \'0\' (irrelevant position) and converts it into a Shape object.">'],
['stringToStringSet', '(Function)', 'href="FUNCTION.string_To_String_Set.html" title="Transform a String into a StringSet containing this String.">'],
['Strongly Connected Components', '(Demo)', 'href="DEMO_Strongly+_Connected+_Components.html" title="Computing all strongly-connected-components of a graph.">'],
['stronglyConnectedComponents', '(Function)', 'href="FUNCTION.strongly_Connected_Components.html" title="Decomposes a directed graph into its strongly connected components.">'],
['subjectBeginPos (LocalMatch)', '(Memvar)', 'href="MEMVAR_Local_Match_23subject_Begin_Pos.html" title="Begin position of local match in the subject.">'],
['subjectEndPos (LocalMatch)', '(Memvar)', 'href="MEMVAR_Local_Match_23subject_End_Pos.html" title="End position of local match in the subject.">'],
['subjectId (LocalMatch)', '(Memvar)', 'href="MEMVAR_Local_Match_23subject_Id.html" title="The id of the subject.">'],
['suffix', '(Function)', 'href="FUNCTION.suffix.html" title="Creates suffix object.">'],
['Suffix', '(Metafunction)', 'href="METAFUNCTION_Suffix.html" title="Suffix sequence type.">'],
['Suffix Array', '(Demo)', 'href="DEMO_Suffix+_Array.html" title="Example for how to create a suffix array and use it as a dictionary.">'],
['SuffixSegment', '(Spec)', 'href="SPEC_Suffix_Segment.html" title="End part segment of a sequence.">'],
['sum (Accumulator)', '(Function)', 'href="FUNCTION_Accumulator_23sum.html" title="Return sum from an accumulator.">'],
['sum (FrequencyDistribution)', '(Function)', 'href="FUNCTION_Frequency_Distribution_23sum.html" title="Determines the sum of all frequencies in a given Class.FrequencyDistribution object.">'],
['sum', '(Function)', 'href="FUNCTION.sum.html" title="Returns the sum of all elements in a sequence.">'],
['sumOfPairsScore', '(Function)', 'href="FUNCTION.sum_Of_Pairs_Score.html" title="Given a multiple alignment, this function calculates the sum-of-pairs score.">'],
['Supermaximal Repeats', '(Demo)', 'href="DEMO_Supermaximal+_Repeats.html" title="Example for using the Spec.SuperMaxRepeats Iterator.">'],
['SuperMaxRepeats Iterator', '(Spec)', 'href="SPEC_Super_Max_Repeats+_Iterator.html" title="Iterator to search for all supermaximal repeats.">'],
['SuperMaxRepeatsFast Iterator', '(Spec)', 'href="SPEC_Super_Max_Repeats_Fast+_Iterator.html" title="Iterator to search for all supermaximal repeats (for enh. suffix arrays only).">'],
['supremumValueImpl', '(Function)', 'href="FUNCTION.supremum_Value_Impl.html" title="Implements Function.maxValue.">'],
['swap', '(Function)', 'href="FUNCTION.swap.html" title="Swaps the contents of two values.">'],
['Swift', '(Spec)', 'href="SPEC_Swift.html" title="Provides a fast filter alogrithm that guarantees to find all regions overlapping with potential \\epsilon-matches. An \\epsilon-match is a matching region of minimal length and an error rate of at most \\epsilon.">'],
['SwiftLocal', '(Spec)', 'href="SPEC_Swift_Local.html" title="The specialization for the general swift filter that finds epsilon matches between haystack and needle.">'],
['SwiftSemiGlobal', '(Spec)', 'href="SPEC_Swift_Semi_Global.html" title="The specialization for the semi-global swift filter that finds regions of the haystack where a needle matches with an error rate less than \\epsilon.">'],
['Switch', '(Metafunction)', 'href="METAFUNCTION_Switch.html" title="Metaprogramming switch expression.">'],
['Sync', '(Spec)', 'href="SPEC_Sync.html" title="File structure supporting synchronous input/output access.">'],
['sysTime', '(Function)', 'href="FUNCTION.sys_Time.html" title="Returns the system time in seconds.">'],
['Tag', '(Tag)', 'href="TAG_Tag.html" title="Template for tag definition.">'],
['tagId (TagSelector)', '(Memvar)', 'href="MEMVAR_Tag_Selector_23tag_Id.html" title="Stores the index of a Page.Glossary.Tag in the tag list.">'],
['TagList', '(Tag)', 'href="TAG_Tag_List.html" title="A structure to represent a list of tags.">'],
['TagListValue', '(Metafunction)', 'href="METAFUNCTION_Tag_List_Value.html" title="A metafunction to retrieve a tag from a Tag.TagList.">'],
['tagName (GffRecord)', '(Memvar)', 'href="MEMVAR_Gff_Record_23tag_Name.html" title="The names of the attributes of the record.">'],
['tags (BamAlignmentRecord)', '(Memvar)', 'href="MEMVAR_Bam_Alignment_Record_23tags.html" title="Raw BAM tag string, use Class.BamTagsDict for comfortable access.">'],
['tags (BamHeaderRecord)', '(Memvar)', 'href="MEMVAR_Bam_Header_Record_23tags.html" title="The header record\'s tags.">'],
['Tags', '', '<a target=_parent href="INDEXPAGE_Tag.html">'],
['TagSelector', '(Class)', 'href="CLASS_Tag_Selector.html" title="A structure to select a tag from a Tag.TagList.">'],
['tagValue (GffRecord)', '(Memvar)', 'href="MEMVAR_Gff_Record_23tag_Value.html" title="The values of the attributes of the record.">'],
['TAlignedReadStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Aligned_Read_Store.html" title="Type of the Memvar.FragmentStore#alignedReadStore member.">'],
['TAlignedReadTagStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Aligned_Read_Tag_Store.html" title="Type of the Memvar.FragmentStore#alignedReadTagStore member.">'],
['TAlignQualityStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Align_Quality_Store.html" title="Type of the Memvar.FragmentStore#alignQualityStore member.">'],
['TAnnotationKeyStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Annotation_Key_Store.html" title="Type of the Memvar.FragmentStore#annotationKeyStore member.">'],
['TAnnotationNameStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Annotation_Name_Store.html" title="Type of the Memvar.FragmentStore#annotationNameStore member.">'],
['TAnnotationStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Annotation_Store.html" title="Type of the Memvar.FragmentStore#annotationStore member.">'],
['TAnnotationTypeStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Annotation_Type_Store.html" title="Type of the Memvar.FragmentStore#annotationTypeStore member.">'],
['target', '(Function)', 'href="FUNCTION.target.html" title="Accesses the target of an EdgeStump.">'],
['targetVertex', '(Function)', 'href="FUNCTION.target_Vertex.html" title="Returns the target vertex of an edge.">'],
['Tcm', '(Tag)', 'href="TAG_Tcm.html" title="Represents the Two-Component-Mixture Sequence model.">'],
['TContigFileStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Contig_File_Store.html" title="Type of the Memvar.FragmentStore#contigFileStore member.">'],
['TContigNameStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Contig_Name_Store.html" title="Type of the Memvar.FragmentStore#contigNameStore member.">'],
['TContigSeq (ContigStoreElement)', '(Typedef)', 'href="TYPEDEF_Contig_Store_Element_23_T_Contig_Seq.html" title="Type of the seq member.">'],
['TContigStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Contig_Store.html" title="Type of the Memvar.FragmentStore#contigStore member.">'],
['tell', '(Function)', 'href="FUNCTION.tell.html" title="Gets the current file pointer.">'],
['textAt', '(Function)', 'href="FUNCTION.text_At.html" title="Shortcut for value(indexText(..), ..).">'],
['TGapAnchors (AlignedReadStoreElement)', '(Typedef)', 'href="TYPEDEF_Aligned_Read_Store_Element_23_T_Gap_Anchors.html" title="Type of the Memvar.AlignedReadStoreElement#gaps member.">'],
['TGapAnchors (ContigStoreElement)', '(Typedef)', 'href="TYPEDEF_Contig_Store_Element_23_T_Gap_Anchors.html" title="Type of the gaps member.">'],
['thickBegin (Bed12 BedRecord)', '(Memvar)', 'href="MEMVAR_Bed12+_Bed_Record_23thick_Begin.html" title="The begin position of thick drawing (__int32).">'],
['thickEnd (Bed12 BedRecord)', '(Memvar)', 'href="MEMVAR_Bed12+_Bed_Record_23thick_End.html" title="The end position of thick drawing (__int32).">'],
['TId (AlignedReadStoreElement)', '(Typedef)', 'href="TYPEDEF_Aligned_Read_Store_Element_23_T_Id.html" title="Type of all stored ids.">'],
['TId (AnnotationStoreElement)', '(Typedef)', 'href="TYPEDEF_Annotation_Store_Element_23_T_Id.html" title="Type of annotationId and Memvar.AnnotationStoreElement#contigId.">'],
['tLen (BamAlignmentRecord)', '(Memvar)', 'href="MEMVAR_Bam_Alignment_Record_23t_Len.html" title="The inferred template size (INVALID_LEN for \'*\')">'],
['TLibraryNameStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Library_Name_Store.html" title="Type of the Memvar.FragmentStore#libraryNameStore member.">'],
['TLibraryStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Library_Store.html" title="Type of the Memvar.FragmentStore#libraryStore member.">'],
['TMatePairNameStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Mate_Pair_Name_Store.html" title="Type of the Memvar.FragmentStore#matePairNameStore member.">'],
['TMatePairStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Mate_Pair_Store.html" title="Type of the Memvar.FragmentStore#matePairStore member.">'],
['TNameStore (BamIOContext)', '(Typedef)', 'href="TYPEDEF_Bam_I_O_Context_23_T_Name_Store.html" title="The name store class.">'],
['TNameStore (BedIOContext)', '(Typedef)', 'href="TYPEDEF_Bed_I_O_Context_23_T_Name_Store.html" title="The name store class.">'],
['TNameStore (GffIOContext)', '(Typedef)', 'href="TYPEDEF_Gff_I_O_Context_23_T_Name_Store.html" title="The name store class.">'],
['TNameStoreCache (BamIOContext)', '(Typedef)', 'href="TYPEDEF_Bam_I_O_Context_23_T_Name_Store_Cache.html" title="The name store cache class.">'],
['TNameStoreCache (BedIOContext)', '(Typedef)', 'href="TYPEDEF_Bed_I_O_Context_23_T_Name_Store_Cache.html" title="The name store cache class.">'],
['TNameStoreCache (GffIOContext)', '(Typedef)', 'href="TYPEDEF_Gff_I_O_Context_23_T_Name_Store_Cache.html" title="The name store cache class.">'],
['toCString', '(Function)', 'href="FUNCTION.to_C_String.html" title="Access sequence as c-style string.">'],
['TokenizeResult', '(Enum)', 'href="ENUM_Tokenize_Result.html" title="Enum with return values for Tokenizing operations.">'],
['toLower', '(Function)', 'href="FUNCTION.to_Lower.html" title="Convert characters in sequence or Class.StringSet to lower case in-place.">'],
['ToolDoc', '(Class)', 'href="CLASS_Tool_Doc.html" title="Container for string documentation on a command line tool.">'],
['ToolDoc (ToolDoc)', '(Memfunc)', 'href="MEMFUNC_Tool_Doc_23_Tool_Doc.html" title="constructor">'],
['top (PriorityType)', '(Function)', 'href="FUNCTION_Priority_Type_23top.html" title="Reference to the item with the highest priority.">'],
['TopDown', '(Tag)', 'href="TAG_Top_Down.html" title="Tag that specifies a Spec.VSTree Iterator to traverse the virtual string tree from the root towards the leafs.">'],
['TopDown Iterator', '(Spec)', 'href="SPEC_Top_Down+_Iterator.html" title="Iterator for virtual trees that can go down and right beginning from the root.">'],
['TopDownHistory Iterator', '(Spec)', 'href="SPEC_Top_Down_History+_Iterator.html" title="String tree iterator that can go down, right, and up. Supports depth-first search.">'],
['Topological Sort', '(Demo)', 'href="DEMO_Topological+_Sort.html" title="Topological sort of a graph.">'],
['topologicalSort', '(Function)', 'href="FUNCTION.topological_Sort.html" title="Performs a topological sort on a directed acyclic graph (DAG).">'],
['toSourcePosition', '(Function)', 'href="FUNCTION.to_Source_Position.html" title="Transforms view to source position, if the view position is a gap, the original position of the next non-gap entry is returned.">'],
['ToStdAllocator', '(Class)', 'href="CLASS_To_Std_Allocator.html" title="Emulates standard conform allocator.">'],
['ToStdAllocator', '(Memfunc)', 'href="MEMFUNC_To_Std_Allocator.html" title="Constructor">'],
['toSuffixPosition (FMIndex)', '(Function)', 'href="FUNCTION_F_M_Index_23to_Suffix_Position.html" title="This function computes the position of a specified position in the suffix array (additionally containing entries for the sentinels. The returned position correspond to the suffix array of the original text without sentinels.">'],
['toUpper', '(Function)', 'href="FUNCTION.to_Upper.html" title="Convert characters in sequence or Class.StringSet to lower case in-place.">'],
['toViewPosition', '(Function)', 'href="FUNCTION.to_View_Position.html" title="Transforms source to view position.">'],
['TPos (AlignedReadStoreElement)', '(Typedef)', 'href="TYPEDEF_Aligned_Read_Store_Element_23_T_Pos.html" title="Type of the Memvar.AlignedReadStoreElement#beginPos and Memvar.AlignedReadStoreElement#endPos members.">'],
['TPos (AnnotationStoreElement)', '(Typedef)', 'href="TYPEDEF_Annotation_Store_Element_23_T_Pos.html" title="Type of the Memvar.AnnotationStoreElement#beginPos and Memvar.AnnotationStoreElement#endPos members.">'],
['TPos (ContigStoreElement)', '(Typedef)', 'href="TYPEDEF_Contig_Store_Element_23_T_Pos.html" title="Type of the fileBeginPos and fileEndPos members.">'],
['TraceBack', '(Spec)', 'href="SPEC_Trace_Back.html" title=" Trace back values.">'],
['transition (MarkovModel)', '(Memvar)', 'href="MEMVAR_Markov_Model_23transition.html" title="The transition matrix.">'],
['transitionProbability', '(Function)', 'href="FUNCTION.transition_Probability.html" title="Returns a reference to the transition probability.">'],
['Transitive Closure', '(Demo)', 'href="DEMO_Transitive+_Closure.html" title="Transitive closure code example">'],
['transitiveClosure', '(Function)', 'href="FUNCTION.transitive_Closure.html" title="Determines whether there is a path between any two given vertices or not.">'],
['transpose (Matrix)', '(Function)', 'href="FUNCTION_Matrix_23transpose.html" title="Transposes matrix">'],
['transpose', '(Function)', 'href="FUNCTION.transpose.html" title="Transposes a graph, either in-place or from source to dest.">'],
['TReadNameStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Read_Name_Store.html" title="Type of the Memvar.FragmentStore#readNameStore member.">'],
['TReadSeqStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Read_Seq_Store.html" title="Type of the Memvar.FragmentStore#readSeqStore member.">'],
['TReadStore (FragmentStore)', '(Typedef)', 'href="TYPEDEF_Fragment_Store_23_T_Read_Store.html" title="Type of the Memvar.FragmentStore#readStore member.">'],
['Tree', '(Spec)', 'href="SPEC_Tree.html" title="A Tree has a distinct root and directed edges. The source vertex of each edge is the parent vertex, the target vertex of each edge is the child. Trees provide fast access to child vertices and the parent.">'],
['Trie', '(Spec)', 'href="SPEC_Trie.html" title="A keyword trie.">'],
['trim (StringEnumerator)', '(Memvar)', 'href="MEMVAR_String_Enumerator_23trim.html" title="Indicate whether to ignore substitutions in first or last character of string in Levenshtein mode (optimization for approximate search).">'],
['Triple', '(Class)', 'href="CLASS_Triple.html" title="Stores three arbitrary objects.">'],
['Triple (Triple)', '(Memfunc)', 'href="MEMFUNC_Triple_23_Triple.html" title="Constructor">'],
['tripletLibraryExtension', '(Function)', 'href="FUNCTION.triplet_Library_Extension.html" title="Performs a full or group-based consistency extension.">'],
['Tristate Holder', '(Spec)', 'href="SPEC_Tristate+_Holder.html" title="Holder that can be empty, dependent, or owner.">'],
['truncateDiagonals', '(Function)', 'href="FUNCTION.truncate_Diagonals.html" title="Removes diagonals from the given first one to the end of the seed\'s diagonals.">'],
['TSpec (AlignedReadStoreElement)', '(Typedef)', 'href="TYPEDEF_Aligned_Read_Store_Element_23_T_Spec.html" title="The specialization type.">'],
['TSpec (ContigStoreElement)', '(Typedef)', 'href="TYPEDEF_Contig_Store_Element_23_T_Spec.html" title="The specialization type.">'],
['TTag (BamHeaderRecord)', '(Typedef)', 'href="TYPEDEF_Bam_Header_Record_23_T_Tag.html" title="Class.Pair to use for storing tags.">'],
['TTagName (BamHeaderRecord)', '(Typedef)', 'href="TYPEDEF_Bam_Header_Record_23_T_Tag_Name.html" title="Type of the tag keys.">'],
['TTags (BamHeaderRecord)', '(Typedef)', 'href="TYPEDEF_Bam_Header_Record_23_T_Tags.html" title="Type of the string of tag Class.Pair|Pairs.">'],
['TTagValue (BamHeaderRecord)', '(Typedef)', 'href="TYPEDEF_Bam_Header_Record_23_T_Tag_Value.html" title="Type of the tag values.">'],
['Tuple', '(Class)', 'href="CLASS_Tuple.html" title="A plain fixed-length string.">'],
['Tupler', '(Spec)', 'href="SPEC_Tupler.html" title="Outputs tuples of the tupleLen consecutive elements of the input stream.">'],
['TValues (AnnotationStoreElement)', '(Typedef)', 'href="TYPEDEF_Annotation_Store_Element_23_T_Values.html" title="Class.StringSet type of the Memvar.AnnotationStoreElement#values member.">'],
['type (BamHeaderRecord)', '(Memvar)', 'href="MEMVAR_Bam_Header_Record_23type.html" title="Type of the record.">'],
['type (GffRecord)', '(Memvar)', 'href="MEMVAR_Gff_Record_23type.html" title="The type of the record.">'],
['Typedefs', '', '<a target=_parent href="INDEXPAGE_Typedef.html">'],
['typeId (AnnotationStoreElement)', '(Memvar)', 'href="MEMVAR_Annotation_Store_Element_23type_Id.html" title="Refers to an entry in the Memvar.FragmentStore#annotationTypeStore. There are some type ids predefined for commonly used types, e.g. ANNO_GENE. See Enum.Predefined Annotation Types.">'],
['Unbanded LocalAlignmentEnumerator', '(Spec)', 'href="SPEC_Unbanded+_Local_Alignment_Enumerator.html" title="Unbanded enumeration of local alignments using the Waterman-Eggert algorithm.">'],
['unclippedLength (Gaps)', '(Function)', 'href="FUNCTION_Gaps_23unclipped_Length.html" title="Return length of the gapped sequence without clipping.">'],
['Undirected Graph', '(Spec)', 'href="SPEC_Undirected+_Graph.html" title="An undirected graph that stores the edges in an adjacency list.">'],
['UngappedShape', '(Spec)', 'href="SPEC_Ungapped_Shape.html" title="A fixed length ungapped shape (also called q-gram or k-mer).">'],
['unhash', '(Function)', 'href="FUNCTION.unhash.html" title="Inverse of the Function.hash function; for ungapped shapes.">'],
['UnicodeIterator', '(Shortcut)', 'href="SHORTCUT_Unicode_Iterator.html" title="Iterator for Shortcut.UnicodeString.">'],
['UnicodeString', '(Shortcut)', 'href="SHORTCUT_Unicode_String.html" title="A string of wchar_t.">'],
['Uniform Pdf', '(Spec)', 'href="SPEC_Uniform+_Pdf.html" title="Uniform distribution probability density function over a closed interval [min, max].">'],
['UnionFind', '(Class)', 'href="CLASS_Union_Find.html" title="Union-Find data structure.">'],
['unknownValue', '(Function)', 'href="FUNCTION.unknown_Value.html" title="Return the &quot;unknown&quot; value from an alphabet.">'],
['unknownValueImpl', '(Function)', 'href="FUNCTION.unknown_Value_Impl.html" title="Implements Function.unknownValue.">'],
['unlockAndFreeContig', '(Function)', 'href="FUNCTION.unlock_And_Free_Contig.html" title="Removes a previous contig lock and clears sequence no further lock exist.">'],
['unlockAndFreeContigs', '(Function)', 'href="FUNCTION.unlock_And_Free_Contigs.html" title="Removes a previous lock for all contigs and clears sequences without lock.">'],
['unlockContig', '(Function)', 'href="FUNCTION.unlock_Contig.html" title="Removes a previous contig lock.">'],
['unlockContigs', '(Function)', 'href="FUNCTION.unlock_Contigs.html" title="Removes a previous lock for all contigs.">'],
['unmapFileSegment', '(Function)', 'href="FUNCTION.unmap_File_Segment.html" title="Unmap a memory-mapped file segment.">'],
['UnsignedIntegerConcept', '(Concept)', 'href="CONCEPT_Unsigned_Integer_Concept.html" title="An integral type without a sign.">'],
['Upgma Configurator', '(Tag)', 'href="TAG_Upgma+_Configurator.html" title="A tag to configure the guide tree construction.">'],
['upgmaTree', '(Function)', 'href="FUNCTION.upgma_Tree.html" title="Computes a guide tree from a distance matrix.">'],
['upperBoundAlignedReads', '(Function)', 'href="FUNCTION.upper_Bound_Aligned_Reads.html" title="Performs a binary upper bound search on the aligned reads.">'],
['upperDiagonal (Seed)', '(Function)', 'href="FUNCTION_Seed_23upper_Diagonal.html" title="Returns the rightmost diagonal of the seed (maximum diagonal value).">'],
['usage (ContigStoreElement)', '(Memvar)', 'href="MEMVAR_Contig_Store_Element_23usage.html" title="Counts the number of locks, see Function.lockContigs.">'],
['value (CompressedSA)', '(Function)', 'href="FUNCTION_Compressed_S_A_23value.html" title="Returns the value stored at a specified position in the compressed suffix-array.">'],
['value (ConsensusScoreSequenceEntry)', '(Function)', 'href="FUNCTION_Consensus_Score_Sequence_Entry_23value.html" title="Returns value of character referenced by entry.">'],
['value (Map)', '(Function)', 'href="FUNCTION_Map_23value.html" title="Returns a value given a key.">'],
['value (RecordReader)', '(Function)', 'href="FUNCTION_Record_Reader_23value.html" title="Returns the current value of the reader.">'],
['value', '(Function)', 'href="FUNCTION.value.html" title="Reference to the value.">'],
['value (VcfHeaderRecord)', '(Memvar)', 'href="MEMVAR_Vcf_Header_Record_23value.html" title="Value of the header record (Shortcut.CharString).">'],
['Value (Chained Seed)', '(Metafunction)', 'href="METAFUNCTION_Chained+_Seed_23_Value.html" title="The seed diagonal type.">'],
['Value', '(Metafunction)', 'href="METAFUNCTION_Value.html" title="Type of the items in the container or behind an iterator.">'],
['valueById', '(Function)', 'href="FUNCTION.value_By_Id.html" title="Retrieves a string from the StringSet given an id.">'],
['valueConstruct', '(Function)', 'href="FUNCTION.value_Construct.html" title="Constructs an object at specified position.">'],
['valueDestruct', '(Function)', 'href="FUNCTION.value_Destruct.html" title="Destoys an object at specified position.">'],
['values (AnnotationStoreElement)', '(Memvar)', 'href="MEMVAR_Annotation_Store_Element_23values.html" title="Class.StringSet that stores additional annotation values addressed by keyId. The GFF/GTF file format allows to define user-specific key-value pairs. The set of all keys addressed by keyId are stored in the Memvar.FragmentStore#annotationKeyStore.">'],
['valueSize', '(Function)', 'href="FUNCTION.value_Size.html" title="Returns size of an alphabet.">'],
['ValueSize', '(Metafunction)', 'href="METAFUNCTION_Value_Size.html" title="Number of different values a value type object can have.">'],
['variance', '(Function)', 'href="FUNCTION.variance.html" title="Computes the variance for a set of patterns w.r.t. a set of text strings and a MarkovModel">'],
['VcfHeader', '(Class)', 'href="CLASS_Vcf_Header.html" title="Store VCF Header information.">'],
['VcfHeader (VcfHeader)', '(Memfunc)', 'href="MEMFUNC_Vcf_Header_23_Vcf_Header.html" title="Only default constructor.">'],
['VcfHeaderRecord', '(Class)', 'href="CLASS_Vcf_Header_Record.html" title="Store key/value pair for VCF header records.">'],
['VcfHeaderRecord (VcfHeaderRecord)', '(Memfunc)', 'href="MEMFUNC_Vcf_Header_Record_23_Vcf_Header_Record.html" title="Constructor">'],
['VcfIOContext', '(Class)', 'href="CLASS_Vcf_I_O_Context.html" title="The I/O context to use for VCF I/O.">'],
['VcfIOContext (VcfIOContext)', '(Memfunc)', 'href="MEMFUNC_Vcf_I_O_Context_23_Vcf_I_O_Context.html" title="Constructor.">'],
['VcfRecord', '(Class)', 'href="CLASS_Vcf_Record.html" title="Information for one VCF record.">'],
['VcfRecord (VcfRecord)', '(Memfunc)', 'href="MEMFUNC_Vcf_Record_23_Vcf_Record.html" title="Default constructor.">'],
['VcfStream', '(Class)', 'href="CLASS_Vcf_Stream.html" title="High-level VCF I/O class.">'],
['VcfStream (VcfStream)', '(Memfunc)', 'href="MEMFUNC_Vcf_Stream_23_Vcf_Stream.html" title="Constructor.">'],
['VcfStream::Mode', '(Enum)', 'href="ENUM_Vcf_Stream_5ccolon_5ccolon_Mode.html" title="Open mode for the Class.VcfStream class.">'],
['VectorSet', '(Spec)', 'href="SPEC_Vector_Set.html" title="A fast map for small key types.">'],
['Vertex Iterator', '(Spec)', 'href="SPEC_Vertex+_Iterator.html" title="Vertex iterator for Class.Graph.">'],
['VertexDescriptor', '(Metafunction)', 'href="METAFUNCTION_Vertex_Descriptor.html" title="Type of an object that represents a vertex descriptor.">'],
['VertexIdHandler', '(Metafunction)', 'href="METAFUNCTION_Vertex_Id_Handler.html" title="Type of an object that represents an Id Manager.">'],
['virtualToHostPosition (Journaled String)', '(Function)', 'href="FUNCTION_Journaled+_String_23virtual_To_Host_Position.html" title="Translates virtual (view) position to position in host.">'],
['viterbiAlgorithm', '(Function)', 'href="FUNCTION.viterbi_Algorithm.html" title="Implements the Viterbi algorithm">'],
['VolatilePtr', '(Class)', 'href="CLASS_Volatile_Ptr.html" title="Helper data structure for handling volatile data.">'],
['VSTree Iterator', '(Spec)', 'href="SPEC_V_S_Tree+_Iterator.html" title="Abstract iterator for suffix trees.">'],
['Vtml200', '(Shortcut)', 'href="SHORTCUT_Vtml200.html" title="Vtml200 scoring matrix.">'],
['waitFor', '(Function)', 'href="FUNCTION.wait_For.html" title="Waits for an asynchronous request to complete.">'],
['WaveletTree', '(Spec)', 'href="SPEC_Wavelet_Tree.html" title="A wavelet tree is a tree like binary encoding of a text.">'],
['WaveletTree Fibres', '(Tag)', 'href="TAG_Wavelet_Tree+_Fibres.html" title="Tag to select a specific fibre (e.g. table, object, ...) of a Spec.WaveletTree.">'],
['weaklyConnectedComponents', '(Function)', 'href="FUNCTION.weakly_Connected_Components.html" title="Compute weakly connected components of a directed graph.">'],
['weight', '(Function)', 'href="FUNCTION.weight.html" title="Number of relevant positions in a shape.">'],
['WEIGHT', '(Metafunction)', 'href="METAFUNCTION_W_E_I_G_H_T.html" title="Number of relevant positions in a shape.">'],
['Wildcard Searching', '(Demo)', 'href="DEMO_Wildcard+_Searching.html" title="String matching using wildcards.">'],
['WildShiftAnd', '(Spec)', 'href="SPEC_Wild_Shift_And.html" title=" Exact string matching with wildcards using bit parallelism. The Shift-And algorithm is applicable to search small patterns in texts using a small alphabet.">'],
['windowFindBegin', '(Function)', 'href="FUNCTION.window_Find_Begin.html" title="Initializes the pattern. Sets the finder on the begin position.  Gets the first non-repeat range and sets it in the finder.  Used together with Function.windowFindBegin and Function.windowFindEnd.">'],
['windowFindEnd', '(Function)', 'href="FUNCTION.window_Find_End.html" title="Flushes the pattern. Used together with Function.windowFindBegin and Function.windowFindNext.">'],
['windowFindNext', '(Function)', 'href="FUNCTION.window_Find_Next.html" title="Searches over the next window with the finder. The found hits can be retrieved with Function.getWindowFindHits  Used together with Function.windowFindBegin and Function.windowFindEnd.">'],
['Word Graph', '(Spec)', 'href="SPEC_Word+_Graph.html" title="A special automaton that stores words instead of single characters along its edges.">'],
['WOTD Index Fibres', '(Tag)', 'href="TAG_W_O_T_D+_Index+_Fibres.html" title="Tag to select a specific fibre (e.g. table, object, ...) of an Spec.IndexWotd index.">'],
['write (ArgParseOption)', '(Function)', 'href="FUNCTION_Arg_Parse_Option_23write.html" title="Writes the basic information about the Class.ArgParseOption to the provided stream.">'],
['write (FaiIndex)', '(Function)', 'href="FUNCTION_Fai_Index_23write.html" title="Write out an Class.FaiIndex object.">'],
['write (FileFormat)', '(Function)', 'href="FUNCTION_File_Format_23write.html" title="Writes to stream.">'],
['write (Score Matrix)', '(Function)', 'href="FUNCTION_Score+_Matrix_23write.html" title="Write a score matrix to a stream.">'],
['write (VCF I/O)', '(Function)', 'href="FUNCTION_V_C_F+_I_2f_O_23write.html" title="Write a Class.VcfHeader.">'],
['write', '(Function)', 'href="FUNCTION.write.html" title="Saves records to a file.">'],
['write (MarkovModel)', '(Memfunc)', 'href="MEMFUNC_Markov_Model_23write.html" title=" Stores an instance of MarkovModel on a file">'],
['write2 (FASTA/FASTQ I/O)', '(Function)', 'href="FUNCTION_F_A_S_T_A_2f_F_A_S_T_Q+_I_2f_O_23write2.html" title="Write FASTA or FASTQ records.">'],
['write2', '(Function)', 'href="FUNCTION.write2.html" title="writes an entire document to a Concept.StreamConcept">'],
['writeAll (SequenceStream)', '(Function)', 'href="FUNCTION_Sequence_Stream_23write_All.html" title="Write sequence records from to a Class.SequenceStream object.">'],
['writeAt', '(Function)', 'href="FUNCTION.write_At.html" title="Saves records to a specific position in a file.">'],
['writeContigs', '(Function)', 'href="FUNCTION.write_Contigs.html" title="Write contigs from fragment store into file.">'],
['writeCTD', '(Function)', 'href="FUNCTION.write_C_T_D.html" title="Exports the app\'s interface description to a .ctd file.">'],
['writeRecord (BamStream)', '(Function)', 'href="FUNCTION_Bam_Stream_23write_Record.html" title="Write one Class.BamAlignmentRecord to a Class.BamStream.">'],
['writeRecord (BedRecord)', '(Function)', 'href="FUNCTION_Bed_Record_23write_Record.html" title="Write a BED record to a file.">'],
['writeRecord (BedStream)', '(Function)', 'href="FUNCTION_Bed_Stream_23write_Record.html" title="Write a record to a Class.BedStream">'],
['writeRecord (FASTA/FASTQ I/O)', '(Function)', 'href="FUNCTION_F_A_S_T_A_2f_F_A_S_T_Q+_I_2f_O_23write_Record.html" title="Write one FASTA or FASTQ record.">'],
['writeRecord (GffRecord)', '(Function)', 'href="FUNCTION_Gff_Record_23write_Record.html" title="Writes one gff record to a stream.">'],
['writeRecord (GffStream)', '(Function)', 'href="FUNCTION_Gff_Stream_23write_Record.html" title="Write a record to a Class.GffStream">'],
['writeRecord (SequenceStream)', '(Function)', 'href="FUNCTION_Sequence_Stream_23write_Record.html" title="Write one sequence record from to a Class.SequenceStream object.">'],
['writeRecord (VCF I/O)', '(Function)', 'href="FUNCTION_V_C_F+_I_2f_O_23write_Record.html" title="Write a Class.VcfRecord.">'],
['writeRecord (VcfStream)', '(Function)', 'href="FUNCTION_Vcf_Stream_23write_Record.html" title="Write a record to a Class.VcfStream">'],
['writeRecord', '(Function)', 'href="FUNCTION.write_Record.html" title="write one record (e.g. a single DNA-sequence and its meta data) to a Concept.StreamConcept">'],
['WT', '(Tag)', 'href="TAG_W_T.html" title="Tag that specifies the Spec.FMIndex to use a wavelet tree as the occurrence table.">'],
['WuManber', '(Spec)', 'href="SPEC_Wu_Manber.html" title="Online-algorithm for multi-pattern search.">'],
['xmlEscape', '(Function)', 'href="FUNCTION.xml_Escape.html" title="Replaces invalid XML characters in the given sequence with their valid XML equivalent.">'],
['Zoops', '(Tag)', 'href="TAG_Zoops.html" title="Represents the Zero or One Occurence Per Sequence model.">'],
['zscore', '(Function)', 'href="FUNCTION.zscore.html" title="Computes the z-score index for a set of patterns w.r.t. a set of text strings and a MarkovModel">'],
false];
